package com.cjq.parser;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.ArrayList;
import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class SqlBaseParser extends Parser {
    static {
        RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION);
    }

    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
            new PredictionContextCache();
    public static final int
            SEMICOLON = 1, LEFT_PAREN = 2, RIGHT_PAREN = 3, COMMA = 4, DOT = 5, LEFT_BRACKET = 6,
            RIGHT_BRACKET = 7, BANG = 8, ADD = 9, AFTER = 10, ALL = 11, ALTER = 12, ALWAYS = 13,
            ANALYZE = 14, AND = 15, ANTI = 16, ANY = 17, ANY_VALUE = 18, ARCHIVE = 19, ARRAY = 20,
            AS = 21, ASC = 22, AT = 23, AUTHORIZATION = 24, BETWEEN = 25, BIGINT = 26, BINARY = 27,
            BOOLEAN = 28, BOTH = 29, BUCKET = 30, BUCKETS = 31, BY = 32, BYTE = 33, CACHE = 34,
            CASCADE = 35, CASE = 36, CAST = 37, CATALOG = 38, CATALOGS = 39, CHANGE = 40, CHAR = 41,
            CHARACTER = 42, CHECK = 43, CLEAR = 44, CLUSTER = 45, CLUSTERED = 46, CODEGEN = 47,
            COLLATE = 48, COLLATION = 49, COLLECTION = 50, COLUMN = 51, COLUMNS = 52, COMMENT = 53,
            COMMIT = 54, COMPACT = 55, COMPACTIONS = 56, COMPUTE = 57, CONCATENATE = 58, CONSTRAINT = 59,
            COST = 60, CREATE = 61, CROSS = 62, CUBE = 63, CURRENT = 64, CURRENT_DATE = 65, CURRENT_TIME = 66,
            CURRENT_TIMESTAMP = 67, CURRENT_USER = 68, DAY = 69, DAYS = 70, DAYOFYEAR = 71,
            DATA = 72, DATE = 73, DATABASE = 74, DATABASES = 75, DATEADD = 76, DATE_ADD = 77,
            DATEDIFF = 78, DATE_DIFF = 79, DBPROPERTIES = 80, DEC = 81, DECIMAL = 82, DECLARE = 83,
            DEFAULT = 84, DEFINED = 85, DELETE = 86, DELIMITED = 87, DESC = 88, DESCRIBE = 89,
            DFS = 90, DIRECTORIES = 91, DIRECTORY = 92, DISTINCT = 93, DISTRIBUTE = 94, DIV = 95,
            DOUBLE = 96, DROP = 97, ELSE = 98, END = 99, ESCAPE = 100, ESCAPED = 101, EVOLUTION = 102,
            EXCEPT = 103, EXCHANGE = 104, EXCLUDE = 105, EXISTS = 106, EXPLAIN = 107, EXPORT = 108,
            EXTENDED = 109, EXTERNAL = 110, EXTRACT = 111, FALSE = 112, FETCH = 113, FIELDS = 114,
            FILTER = 115, FILEFORMAT = 116, FIRST = 117, FLOAT = 118, FOLLOWING = 119, FOR = 120,
            FOREIGN = 121, FORMAT = 122, FORMATTED = 123, FROM = 124, FULL = 125, FUNCTION = 126,
            FUNCTIONS = 127, GENERATED = 128, GLOBAL = 129, GRANT = 130, GROUP = 131, GROUPING = 132,
            HAVING = 133, BINARY_HEX = 134, HOUR = 135, HOURS = 136, IDENTIFIER_KW = 137, IF = 138,
            IGNORE = 139, IMMEDIATE = 140, IMPORT = 141, IN = 142, INCLUDE = 143, INDEX = 144,
            INDEXES = 145, INNER = 146, INPATH = 147, INPUTFORMAT = 148, INSERT = 149, INTERSECT = 150,
            INTERVAL = 151, INT = 152, INTEGER = 153, INTO = 154, IS = 155, ITEMS = 156, JOIN = 157,
            KEYS = 158, LAST = 159, LATERAL = 160, LAZY = 161, LEADING = 162, LEFT = 163, LIKE = 164,
            ILIKE = 165, LIMIT = 166, LINES = 167, LIST = 168, LOAD = 169, LOCAL = 170, LOCATION = 171,
            LOCK = 172, LOCKS = 173, LOGICAL = 174, LONG = 175, MACRO = 176, MAP = 177, MATCHED = 178,
            MERGE = 179, MICROSECOND = 180, MICROSECONDS = 181, MILLISECOND = 182, MILLISECONDS = 183,
            MINUTE = 184, MINUTES = 185, MONTH = 186, MONTHS = 187, MSCK = 188, NAME = 189, NAMESPACE = 190,
            NAMESPACES = 191, NANOSECOND = 192, NANOSECONDS = 193, NATURAL = 194, NO = 195,
            NOT = 196, NULL = 197, NULLS = 198, NUMERIC = 199, OF = 200, OFFSET = 201, ON = 202,
            ONLY = 203, OPTION = 204, OPTIONS = 205, OR = 206, ORDER = 207, OUT = 208, OUTER = 209,
            OUTPUTFORMAT = 210, OVER = 211, OVERLAPS = 212, OVERLAY = 213, OVERWRITE = 214,
            PARTITION = 215, PARTITIONED = 216, PARTITIONS = 217, PERCENTILE_CONT = 218, PERCENTILE_DISC = 219,
            PERCENTLIT = 220, PIVOT = 221, PLACING = 222, POSITION = 223, PRECEDING = 224, PRIMARY = 225,
            PRINCIPALS = 226, PROPERTIES = 227, PURGE = 228, QUARTER = 229, QUERY = 230, RANGE = 231,
            REAL = 232, RECORDREADER = 233, RECORDWRITER = 234, RECOVER = 235, REDUCE = 236,
            REFERENCES = 237, REFRESH = 238, RENAME = 239, REPAIR = 240, REPEATABLE = 241, REPLACE = 242,
            RESET = 243, RESPECT = 244, RESTRICT = 245, REVOKE = 246, RIGHT = 247, RLIKE = 248,
            ROLE = 249, ROLES = 250, ROLLBACK = 251, ROLLUP = 252, ROW = 253, ROWS = 254, SECOND = 255,
            SECONDS = 256, SCHEMA = 257, SCHEMAS = 258, SELECT = 259, SEMI = 260, SEPARATED = 261,
            SERDE = 262, SERDEPROPERTIES = 263, SESSION_USER = 264, SET = 265, SETMINUS = 266,
            SETS = 267, SHORT = 268, SHOW = 269, SINGLE = 270, SKEWED = 271, SMALLINT = 272, SOME = 273,
            SORT = 274, SORTED = 275, SOURCE = 276, START = 277, STATISTICS = 278, STORED = 279,
            STRATIFY = 280, STRING = 281, STRUCT = 282, SUBSTR = 283, SUBSTRING = 284, SYNC = 285,
            SYSTEM_TIME = 286, SYSTEM_VERSION = 287, TABLE = 288, TABLES = 289, TABLESAMPLE = 290,
            TARGET = 291, TBLPROPERTIES = 292, TEMPORARY = 293, TERMINATED = 294, THEN = 295,
            TIME = 296, TIMEDIFF = 297, TIMESTAMP = 298, TIMESTAMP_LTZ = 299, TIMESTAMP_NTZ = 300,
            TIMESTAMPADD = 301, TIMESTAMPDIFF = 302, TINYINT = 303, TO = 304, EXECUTE = 305,
            TOUCH = 306, TRAILING = 307, TRANSACTION = 308, TRANSACTIONS = 309, TRANSFORM = 310,
            TRIM = 311, TRUE = 312, TRUNCATE = 313, TRY_CAST = 314, TYPE = 315, UNARCHIVE = 316,
            UNBOUNDED = 317, UNCACHE = 318, UNION = 319, UNIQUE = 320, UNKNOWN = 321, UNLOCK = 322,
            UNPIVOT = 323, UNSET = 324, UPDATE = 325, USE = 326, USER = 327, USING = 328, VALUES = 329,
            VARCHAR = 330, VAR = 331, VARIABLE = 332, VARIANT = 333, VERSION = 334, VIEW = 335,
            VIEWS = 336, VOID = 337, WEEK = 338, WEEKS = 339, WHEN = 340, WHERE = 341, WINDOW = 342,
            WITH = 343, WITHIN = 344, YEAR = 345, YEARS = 346, ZONE = 347, AUTO = 348, MATCH = 349,
            MATCH_PHRASE = 350, TERM = 351, MULTI_MATCH = 352, EQ = 353, NSEQ = 354, NEQ = 355,
            NEQJ = 356, LT = 357, LTE = 358, GT = 359, GTE = 360, PLUS = 361, MINUS = 362, ASTERISK = 363,
            SLASH = 364, PERCENT = 365, TILDE = 366, AMPERSAND = 367, PIPE = 368, CONCAT_PIPE = 369,
            HAT = 370, COLON = 371, DOUBLE_COLON = 372, ARROW = 373, FAT_ARROW = 374, HENT_START = 375,
            HENT_END = 376, QUESTION = 377, STRING_LITERAL = 378, DOUBLEQUOTED_STRING = 379,
            BIGINT_LITERAL = 380, SMALLINT_LITERAL = 381, TINYINT_LITERAL = 382, INTEGER_VALUE = 383,
            SINGLE_DIGIT = 384, EXPONENT_VALUE = 385, DECIMAL_VALUE = 386, FLOAT_LITERAL = 387,
            DOUBLE_LITERAL = 388, BIGDECIMAL_LITERAL = 389, IDENTIFIER = 390, BACKQUOTED_IDENTIFIER = 391,
            SIMPLE_COMMENT = 392, BRACKETED_COMMENT = 393, WS = 394, UNRECOGNIZED = 395;
    public static final int
            RULE_singleStatement = 0, RULE_singleExpression = 1, RULE_singleTableIdentifier = 2,
            RULE_singleMultipartIdentifier = 3, RULE_singleFunctionIdentifier = 4,
            RULE_singleDataType = 5, RULE_singleTableSchema = 6, RULE_statement = 7,
            RULE_executeImmediate = 8, RULE_executeImmediateUsing = 9, RULE_executeImmediateQueryParam = 10,
            RULE_executeImmediateArgument = 11, RULE_executeImmediateArgumentSeq = 12,
            RULE_timezone = 13, RULE_configKey = 14, RULE_configValue = 15, RULE_unsupportedHiveNativeCommands = 16,
            RULE_createTableHeader = 17, RULE_replaceTableHeader = 18, RULE_clusterBySpec = 19,
            RULE_bucketSpec = 20, RULE_skewSpec = 21, RULE_locationSpec = 22, RULE_commentSpec = 23,
            RULE_query = 24, RULE_insertInto = 25, RULE_partitionSpecLocation = 26,
            RULE_partitionSpec = 27, RULE_partitionVal = 28, RULE_namespace = 29,
            RULE_namespaces = 30, RULE_describeFuncName = 31, RULE_describeColName = 32,
            RULE_ctes = 33, RULE_namedQuery = 34, RULE_tableProvider = 35, RULE_createTableClauses = 36,
            RULE_propertyList = 37, RULE_property = 38, RULE_propertyKey = 39, RULE_propertyValue = 40,
            RULE_expressionPropertyList = 41, RULE_expressionProperty = 42, RULE_constantList = 43,
            RULE_nestedConstantList = 44, RULE_createFileFormat = 45, RULE_fileFormat = 46,
            RULE_storageHandler = 47, RULE_resource = 48, RULE_dmlStatementNoWith = 49,
            RULE_identifierReference = 50, RULE_limitPagination = 51, RULE_queryOrganization = 52,
            RULE_multiInsertQueryBody = 53, RULE_queryTerm = 54, RULE_queryPrimary = 55,
            RULE_sortItem = 56, RULE_fromStatement = 57, RULE_fromStatementBody = 58,
            RULE_querySpecification = 59, RULE_transformClause = 60, RULE_selectClause = 61,
            RULE_setClause = 62, RULE_matchedClause = 63, RULE_notMatchedClause = 64,
            RULE_notMatchedBySourceClause = 65, RULE_matchedAction = 66, RULE_notMatchedAction = 67,
            RULE_notMatchedBySourceAction = 68, RULE_exceptClause = 69, RULE_assignmentList = 70,
            RULE_assignment = 71, RULE_whereClause = 72, RULE_havingClause = 73, RULE_hint = 74,
            RULE_hintStatement = 75, RULE_fromClause = 76, RULE_temporalClause = 77,
            RULE_aggregationClause = 78, RULE_groupByClause = 79, RULE_groupingAnalytics = 80,
            RULE_groupingElement = 81, RULE_groupingSet = 82, RULE_pivotClause = 83,
            RULE_pivotColumn = 84, RULE_pivotValue = 85, RULE_unpivotClause = 86,
            RULE_unpivotNullClause = 87, RULE_unpivotOperator = 88, RULE_unpivotSingleValueColumnClause = 89,
            RULE_unpivotMultiValueColumnClause = 90, RULE_unpivotColumnSet = 91, RULE_unpivotValueColumn = 92,
            RULE_unpivotNameColumn = 93, RULE_unpivotColumnAndAlias = 94, RULE_unpivotColumn = 95,
            RULE_unpivotAlias = 96, RULE_lateralView = 97, RULE_setQuantifier = 98,
            RULE_relation = 99, RULE_relationExtension = 100, RULE_joinRelation = 101,
            RULE_joinType = 102, RULE_joinCriteria = 103, RULE_sample = 104, RULE_sampleMethod = 105,
            RULE_identifierList = 106, RULE_identifierSeq = 107, RULE_orderedIdentifierList = 108,
            RULE_orderedIdentifier = 109, RULE_identifierCommentList = 110, RULE_identifierComment = 111,
            RULE_relationPrimary = 112, RULE_inlineTable = 113, RULE_functionTableSubqueryArgument = 114,
            RULE_tableArgumentPartitioning = 115, RULE_functionTableNamedArgumentExpression = 116,
            RULE_functionTableReferenceArgument = 117, RULE_functionTableArgument = 118,
            RULE_functionTable = 119, RULE_tableAlias = 120, RULE_rowFormat = 121,
            RULE_multipartIdentifierList = 122, RULE_multipartIdentifier = 123, RULE_multipartIdentifierPropertyList = 124,
            RULE_multipartIdentifierProperty = 125, RULE_tableIdentifier = 126, RULE_functionIdentifier = 127,
            RULE_namedExpression = 128, RULE_namedExpressionSeq = 129, RULE_partitionFieldList = 130,
            RULE_partitionField = 131, RULE_transform = 132, RULE_transformArgument = 133,
            RULE_expression = 134, RULE_namedArgumentExpression = 135, RULE_functionArgument = 136,
            RULE_expressionSeq = 137, RULE_booleanExpression = 138, RULE_fuzzinessExpression = 139,
            RULE_predicate = 140, RULE_valueExpression = 141, RULE_datetimeUnit = 142,
            RULE_primaryExpression = 143, RULE_literalType = 144, RULE_constant = 145,
            RULE_comparisonOperator = 146, RULE_arithmeticOperator = 147, RULE_predicateOperator = 148,
            RULE_booleanValue = 149, RULE_interval = 150, RULE_errorCapturingMultiUnitsInterval = 151,
            RULE_multiUnitsInterval = 152, RULE_errorCapturingUnitToUnitInterval = 153,
            RULE_unitToUnitInterval = 154, RULE_intervalValue = 155, RULE_unitInMultiUnits = 156,
            RULE_unitInUnitToUnit = 157, RULE_colPosition = 158, RULE_collateClause = 159,
            RULE_type = 160, RULE_dataType = 161, RULE_qualifiedColTypeWithPositionList = 162,
            RULE_qualifiedColTypeWithPosition = 163, RULE_colDefinitionDescriptorWithPosition = 164,
            RULE_defaultExpression = 165, RULE_variableDefaultExpression = 166, RULE_colTypeList = 167,
            RULE_colType = 168, RULE_createOrReplaceTableColTypeList = 169, RULE_createOrReplaceTableColType = 170,
            RULE_colDefinitionOption = 171, RULE_generationExpression = 172, RULE_complexColTypeList = 173,
            RULE_complexColType = 174, RULE_whenClause = 175, RULE_windowClause = 176,
            RULE_namedWindow = 177, RULE_windowSpec = 178, RULE_windowFrame = 179,
            RULE_frameBound = 180, RULE_qualifiedNameList = 181, RULE_functionName = 182,
            RULE_qualifiedName = 183, RULE_errorCapturingIdentifier = 184, RULE_errorCapturingIdentifierExtra = 185,
            RULE_identifier = 186, RULE_strictIdentifier = 187, RULE_quotedIdentifier = 188,
            RULE_backQuotedIdentifier = 189, RULE_number = 190, RULE_alterColumnAction = 191,
            RULE_stringLit = 192, RULE_comment = 193, RULE_version = 194, RULE_ansiNonReserved = 195,
            RULE_strictNonReserved = 196, RULE_nonReserved = 197;

    private static String[] makeRuleNames() {
        return new String[]{
                "singleStatement", "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier",
                "singleFunctionIdentifier", "singleDataType", "singleTableSchema", "statement",
                "executeImmediate", "executeImmediateUsing", "executeImmediateQueryParam",
                "executeImmediateArgument", "executeImmediateArgumentSeq", "timezone",
                "configKey", "configValue", "unsupportedHiveNativeCommands", "createTableHeader",
                "replaceTableHeader", "clusterBySpec", "bucketSpec", "skewSpec", "locationSpec",
                "commentSpec", "query", "insertInto", "partitionSpecLocation", "partitionSpec",
                "partitionVal", "namespace", "namespaces", "describeFuncName", "describeColName",
                "ctes", "namedQuery", "tableProvider", "createTableClauses", "propertyList",
                "property", "propertyKey", "propertyValue", "expressionPropertyList",
                "expressionProperty", "constantList", "nestedConstantList", "createFileFormat",
                "fileFormat", "storageHandler", "resource", "dmlStatementNoWith", "identifierReference",
                "limitPagination", "queryOrganization", "multiInsertQueryBody", "queryTerm",
                "queryPrimary", "sortItem", "fromStatement", "fromStatementBody", "querySpecification",
                "transformClause", "selectClause", "setClause", "matchedClause", "notMatchedClause",
                "notMatchedBySourceClause", "matchedAction", "notMatchedAction", "notMatchedBySourceAction",
                "exceptClause", "assignmentList", "assignment", "whereClause", "havingClause",
                "hint", "hintStatement", "fromClause", "temporalClause", "aggregationClause",
                "groupByClause", "groupingAnalytics", "groupingElement", "groupingSet",
                "pivotClause", "pivotColumn", "pivotValue", "unpivotClause", "unpivotNullClause",
                "unpivotOperator", "unpivotSingleValueColumnClause", "unpivotMultiValueColumnClause",
                "unpivotColumnSet", "unpivotValueColumn", "unpivotNameColumn", "unpivotColumnAndAlias",
                "unpivotColumn", "unpivotAlias", "lateralView", "setQuantifier", "relation",
                "relationExtension", "joinRelation", "joinType", "joinCriteria", "sample",
                "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList",
                "orderedIdentifier", "identifierCommentList", "identifierComment", "relationPrimary",
                "inlineTable", "functionTableSubqueryArgument", "tableArgumentPartitioning",
                "functionTableNamedArgumentExpression", "functionTableReferenceArgument",
                "functionTableArgument", "functionTable", "tableAlias", "rowFormat",
                "multipartIdentifierList", "multipartIdentifier", "multipartIdentifierPropertyList",
                "multipartIdentifierProperty", "tableIdentifier", "functionIdentifier",
                "namedExpression", "namedExpressionSeq", "partitionFieldList", "partitionField",
                "transform", "transformArgument", "expression", "namedArgumentExpression",
                "functionArgument", "expressionSeq", "booleanExpression", "fuzzinessExpression",
                "predicate", "valueExpression", "datetimeUnit", "primaryExpression",
                "literalType", "constant", "comparisonOperator", "arithmeticOperator",
                "predicateOperator", "booleanValue", "interval", "errorCapturingMultiUnitsInterval",
                "multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval",
                "intervalValue", "unitInMultiUnits", "unitInUnitToUnit", "colPosition",
                "collateClause", "type", "dataType", "qualifiedColTypeWithPositionList",
                "qualifiedColTypeWithPosition", "colDefinitionDescriptorWithPosition",
                "defaultExpression", "variableDefaultExpression", "colTypeList", "colType",
                "createOrReplaceTableColTypeList", "createOrReplaceTableColType", "colDefinitionOption",
                "generationExpression", "complexColTypeList", "complexColType", "whenClause",
                "windowClause", "namedWindow", "windowSpec", "windowFrame", "frameBound",
                "qualifiedNameList", "functionName", "qualifiedName", "errorCapturingIdentifier",
                "errorCapturingIdentifierExtra", "identifier", "strictIdentifier", "quotedIdentifier",
                "backQuotedIdentifier", "number", "alterColumnAction", "stringLit", "comment",
                "version", "ansiNonReserved", "strictNonReserved", "nonReserved"
        };
    }

    public static final String[] ruleNames = makeRuleNames();

    private static String[] makeLiteralNames() {
        return new String[]{
                null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'!'", "'ADD'",
                "'AFTER'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'ANTI'",
                "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'",
                "'AUTHORIZATION'", "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BOOLEAN'",
                "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'BYTE'", "'CACHE'", "'CASCADE'",
                "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", "'CHANGE'", "'CHAR'",
                "'CHARACTER'", "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'",
                "'COLLATE'", "'COLLATION'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'",
                "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", "'COMPUTE'", "'CONCATENATE'",
                "'CONSTRAINT'", "'COST'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'",
                "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'",
                "'DAY'", "'DAYS'", "'DAYOFYEAR'", "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'",
                "'DATEADD'", "'DATE_ADD'", "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'",
                "'DEC'", "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFINED'", "'DELETE'",
                "'DELIMITED'", "'DESC'", "'DESCRIBE'", "'DFS'", "'DIRECTORIES'", "'DIRECTORY'",
                "'DISTINCT'", "'DISTRIBUTE'", "'DIV'", "'DOUBLE'", "'DROP'", "'ELSE'",
                "'END'", "'ESCAPE'", "'ESCAPED'", "'EVOLUTION'", "'EXCEPT'", "'EXCHANGE'",
                "'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'",
                "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'",
                "'FIRST'", "'FLOAT'", "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'",
                "'FORMATTED'", "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'",
                "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'X'", "'HOUR'",
                "'HOURS'", "'IDENTIFIER'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IMPORT'",
                "'IN'", "'INCLUDE'", "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", "'INPUTFORMAT'",
                "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INT'", "'INTEGER'", "'INTO'",
                "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", "'LAZY'",
                "'LEADING'", "'LEFT'", "'LIKE'", "'ILIKE'", "'LIMIT'", "'LINES'", "'LIST'",
                "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'",
                "'LONG'", "'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", "'MICROSECOND'",
                "'MICROSECONDS'", "'MILLISECOND'", "'MILLISECONDS'", "'MINUTE'", "'MINUTES'",
                "'MONTH'", "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", "'NAMESPACES'",
                "'NANOSECOND'", "'NANOSECONDS'", "'NATURAL'", "'NO'", "'NOT'", "'NULL'",
                "'NULLS'", "'NUMERIC'", "'OF'", "'OFFSET'", "'ON'", "'ONLY'", "'OPTION'",
                "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'",
                "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'",
                "'PARTITIONS'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERCENT'",
                "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'",
                "'PROPERTIES'", "'PURGE'", "'QUARTER'", "'QUERY'", "'RANGE'", "'REAL'",
                "'RECORDREADER'", "'RECORDWRITER'", "'RECOVER'", "'REDUCE'", "'REFERENCES'",
                "'REFRESH'", "'RENAME'", "'REPAIR'", "'REPEATABLE'", "'REPLACE'", "'RESET'",
                "'RESPECT'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", null, "'ROLE'", "'ROLES'",
                "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SECOND'", "'SECONDS'",
                "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'",
                "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", "'SETS'",
                "'SHORT'", "'SHOW'", "'SINGLE'", "'SKEWED'", "'SMALLINT'", "'SOME'",
                "'SORT'", "'SORTED'", "'SOURCE'", "'START'", "'STATISTICS'", "'STORED'",
                "'STRATIFY'", "'STRING'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'SYNC'",
                "'SYSTEM_TIME'", "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'",
                "'TARGET'", "'TBLPROPERTIES'", null, "'TERMINATED'", "'THEN'", "'TIME'",
                "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", "'TIMESTAMPADD'",
                "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", "'EXECUTE'", "'TOUCH'", "'TRAILING'",
                "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", "'TRIM'", "'TRUE'",
                "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", "'UNBOUNDED'", "'UNCACHE'",
                "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", "'UNPIVOT'", "'UNSET'",
                "'UPDATE'", "'USE'", "'USER'", "'USING'", "'VALUES'", "'VARCHAR'", "'VAR'",
                "'VARIABLE'", "'VARIANT'", "'VERSION'", "'VIEW'", "'VIEWS'", "'VOID'",
                "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'",
                "'YEAR'", "'YEARS'", "'ZONE'", "'AUTO'", "'MATCH'", "'MATCH_PHRASE'",
                "'TERM'", "'MULTI_MATCH'", null, "'<=>'", "'<>'", "'!='", "'<'", null,
                "'>'", null, "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'",
                "'||'", "'^'", "':'", "'::'", "'->'", "'=>'", "'/*+'", "'*/'", "'?'"
        };
    }

    private static final String[] _LITERAL_NAMES = makeLiteralNames();

    private static String[] makeSymbolicNames() {
        return new String[]{
                null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", "LEFT_BRACKET",
                "RIGHT_BRACKET", "BANG", "ADD", "AFTER", "ALL", "ALTER", "ALWAYS", "ANALYZE",
                "AND", "ANTI", "ANY", "ANY_VALUE", "ARCHIVE", "ARRAY", "AS", "ASC", "AT",
                "AUTHORIZATION", "BETWEEN", "BIGINT", "BINARY", "BOOLEAN", "BOTH", "BUCKET",
                "BUCKETS", "BY", "BYTE", "CACHE", "CASCADE", "CASE", "CAST", "CATALOG",
                "CATALOGS", "CHANGE", "CHAR", "CHARACTER", "CHECK", "CLEAR", "CLUSTER",
                "CLUSTERED", "CODEGEN", "COLLATE", "COLLATION", "COLLECTION", "COLUMN",
                "COLUMNS", "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE",
                "CONCATENATE", "CONSTRAINT", "COST", "CREATE", "CROSS", "CUBE", "CURRENT",
                "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
                "DAY", "DAYS", "DAYOFYEAR", "DATA", "DATE", "DATABASE", "DATABASES",
                "DATEADD", "DATE_ADD", "DATEDIFF", "DATE_DIFF", "DBPROPERTIES", "DEC",
                "DECIMAL", "DECLARE", "DEFAULT", "DEFINED", "DELETE", "DELIMITED", "DESC",
                "DESCRIBE", "DFS", "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE",
                "DIV", "DOUBLE", "DROP", "ELSE", "END", "ESCAPE", "ESCAPED", "EVOLUTION",
                "EXCEPT", "EXCHANGE", "EXCLUDE", "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED",
                "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT",
                "FIRST", "FLOAT", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", "FORMATTED",
                "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANT",
                "GROUP", "GROUPING", "HAVING", "BINARY_HEX", "HOUR", "HOURS", "IDENTIFIER_KW",
                "IF", "IGNORE", "IMMEDIATE", "IMPORT", "IN", "INCLUDE", "INDEX", "INDEXES",
                "INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", "INTERVAL",
                "INT", "INTEGER", "INTO", "IS", "ITEMS", "JOIN", "KEYS", "LAST", "LATERAL",
                "LAZY", "LEADING", "LEFT", "LIKE", "ILIKE", "LIMIT", "LINES", "LIST",
                "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKS", "LOGICAL", "LONG", "MACRO",
                "MAP", "MATCHED", "MERGE", "MICROSECOND", "MICROSECONDS", "MILLISECOND",
                "MILLISECONDS", "MINUTE", "MINUTES", "MONTH", "MONTHS", "MSCK", "NAME",
                "NAMESPACE", "NAMESPACES", "NANOSECOND", "NANOSECONDS", "NATURAL", "NO",
                "NOT", "NULL", "NULLS", "NUMERIC", "OF", "OFFSET", "ON", "ONLY", "OPTION",
                "OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS",
                "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", "PERCENTILE_CONT",
                "PERCENTILE_DISC", "PERCENTLIT", "PIVOT", "PLACING", "POSITION", "PRECEDING",
                "PRIMARY", "PRINCIPALS", "PROPERTIES", "PURGE", "QUARTER", "QUERY", "RANGE",
                "REAL", "RECORDREADER", "RECORDWRITER", "RECOVER", "REDUCE", "REFERENCES",
                "REFRESH", "RENAME", "REPAIR", "REPEATABLE", "REPLACE", "RESET", "RESPECT",
                "RESTRICT", "REVOKE", "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK",
                "ROLLUP", "ROW", "ROWS", "SECOND", "SECONDS", "SCHEMA", "SCHEMAS", "SELECT",
                "SEMI", "SEPARATED", "SERDE", "SERDEPROPERTIES", "SESSION_USER", "SET",
                "SETMINUS", "SETS", "SHORT", "SHOW", "SINGLE", "SKEWED", "SMALLINT",
                "SOME", "SORT", "SORTED", "SOURCE", "START", "STATISTICS", "STORED",
                "STRATIFY", "STRING", "STRUCT", "SUBSTR", "SUBSTRING", "SYNC", "SYSTEM_TIME",
                "SYSTEM_VERSION", "TABLE", "TABLES", "TABLESAMPLE", "TARGET", "TBLPROPERTIES",
                "TEMPORARY", "TERMINATED", "THEN", "TIME", "TIMEDIFF", "TIMESTAMP", "TIMESTAMP_LTZ",
                "TIMESTAMP_NTZ", "TIMESTAMPADD", "TIMESTAMPDIFF", "TINYINT", "TO", "EXECUTE",
                "TOUCH", "TRAILING", "TRANSACTION", "TRANSACTIONS", "TRANSFORM", "TRIM",
                "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE",
                "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNPIVOT", "UNSET", "UPDATE",
                "USE", "USER", "USING", "VALUES", "VARCHAR", "VAR", "VARIABLE", "VARIANT",
                "VERSION", "VIEW", "VIEWS", "VOID", "WEEK", "WEEKS", "WHEN", "WHERE",
                "WINDOW", "WITH", "WITHIN", "YEAR", "YEARS", "ZONE", "AUTO", "MATCH",
                "MATCH_PHRASE", "TERM", "MULTI_MATCH", "EQ", "NSEQ", "NEQ", "NEQJ", "LT",
                "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT",
                "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", "COLON", "DOUBLE_COLON",
                "ARROW", "FAT_ARROW", "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL",
                "DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL",
                "INTEGER_VALUE", "SINGLE_DIGIT", "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL",
                "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER",
                "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED"
        };
    }

    private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;

    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    @Override
    public String getGrammarFileName() {
        return "SqlBaseParser.g4";
    }

    @Override
    public String[] getRuleNames() {
        return ruleNames;
    }

    @Override
    public String getSerializedATN() {
        return _serializedATN;
    }

    @Override
    public ATN getATN() {
        return _ATN;
    }


    /**
     * When false, INTERSECT is given the greater precedence over the other set
     * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
     */
    public boolean legacy_setops_precedence_enabled = false;

    /**
     * When false, a literal with an exponent would be converted into
     * double type rather than decimal type.
     */
    public boolean legacy_exponent_literal_as_decimal_enabled = false;

    /**
     * When true, the behavior of keywords follows ANSI SQL standard.
     */
    public boolean SQL_standard_keyword_behavior = false;

    /**
     * When true, double quoted literals are identifiers rather than STRINGs.
     */
    public boolean double_quoted_identifiers = false;

    public SqlBaseParser(TokenStream input) {
        super(input);
        _interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleStatementContext extends ParserRuleContext {
        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        public List<TerminalNode> SEMICOLON() {
            return getTokens(SqlBaseParser.SEMICOLON);
        }

        public TerminalNode SEMICOLON(int i) {
            return getToken(SqlBaseParser.SEMICOLON, i);
        }

        public SingleStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSingleStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SingleStatementContext singleStatement() throws RecognitionException {
        SingleStatementContext _localctx = new SingleStatementContext(_ctx, getState());
        enterRule(_localctx, 0, RULE_singleStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(396);
                statement();
                setState(400);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == SEMICOLON) {
                    {
                        {
                            setState(397);
                            match(SEMICOLON);
                        }
                    }
                    setState(402);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(403);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleExpressionContext extends ParserRuleContext {
        public NamedExpressionContext namedExpression() {
            return getRuleContext(NamedExpressionContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        public SingleExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SingleExpressionContext singleExpression() throws RecognitionException {
        SingleExpressionContext _localctx = new SingleExpressionContext(_ctx, getState());
        enterRule(_localctx, 2, RULE_singleExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(405);
                namedExpression();
                setState(406);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleTableIdentifierContext extends ParserRuleContext {
        public TableIdentifierContext tableIdentifier() {
            return getRuleContext(TableIdentifierContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        public SingleTableIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleTableIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleTableIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleTableIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleTableIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SingleTableIdentifierContext singleTableIdentifier() throws RecognitionException {
        SingleTableIdentifierContext _localctx = new SingleTableIdentifierContext(_ctx, getState());
        enterRule(_localctx, 4, RULE_singleTableIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(408);
                tableIdentifier();
                setState(409);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleMultipartIdentifierContext extends ParserRuleContext {
        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        public SingleMultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleMultipartIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleMultipartIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleMultipartIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleMultipartIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SingleMultipartIdentifierContext singleMultipartIdentifier() throws RecognitionException {
        SingleMultipartIdentifierContext _localctx = new SingleMultipartIdentifierContext(_ctx, getState());
        enterRule(_localctx, 6, RULE_singleMultipartIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(411);
                multipartIdentifier();
                setState(412);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleFunctionIdentifierContext extends ParserRuleContext {
        public FunctionIdentifierContext functionIdentifier() {
            return getRuleContext(FunctionIdentifierContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        public SingleFunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleFunctionIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleFunctionIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleFunctionIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleFunctionIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SingleFunctionIdentifierContext singleFunctionIdentifier() throws RecognitionException {
        SingleFunctionIdentifierContext _localctx = new SingleFunctionIdentifierContext(_ctx, getState());
        enterRule(_localctx, 8, RULE_singleFunctionIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(414);
                functionIdentifier();
                setState(415);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleDataTypeContext extends ParserRuleContext {
        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        public SingleDataTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleDataType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSingleDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSingleDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SingleDataTypeContext singleDataType() throws RecognitionException {
        SingleDataTypeContext _localctx = new SingleDataTypeContext(_ctx, getState());
        enterRule(_localctx, 10, RULE_singleDataType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(417);
                dataType();
                setState(418);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleTableSchemaContext extends ParserRuleContext {
        public ColTypeListContext colTypeList() {
            return getRuleContext(ColTypeListContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        public SingleTableSchemaContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleTableSchema;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleTableSchema(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleTableSchema(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleTableSchema(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SingleTableSchemaContext singleTableSchema() throws RecognitionException {
        SingleTableSchemaContext _localctx = new SingleTableSchemaContext(_ctx, getState());
        enterRule(_localctx, 12, RULE_singleTableSchema);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(420);
                colTypeList();
                setState(421);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StatementContext extends ParserRuleContext {
        public StatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_statement;
        }

        public StatementContext() {
        }

        public void copyFrom(StatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExplainContext extends StatementContext {
        public TerminalNode EXPLAIN() {
            return getToken(SqlBaseParser.EXPLAIN, 0);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public TerminalNode LOGICAL() {
            return getToken(SqlBaseParser.LOGICAL, 0);
        }

        public TerminalNode FORMATTED() {
            return getToken(SqlBaseParser.FORMATTED, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode CODEGEN() {
            return getToken(SqlBaseParser.CODEGEN, 0);
        }

        public TerminalNode COST() {
            return getToken(SqlBaseParser.COST, 0);
        }

        public ExplainContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExplain(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExplain(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExplain(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ResetConfigurationContext extends StatementContext {
        public TerminalNode RESET() {
            return getToken(SqlBaseParser.RESET, 0);
        }

        public ResetConfigurationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterResetConfiguration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitResetConfiguration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitResetConfiguration(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterViewQueryContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public AlterViewQueryContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAlterViewQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAlterViewQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAlterViewQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UseContext extends StatementContext {
        public TerminalNode USE() {
            return getToken(SqlBaseParser.USE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public UseContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUse(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUse(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUse(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropNamespaceContext extends StatementContext {
        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode RESTRICT() {
            return getToken(SqlBaseParser.RESTRICT, 0);
        }

        public TerminalNode CASCADE() {
            return getToken(SqlBaseParser.CASCADE, 0);
        }

        public DropNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateTempViewUsingContext extends StatementContext {
        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TableIdentifierContext tableIdentifier() {
            return getRuleContext(TableIdentifierContext.class, 0);
        }

        public TableProviderContext tableProvider() {
            return getRuleContext(TableProviderContext.class, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode GLOBAL() {
            return getToken(SqlBaseParser.GLOBAL, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ColTypeListContext colTypeList() {
            return getRuleContext(ColTypeListContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public CreateTempViewUsingContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateTempViewUsing(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateTempViewUsing(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTempViewUsing(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RenameTableContext extends StatementContext {
        public IdentifierReferenceContext from;
        public MultipartIdentifierContext to;

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public RenameTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRenameTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRenameTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRenameTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FailNativeCommandContext extends StatementContext {
        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode ROLE() {
            return getToken(SqlBaseParser.ROLE, 0);
        }

        public UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() {
            return getRuleContext(UnsupportedHiveNativeCommandsContext.class, 0);
        }

        public FailNativeCommandContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFailNativeCommand(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFailNativeCommand(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFailNativeCommand(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetCatalogContext extends StatementContext {
        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode CATALOG() {
            return getToken(SqlBaseParser.CATALOG, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public SetCatalogContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetCatalog(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetCatalog(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetCatalog(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ClearCacheContext extends StatementContext {
        public TerminalNode CLEAR() {
            return getToken(SqlBaseParser.CLEAR, 0);
        }

        public TerminalNode CACHE() {
            return getToken(SqlBaseParser.CACHE, 0);
        }

        public ClearCacheContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterClearCache(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitClearCache(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitClearCache(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropViewContext extends StatementContext {
        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public DropViewContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropView(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropView(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropView(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowTablesContext extends StatementContext {
        public StringLitContext pattern;

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode TABLES() {
            return getToken(SqlBaseParser.TABLES, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public ShowTablesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowTables(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowTables(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowTables(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RecoverPartitionsContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode RECOVER() {
            return getToken(SqlBaseParser.RECOVER, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public RecoverPartitionsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRecoverPartitions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRecoverPartitions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRecoverPartitions(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropIndexContext extends StatementContext {
        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public DropIndexContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropIndex(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropIndex(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropIndex(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowCatalogsContext extends StatementContext {
        public StringLitContext pattern;

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode CATALOGS() {
            return getToken(SqlBaseParser.CATALOGS, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public ShowCatalogsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowCatalogs(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowCatalogs(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowCatalogs(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetCollationContext extends StatementContext {
        public IdentifierContext collationName;

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode COLLATION() {
            return getToken(SqlBaseParser.COLLATION, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public SetCollationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetCollation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetCollation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetCollation(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowCurrentNamespaceContext extends StatementContext {
        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public ShowCurrentNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterShowCurrentNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitShowCurrentNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowCurrentNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RenameTablePartitionContext extends StatementContext {
        public PartitionSpecContext from;
        public PartitionSpecContext to;

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public List<PartitionSpecContext> partitionSpec() {
            return getRuleContexts(PartitionSpecContext.class);
        }

        public PartitionSpecContext partitionSpec(int i) {
            return getRuleContext(PartitionSpecContext.class, i);
        }

        public RenameTablePartitionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRenameTablePartition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRenameTablePartition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRenameTablePartition(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RepairTableContext extends StatementContext {
        public Token option;

        public TerminalNode REPAIR() {
            return getToken(SqlBaseParser.REPAIR, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode MSCK() {
            return getToken(SqlBaseParser.MSCK, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode SYNC() {
            return getToken(SqlBaseParser.SYNC, 0);
        }

        public RepairTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRepairTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRepairTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRepairTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RefreshResourceContext extends StatementContext {
        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public RefreshResourceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRefreshResource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRefreshResource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRefreshResource(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateVariableContext extends StatementContext {
        public TerminalNode DECLARE() {
            return getToken(SqlBaseParser.DECLARE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode VARIABLE() {
            return getToken(SqlBaseParser.VARIABLE, 0);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public VariableDefaultExpressionContext variableDefaultExpression() {
            return getRuleContext(VariableDefaultExpressionContext.class, 0);
        }

        public CreateVariableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateVariable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateVariable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateVariable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowCreateTableContext extends StatementContext {
        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public ShowCreateTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterShowCreateTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowCreateTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowCreateTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowNamespacesContext extends StatementContext {
        public StringLitContext pattern;

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public NamespacesContext namespaces() {
            return getRuleContext(NamespacesContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public ShowNamespacesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowNamespaces(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowNamespaces(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowNamespaces(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowColumnsContext extends StatementContext {
        public IdentifierReferenceContext table;
        public MultipartIdentifierContext ns;

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public List<TerminalNode> FROM() {
            return getTokens(SqlBaseParser.FROM);
        }

        public TerminalNode FROM(int i) {
            return getToken(SqlBaseParser.FROM, i);
        }

        public List<TerminalNode> IN() {
            return getTokens(SqlBaseParser.IN);
        }

        public TerminalNode IN(int i) {
            return getToken(SqlBaseParser.IN, i);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public ShowColumnsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReplaceTableContext extends StatementContext {
        public ReplaceTableHeaderContext replaceTableHeader() {
            return getRuleContext(ReplaceTableHeaderContext.class, 0);
        }

        public CreateTableClausesContext createTableClauses() {
            return getRuleContext(CreateTableClausesContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() {
            return getRuleContext(CreateOrReplaceTableColTypeListContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableProviderContext tableProvider() {
            return getRuleContext(TableProviderContext.class, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public ReplaceTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterReplaceTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitReplaceTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitReplaceTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AnalyzeTablesContext extends StatementContext {
        public TerminalNode ANALYZE() {
            return getToken(SqlBaseParser.ANALYZE, 0);
        }

        public TerminalNode TABLES() {
            return getToken(SqlBaseParser.TABLES, 0);
        }

        public TerminalNode COMPUTE() {
            return getToken(SqlBaseParser.COMPUTE, 0);
        }

        public TerminalNode STATISTICS() {
            return getToken(SqlBaseParser.STATISTICS, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public AnalyzeTablesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAnalyzeTables(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAnalyzeTables(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAnalyzeTables(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AddTablePartitionContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public List<PartitionSpecLocationContext> partitionSpecLocation() {
            return getRuleContexts(PartitionSpecLocationContext.class);
        }

        public PartitionSpecLocationContext partitionSpecLocation(int i) {
            return getRuleContext(PartitionSpecLocationContext.class, i);
        }

        public AddTablePartitionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAddTablePartition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitAddTablePartition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAddTablePartition(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetNamespaceLocationContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public LocationSpecContext locationSpec() {
            return getRuleContext(LocationSpecContext.class, 0);
        }

        public SetNamespaceLocationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetNamespaceLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetNamespaceLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetNamespaceLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RefreshTableContext extends StatementContext {
        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public RefreshTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRefreshTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRefreshTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRefreshTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetNamespacePropertiesContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public TerminalNode DBPROPERTIES() {
            return getToken(SqlBaseParser.DBPROPERTIES, 0);
        }

        public TerminalNode PROPERTIES() {
            return getToken(SqlBaseParser.PROPERTIES, 0);
        }

        public SetNamespacePropertiesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetNamespaceProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetNamespaceProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetNamespaceProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ManageResourceContext extends StatementContext {
        public Token op;

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode LIST() {
            return getToken(SqlBaseParser.LIST, 0);
        }

        public ManageResourceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterManageResource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitManageResource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitManageResource(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetQuotedConfigurationContext extends StatementContext {
        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public ConfigKeyContext configKey() {
            return getRuleContext(ConfigKeyContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public ConfigValueContext configValue() {
            return getRuleContext(ConfigValueContext.class, 0);
        }

        public SetQuotedConfigurationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetQuotedConfiguration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetQuotedConfiguration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetQuotedConfiguration(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AnalyzeContext extends StatementContext {
        public TerminalNode ANALYZE() {
            return getToken(SqlBaseParser.ANALYZE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode COMPUTE() {
            return getToken(SqlBaseParser.COMPUTE, 0);
        }

        public TerminalNode STATISTICS() {
            return getToken(SqlBaseParser.STATISTICS, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public IdentifierSeqContext identifierSeq() {
            return getRuleContext(IdentifierSeqContext.class, 0);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        public AnalyzeContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAnalyze(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAnalyze(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAnalyze(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateFunctionContext extends StatementContext {
        public StringLitContext className;

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public List<ResourceContext> resource() {
            return getRuleContexts(ResourceContext.class);
        }

        public ResourceContext resource(int i) {
            return getRuleContext(ResourceContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public CreateFunctionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HiveReplaceColumnsContext extends StatementContext {
        public IdentifierReferenceContext table;
        public QualifiedColTypeWithPositionListContext columns;

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
            return getRuleContext(QualifiedColTypeWithPositionListContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public HiveReplaceColumnsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterHiveReplaceColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitHiveReplaceColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHiveReplaceColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CommentNamespaceContext extends StatementContext {
        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IS() {
            return getToken(SqlBaseParser.IS, 0);
        }

        public CommentContext comment() {
            return getRuleContext(CommentContext.class, 0);
        }

        public CommentNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCommentNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCommentNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCommentNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ResetQuotedConfigurationContext extends StatementContext {
        public TerminalNode RESET() {
            return getToken(SqlBaseParser.RESET, 0);
        }

        public ConfigKeyContext configKey() {
            return getRuleContext(ConfigKeyContext.class, 0);
        }

        public ResetQuotedConfigurationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterResetQuotedConfiguration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitResetQuotedConfiguration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitResetQuotedConfiguration(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateTableContext extends StatementContext {
        public CreateTableHeaderContext createTableHeader() {
            return getRuleContext(CreateTableHeaderContext.class, 0);
        }

        public CreateTableClausesContext createTableClauses() {
            return getRuleContext(CreateTableClausesContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() {
            return getRuleContext(CreateOrReplaceTableColTypeListContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableProviderContext tableProvider() {
            return getRuleContext(TableProviderContext.class, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public CreateTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DmlStatementContext extends StatementContext {
        public DmlStatementNoWithContext dmlStatementNoWith() {
            return getRuleContext(DmlStatementNoWithContext.class, 0);
        }

        public CtesContext ctes() {
            return getRuleContext(CtesContext.class, 0);
        }

        public DmlStatementContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDmlStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDmlStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDmlStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateTableLikeContext extends StatementContext {
        public TableIdentifierContext target;
        public TableIdentifierContext source;
        public PropertyListContext tableProps;

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public List<TableIdentifierContext> tableIdentifier() {
            return getRuleContexts(TableIdentifierContext.class);
        }

        public TableIdentifierContext tableIdentifier(int i) {
            return getRuleContext(TableIdentifierContext.class, i);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public List<TableProviderContext> tableProvider() {
            return getRuleContexts(TableProviderContext.class);
        }

        public TableProviderContext tableProvider(int i) {
            return getRuleContext(TableProviderContext.class, i);
        }

        public List<RowFormatContext> rowFormat() {
            return getRuleContexts(RowFormatContext.class);
        }

        public RowFormatContext rowFormat(int i) {
            return getRuleContext(RowFormatContext.class, i);
        }

        public List<CreateFileFormatContext> createFileFormat() {
            return getRuleContexts(CreateFileFormatContext.class);
        }

        public CreateFileFormatContext createFileFormat(int i) {
            return getRuleContext(CreateFileFormatContext.class, i);
        }

        public List<LocationSpecContext> locationSpec() {
            return getRuleContexts(LocationSpecContext.class);
        }

        public LocationSpecContext locationSpec(int i) {
            return getRuleContext(LocationSpecContext.class, i);
        }

        public List<TerminalNode> TBLPROPERTIES() {
            return getTokens(SqlBaseParser.TBLPROPERTIES);
        }

        public TerminalNode TBLPROPERTIES(int i) {
            return getToken(SqlBaseParser.TBLPROPERTIES, i);
        }

        public List<PropertyListContext> propertyList() {
            return getRuleContexts(PropertyListContext.class);
        }

        public PropertyListContext propertyList(int i) {
            return getRuleContext(PropertyListContext.class, i);
        }

        public CreateTableLikeContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateTableLike(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateTableLike(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTableLike(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UncacheTableContext extends StatementContext {
        public TerminalNode UNCACHE() {
            return getToken(SqlBaseParser.UNCACHE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public UncacheTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUncacheTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUncacheTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUncacheTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropFunctionContext extends StatementContext {
        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public DropFunctionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DescribeRelationContext extends StatementContext {
        public Token option;

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public DescribeColNameContext describeColName() {
            return getRuleContext(DescribeColNameContext.class, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode FORMATTED() {
            return getToken(SqlBaseParser.FORMATTED, 0);
        }

        public DescribeRelationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeRelation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDescribeRelation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeRelation(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LoadDataContext extends StatementContext {
        public StringLitContext path;

        public TerminalNode LOAD() {
            return getToken(SqlBaseParser.LOAD, 0);
        }

        public TerminalNode DATA() {
            return getToken(SqlBaseParser.DATA, 0);
        }

        public TerminalNode INPATH() {
            return getToken(SqlBaseParser.INPATH, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public LoadDataContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLoadData(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLoadData(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLoadData(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowPartitionsContext extends StatementContext {
        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public ShowPartitionsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowPartitions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowPartitions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowPartitions(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DescribeFunctionContext extends StatementContext {
        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public DescribeFuncNameContext describeFuncName() {
            return getRuleContext(DescribeFuncNameContext.class, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public DescribeFunctionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDescribeFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RenameTableColumnContext extends StatementContext {
        public IdentifierReferenceContext table;
        public MultipartIdentifierContext from;
        public ErrorCapturingIdentifierContext to;

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public RenameTableColumnContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRenameTableColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRenameTableColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRenameTableColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StatementDefaultContext extends StatementContext {
        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public StatementDefaultContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterStatementDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitStatementDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStatementDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HiveChangeColumnContext extends StatementContext {
        public IdentifierReferenceContext table;
        public MultipartIdentifierContext colName;

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode CHANGE() {
            return getToken(SqlBaseParser.CHANGE, 0);
        }

        public ColTypeContext colType() {
            return getRuleContext(ColTypeContext.class, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public ColPositionContext colPosition() {
            return getRuleContext(ColPositionContext.class, 0);
        }

        public HiveChangeColumnContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterHiveChangeColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitHiveChangeColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHiveChangeColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetTimeZoneContext extends StatementContext {
        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode TIME() {
            return getToken(SqlBaseParser.TIME, 0);
        }

        public TerminalNode ZONE() {
            return getToken(SqlBaseParser.ZONE, 0);
        }

        public IntervalContext interval() {
            return getRuleContext(IntervalContext.class, 0);
        }

        public TimezoneContext timezone() {
            return getRuleContext(TimezoneContext.class, 0);
        }

        public SetTimeZoneContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetTimeZone(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetTimeZone(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetTimeZone(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DescribeQueryContext extends StatementContext {
        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode QUERY() {
            return getToken(SqlBaseParser.QUERY, 0);
        }

        public DescribeQueryContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDescribeQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDescribeQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TruncateTableContext extends StatementContext {
        public TerminalNode TRUNCATE() {
            return getToken(SqlBaseParser.TRUNCATE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TruncateTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTruncateTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTruncateTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTruncateTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetTableSerDeContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public SetTableSerDeContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetTableSerDe(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetTableSerDe(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetTableSerDe(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateViewContext extends StatementContext {
        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public IdentifierCommentListContext identifierCommentList() {
            return getRuleContext(IdentifierCommentListContext.class, 0);
        }

        public List<CommentSpecContext> commentSpec() {
            return getRuleContexts(CommentSpecContext.class);
        }

        public CommentSpecContext commentSpec(int i) {
            return getRuleContext(CommentSpecContext.class, i);
        }

        public List<TerminalNode> PARTITIONED() {
            return getTokens(SqlBaseParser.PARTITIONED);
        }

        public TerminalNode PARTITIONED(int i) {
            return getToken(SqlBaseParser.PARTITIONED, i);
        }

        public List<TerminalNode> ON() {
            return getTokens(SqlBaseParser.ON);
        }

        public TerminalNode ON(int i) {
            return getToken(SqlBaseParser.ON, i);
        }

        public List<IdentifierListContext> identifierList() {
            return getRuleContexts(IdentifierListContext.class);
        }

        public IdentifierListContext identifierList(int i) {
            return getRuleContext(IdentifierListContext.class, i);
        }

        public List<TerminalNode> TBLPROPERTIES() {
            return getTokens(SqlBaseParser.TBLPROPERTIES);
        }

        public TerminalNode TBLPROPERTIES(int i) {
            return getToken(SqlBaseParser.TBLPROPERTIES, i);
        }

        public List<PropertyListContext> propertyList() {
            return getRuleContexts(PropertyListContext.class);
        }

        public PropertyListContext propertyList(int i) {
            return getRuleContext(PropertyListContext.class, i);
        }

        public TerminalNode GLOBAL() {
            return getToken(SqlBaseParser.GLOBAL, 0);
        }

        public CreateViewContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateView(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateView(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateView(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropTablePartitionsContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public List<PartitionSpecContext> partitionSpec() {
            return getRuleContexts(PartitionSpecContext.class);
        }

        public PartitionSpecContext partitionSpec(int i) {
            return getRuleContext(PartitionSpecContext.class, i);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode PURGE() {
            return getToken(SqlBaseParser.PURGE, 0);
        }

        public DropTablePartitionsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDropTablePartitions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDropTablePartitions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropTablePartitions(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetConfigurationContext extends StatementContext {
        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public ConfigKeyContext configKey() {
            return getRuleContext(ConfigKeyContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public SetConfigurationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetConfiguration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetConfiguration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetConfiguration(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropTableContext extends StatementContext {
        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode PURGE() {
            return getToken(SqlBaseParser.PURGE, 0);
        }

        public DropTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowTableExtendedContext extends StatementContext {
        public IdentifierReferenceContext ns;
        public StringLitContext pattern;

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public ShowTableExtendedContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterShowTableExtended(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitShowTableExtended(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowTableExtended(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DescribeNamespaceContext extends StatementContext {
        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public DescribeNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDescribeNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterTableAlterColumnContext extends StatementContext {
        public IdentifierReferenceContext table;
        public MultipartIdentifierContext column;

        public List<TerminalNode> ALTER() {
            return getTokens(SqlBaseParser.ALTER);
        }

        public TerminalNode ALTER(int i) {
            return getToken(SqlBaseParser.ALTER, i);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode CHANGE() {
            return getToken(SqlBaseParser.CHANGE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public AlterColumnActionContext alterColumnAction() {
            return getRuleContext(AlterColumnActionContext.class, 0);
        }

        public AlterTableAlterColumnContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAlterTableAlterColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitAlterTableAlterColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAlterTableAlterColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RefreshFunctionContext extends StatementContext {
        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public RefreshFunctionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRefreshFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRefreshFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRefreshFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CommentTableContext extends StatementContext {
        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IS() {
            return getToken(SqlBaseParser.IS, 0);
        }

        public CommentContext comment() {
            return getRuleContext(CommentContext.class, 0);
        }

        public CommentTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCommentTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCommentTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCommentTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetVariableContext extends StatementContext {
        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public AssignmentListContext assignmentList() {
            return getRuleContext(AssignmentListContext.class, 0);
        }

        public TerminalNode VARIABLE() {
            return getToken(SqlBaseParser.VARIABLE, 0);
        }

        public TerminalNode VAR() {
            return getToken(SqlBaseParser.VAR, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public MultipartIdentifierListContext multipartIdentifierList() {
            return getRuleContext(MultipartIdentifierListContext.class, 0);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public SetVariableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetVariable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetVariable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetVariable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateIndexContext extends StatementContext {
        public IdentifierContext indexType;
        public MultipartIdentifierPropertyListContext columns;
        public PropertyListContext options;

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() {
            return getRuleContext(MultipartIdentifierPropertyListContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public CreateIndexContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateIndex(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateIndex(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateIndex(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UseNamespaceContext extends StatementContext {
        public TerminalNode USE() {
            return getToken(SqlBaseParser.USE, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public UseNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUseNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUseNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUseNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropVariableContext extends StatementContext {
        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode VARIABLE() {
            return getToken(SqlBaseParser.VARIABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public DropVariableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropVariable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropVariable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropVariable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateNamespaceContext extends StatementContext {
        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public List<CommentSpecContext> commentSpec() {
            return getRuleContexts(CommentSpecContext.class);
        }

        public CommentSpecContext commentSpec(int i) {
            return getRuleContext(CommentSpecContext.class, i);
        }

        public List<LocationSpecContext> locationSpec() {
            return getRuleContexts(LocationSpecContext.class);
        }

        public LocationSpecContext locationSpec(int i) {
            return getRuleContext(LocationSpecContext.class, i);
        }

        public List<TerminalNode> WITH() {
            return getTokens(SqlBaseParser.WITH);
        }

        public TerminalNode WITH(int i) {
            return getToken(SqlBaseParser.WITH, i);
        }

        public List<PropertyListContext> propertyList() {
            return getRuleContexts(PropertyListContext.class);
        }

        public PropertyListContext propertyList(int i) {
            return getRuleContext(PropertyListContext.class, i);
        }

        public List<TerminalNode> DBPROPERTIES() {
            return getTokens(SqlBaseParser.DBPROPERTIES);
        }

        public TerminalNode DBPROPERTIES(int i) {
            return getToken(SqlBaseParser.DBPROPERTIES, i);
        }

        public List<TerminalNode> PROPERTIES() {
            return getTokens(SqlBaseParser.PROPERTIES);
        }

        public TerminalNode PROPERTIES(int i) {
            return getToken(SqlBaseParser.PROPERTIES, i);
        }

        public CreateNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowTblPropertiesContext extends StatementContext {
        public IdentifierReferenceContext table;
        public PropertyKeyContext key;

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public PropertyKeyContext propertyKey() {
            return getRuleContext(PropertyKeyContext.class, 0);
        }

        public ShowTblPropertiesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterShowTblProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitShowTblProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowTblProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class VisitExecuteImmediateContext extends StatementContext {
        public ExecuteImmediateContext executeImmediate() {
            return getRuleContext(ExecuteImmediateContext.class, 0);
        }

        public VisitExecuteImmediateContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterVisitExecuteImmediate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitVisitExecuteImmediate(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitVisitExecuteImmediate(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnsetTablePropertiesContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode UNSET() {
            return getToken(SqlBaseParser.UNSET, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public UnsetTablePropertiesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnsetTableProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnsetTableProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnsetTableProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetTableLocationContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public LocationSpecContext locationSpec() {
            return getRuleContext(LocationSpecContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public SetTableLocationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetTableLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetTableLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetTableLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropTableColumnsContext extends StatementContext {
        public MultipartIdentifierListContext columns;

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public MultipartIdentifierListContext multipartIdentifierList() {
            return getRuleContext(MultipartIdentifierListContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public DropTableColumnsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDropTableColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDropTableColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropTableColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowViewsContext extends StatementContext {
        public StringLitContext pattern;

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode VIEWS() {
            return getToken(SqlBaseParser.VIEWS, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public ShowViewsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowViews(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowViews(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowViews(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowFunctionsContext extends StatementContext {
        public IdentifierReferenceContext ns;
        public MultipartIdentifierContext legacy;
        public StringLitContext pattern;

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode FUNCTIONS() {
            return getToken(SqlBaseParser.FUNCTIONS, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public ShowFunctionsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowFunctions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowFunctions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowFunctions(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CacheTableContext extends StatementContext {
        public PropertyListContext options;

        public TerminalNode CACHE() {
            return getToken(SqlBaseParser.CACHE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode LAZY() {
            return getToken(SqlBaseParser.LAZY, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public CacheTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCacheTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCacheTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCacheTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AddTableColumnsContext extends StatementContext {
        public QualifiedColTypeWithPositionListContext columns;

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
            return getRuleContext(QualifiedColTypeWithPositionListContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public AddTableColumnsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAddTableColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAddTableColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAddTableColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetTablePropertiesContext extends StatementContext {
        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public SetTablePropertiesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetTableProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetTableProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetTableProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StatementContext statement() throws RecognitionException {
        StatementContext _localctx = new StatementContext(_ctx, getState());
        enterRule(_localctx, 14, RULE_statement);
        int _la;
        try {
            int _alt;
            setState(1266);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 126, _ctx)) {
                case 1:
                    _localctx = new StatementDefaultContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(423);
                    query();
                }
                break;
                case 2:
                    _localctx = new VisitExecuteImmediateContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(424);
                    executeImmediate();
                }
                break;
                case 3:
                    _localctx = new DmlStatementContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(426);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == WITH) {
                        {
                            setState(425);
                            ctes();
                        }
                    }

                    setState(428);
                    dmlStatementNoWith();
                }
                break;
                case 4:
                    _localctx = new UseContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(429);
                    match(USE);
                    setState(430);
                    identifierReference();
                }
                break;
                case 5:
                    _localctx = new UseNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(431);
                    match(USE);
                    setState(432);
                    namespace();
                    setState(433);
                    identifierReference();
                }
                break;
                case 6:
                    _localctx = new SetCatalogContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                {
                    setState(435);
                    match(SET);
                    setState(436);
                    match(CATALOG);
                    setState(439);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 2, _ctx)) {
                        case 1: {
                            setState(437);
                            errorCapturingIdentifier();
                        }
                        break;
                        case 2: {
                            setState(438);
                            stringLit();
                        }
                        break;
                    }
                }
                break;
                case 7:
                    _localctx = new CreateNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 7);
                {
                    setState(441);
                    match(CREATE);
                    setState(442);
                    namespace();
                    setState(446);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 3, _ctx)) {
                        case 1: {
                            setState(443);
                            match(IF);
                            setState(444);
                            match(NOT);
                            setState(445);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(448);
                    identifierReference();
                    setState(456);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMENT || _la == LOCATION || _la == WITH) {
                        {
                            setState(454);
                            _errHandler.sync(this);
                            switch (_input.LA(1)) {
                                case COMMENT: {
                                    setState(449);
                                    commentSpec();
                                }
                                break;
                                case LOCATION: {
                                    setState(450);
                                    locationSpec();
                                }
                                break;
                                case WITH: {
                                    {
                                        setState(451);
                                        match(WITH);
                                        setState(452);
                                        _la = _input.LA(1);
                                        if (!(_la == DBPROPERTIES || _la == PROPERTIES)) {
                                            _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(453);
                                        propertyList();
                                    }
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        setState(458);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                case 8:
                    _localctx = new SetNamespacePropertiesContext(_localctx);
                    enterOuterAlt(_localctx, 8);
                {
                    setState(459);
                    match(ALTER);
                    setState(460);
                    namespace();
                    setState(461);
                    identifierReference();
                    setState(462);
                    match(SET);
                    setState(463);
                    _la = _input.LA(1);
                    if (!(_la == DBPROPERTIES || _la == PROPERTIES)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(464);
                    propertyList();
                }
                break;
                case 9:
                    _localctx = new SetNamespaceLocationContext(_localctx);
                    enterOuterAlt(_localctx, 9);
                {
                    setState(466);
                    match(ALTER);
                    setState(467);
                    namespace();
                    setState(468);
                    identifierReference();
                    setState(469);
                    match(SET);
                    setState(470);
                    locationSpec();
                }
                break;
                case 10:
                    _localctx = new DropNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 10);
                {
                    setState(472);
                    match(DROP);
                    setState(473);
                    namespace();
                    setState(476);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 6, _ctx)) {
                        case 1: {
                            setState(474);
                            match(IF);
                            setState(475);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(478);
                    identifierReference();
                    setState(480);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == CASCADE || _la == RESTRICT) {
                        {
                            setState(479);
                            _la = _input.LA(1);
                            if (!(_la == CASCADE || _la == RESTRICT)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                    }

                }
                break;
                case 11:
                    _localctx = new ShowNamespacesContext(_localctx);
                    enterOuterAlt(_localctx, 11);
                {
                    setState(482);
                    match(SHOW);
                    setState(483);
                    namespaces();
                    setState(486);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 8, _ctx)) {
                        case 1: {
                            setState(484);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(485);
                            multipartIdentifier();
                        }
                        break;
                    }
                    setState(492);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 10, _ctx)) {
                        case 1: {
                            setState(489);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 9, _ctx)) {
                                case 1: {
                                    setState(488);
                                    match(LIKE);
                                }
                                break;
                            }
                            setState(491);
                            ((ShowNamespacesContext) _localctx).pattern = stringLit();
                        }
                        break;
                    }
                }
                break;
                case 12:
                    _localctx = new CreateTableContext(_localctx);
                    enterOuterAlt(_localctx, 12);
                {
                    setState(494);
                    createTableHeader();
                    setState(499);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 11, _ctx)) {
                        case 1: {
                            setState(495);
                            match(LEFT_PAREN);
                            setState(496);
                            createOrReplaceTableColTypeList();
                            setState(497);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                    setState(502);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == USING) {
                        {
                            setState(501);
                            tableProvider();
                        }
                    }

                    setState(504);
                    createTableClauses();
                    setState(509);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN || _la == AS || _la == FROM || _la == MAP || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & 4503599635759105L) != 0) || _la == VALUES || _la == WITH) {
                        {
                            setState(506);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == AS) {
                                {
                                    setState(505);
                                    match(AS);
                                }
                            }

                            setState(508);
                            query();
                        }
                    }

                }
                break;
                case 13:
                    _localctx = new CreateTableLikeContext(_localctx);
                    enterOuterAlt(_localctx, 13);
                {
                    setState(511);
                    match(CREATE);
                    setState(512);
                    match(TABLE);
                    setState(516);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 15, _ctx)) {
                        case 1: {
                            setState(513);
                            match(IF);
                            setState(514);
                            match(NOT);
                            setState(515);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(518);
                    ((CreateTableLikeContext) _localctx).target = tableIdentifier();
                    setState(519);
                    match(LIKE);
                    setState(520);
                    ((CreateTableLikeContext) _localctx).source = tableIdentifier();
                    setState(529);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == LOCATION || ((((_la - 253)) & ~0x3f) == 0 && ((1L << (_la - 253)) & 549822922753L) != 0) || _la == USING) {
                        {
                            setState(527);
                            _errHandler.sync(this);
                            switch (_input.LA(1)) {
                                case USING: {
                                    setState(521);
                                    tableProvider();
                                }
                                break;
                                case ROW: {
                                    setState(522);
                                    rowFormat();
                                }
                                break;
                                case STORED: {
                                    setState(523);
                                    createFileFormat();
                                }
                                break;
                                case LOCATION: {
                                    setState(524);
                                    locationSpec();
                                }
                                break;
                                case TBLPROPERTIES: {
                                    {
                                        setState(525);
                                        match(TBLPROPERTIES);
                                        setState(526);
                                        ((CreateTableLikeContext) _localctx).tableProps = propertyList();
                                    }
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        setState(531);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                case 14:
                    _localctx = new ReplaceTableContext(_localctx);
                    enterOuterAlt(_localctx, 14);
                {
                    setState(532);
                    replaceTableHeader();
                    setState(537);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 18, _ctx)) {
                        case 1: {
                            setState(533);
                            match(LEFT_PAREN);
                            setState(534);
                            createOrReplaceTableColTypeList();
                            setState(535);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                    setState(540);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == USING) {
                        {
                            setState(539);
                            tableProvider();
                        }
                    }

                    setState(542);
                    createTableClauses();
                    setState(547);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN || _la == AS || _la == FROM || _la == MAP || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & 4503599635759105L) != 0) || _la == VALUES || _la == WITH) {
                        {
                            setState(544);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == AS) {
                                {
                                    setState(543);
                                    match(AS);
                                }
                            }

                            setState(546);
                            query();
                        }
                    }

                }
                break;
                case 15:
                    _localctx = new AnalyzeContext(_localctx);
                    enterOuterAlt(_localctx, 15);
                {
                    setState(549);
                    match(ANALYZE);
                    setState(550);
                    match(TABLE);
                    setState(551);
                    identifierReference();
                    setState(553);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(552);
                            partitionSpec();
                        }
                    }

                    setState(555);
                    match(COMPUTE);
                    setState(556);
                    match(STATISTICS);
                    setState(564);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 23, _ctx)) {
                        case 1: {
                            setState(557);
                            identifier();
                        }
                        break;
                        case 2: {
                            setState(558);
                            match(FOR);
                            setState(559);
                            match(COLUMNS);
                            setState(560);
                            identifierSeq();
                        }
                        break;
                        case 3: {
                            setState(561);
                            match(FOR);
                            setState(562);
                            match(ALL);
                            setState(563);
                            match(COLUMNS);
                        }
                        break;
                    }
                }
                break;
                case 16:
                    _localctx = new AnalyzeTablesContext(_localctx);
                    enterOuterAlt(_localctx, 16);
                {
                    setState(566);
                    match(ANALYZE);
                    setState(567);
                    match(TABLES);
                    setState(570);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(568);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(569);
                            identifierReference();
                        }
                    }

                    setState(572);
                    match(COMPUTE);
                    setState(573);
                    match(STATISTICS);
                    setState(575);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 25, _ctx)) {
                        case 1: {
                            setState(574);
                            identifier();
                        }
                        break;
                    }
                }
                break;
                case 17:
                    _localctx = new AddTableColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 17);
                {
                    setState(577);
                    match(ALTER);
                    setState(578);
                    match(TABLE);
                    setState(579);
                    identifierReference();
                    setState(580);
                    match(ADD);
                    setState(581);
                    _la = _input.LA(1);
                    if (!(_la == COLUMN || _la == COLUMNS)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(582);
                    ((AddTableColumnsContext) _localctx).columns = qualifiedColTypeWithPositionList();
                }
                break;
                case 18:
                    _localctx = new AddTableColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 18);
                {
                    setState(584);
                    match(ALTER);
                    setState(585);
                    match(TABLE);
                    setState(586);
                    identifierReference();
                    setState(587);
                    match(ADD);
                    setState(588);
                    _la = _input.LA(1);
                    if (!(_la == COLUMN || _la == COLUMNS)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(589);
                    match(LEFT_PAREN);
                    setState(590);
                    ((AddTableColumnsContext) _localctx).columns = qualifiedColTypeWithPositionList();
                    setState(591);
                    match(RIGHT_PAREN);
                }
                break;
                case 19:
                    _localctx = new RenameTableColumnContext(_localctx);
                    enterOuterAlt(_localctx, 19);
                {
                    setState(593);
                    match(ALTER);
                    setState(594);
                    match(TABLE);
                    setState(595);
                    ((RenameTableColumnContext) _localctx).table = identifierReference();
                    setState(596);
                    match(RENAME);
                    setState(597);
                    match(COLUMN);
                    setState(598);
                    ((RenameTableColumnContext) _localctx).from = multipartIdentifier();
                    setState(599);
                    match(TO);
                    setState(600);
                    ((RenameTableColumnContext) _localctx).to = errorCapturingIdentifier();
                }
                break;
                case 20:
                    _localctx = new DropTableColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 20);
                {
                    setState(602);
                    match(ALTER);
                    setState(603);
                    match(TABLE);
                    setState(604);
                    identifierReference();
                    setState(605);
                    match(DROP);
                    setState(606);
                    _la = _input.LA(1);
                    if (!(_la == COLUMN || _la == COLUMNS)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(609);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(607);
                            match(IF);
                            setState(608);
                            match(EXISTS);
                        }
                    }

                    setState(611);
                    match(LEFT_PAREN);
                    setState(612);
                    ((DropTableColumnsContext) _localctx).columns = multipartIdentifierList();
                    setState(613);
                    match(RIGHT_PAREN);
                }
                break;
                case 21:
                    _localctx = new DropTableColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 21);
                {
                    setState(615);
                    match(ALTER);
                    setState(616);
                    match(TABLE);
                    setState(617);
                    identifierReference();
                    setState(618);
                    match(DROP);
                    setState(619);
                    _la = _input.LA(1);
                    if (!(_la == COLUMN || _la == COLUMNS)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(622);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 27, _ctx)) {
                        case 1: {
                            setState(620);
                            match(IF);
                            setState(621);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(624);
                    ((DropTableColumnsContext) _localctx).columns = multipartIdentifierList();
                }
                break;
                case 22:
                    _localctx = new RenameTableContext(_localctx);
                    enterOuterAlt(_localctx, 22);
                {
                    setState(626);
                    match(ALTER);
                    setState(627);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(628);
                    ((RenameTableContext) _localctx).from = identifierReference();
                    setState(629);
                    match(RENAME);
                    setState(630);
                    match(TO);
                    setState(631);
                    ((RenameTableContext) _localctx).to = multipartIdentifier();
                }
                break;
                case 23:
                    _localctx = new SetTablePropertiesContext(_localctx);
                    enterOuterAlt(_localctx, 23);
                {
                    setState(633);
                    match(ALTER);
                    setState(634);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(635);
                    identifierReference();
                    setState(636);
                    match(SET);
                    setState(637);
                    match(TBLPROPERTIES);
                    setState(638);
                    propertyList();
                }
                break;
                case 24:
                    _localctx = new UnsetTablePropertiesContext(_localctx);
                    enterOuterAlt(_localctx, 24);
                {
                    setState(640);
                    match(ALTER);
                    setState(641);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(642);
                    identifierReference();
                    setState(643);
                    match(UNSET);
                    setState(644);
                    match(TBLPROPERTIES);
                    setState(647);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(645);
                            match(IF);
                            setState(646);
                            match(EXISTS);
                        }
                    }

                    setState(649);
                    propertyList();
                }
                break;
                case 25:
                    _localctx = new AlterTableAlterColumnContext(_localctx);
                    enterOuterAlt(_localctx, 25);
                {
                    setState(651);
                    match(ALTER);
                    setState(652);
                    match(TABLE);
                    setState(653);
                    ((AlterTableAlterColumnContext) _localctx).table = identifierReference();
                    setState(654);
                    _la = _input.LA(1);
                    if (!(_la == ALTER || _la == CHANGE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(656);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 29, _ctx)) {
                        case 1: {
                            setState(655);
                            match(COLUMN);
                        }
                        break;
                    }
                    setState(658);
                    ((AlterTableAlterColumnContext) _localctx).column = multipartIdentifier();
                    setState(660);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == AFTER || _la == COMMENT || _la == DROP || _la == FIRST || _la == SET || _la == TYPE) {
                        {
                            setState(659);
                            alterColumnAction();
                        }
                    }

                }
                break;
                case 26:
                    _localctx = new HiveChangeColumnContext(_localctx);
                    enterOuterAlt(_localctx, 26);
                {
                    setState(662);
                    match(ALTER);
                    setState(663);
                    match(TABLE);
                    setState(664);
                    ((HiveChangeColumnContext) _localctx).table = identifierReference();
                    setState(666);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(665);
                            partitionSpec();
                        }
                    }

                    setState(668);
                    match(CHANGE);
                    setState(670);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 32, _ctx)) {
                        case 1: {
                            setState(669);
                            match(COLUMN);
                        }
                        break;
                    }
                    setState(672);
                    ((HiveChangeColumnContext) _localctx).colName = multipartIdentifier();
                    setState(673);
                    colType();
                    setState(675);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == AFTER || _la == FIRST) {
                        {
                            setState(674);
                            colPosition();
                        }
                    }

                }
                break;
                case 27:
                    _localctx = new HiveReplaceColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 27);
                {
                    setState(677);
                    match(ALTER);
                    setState(678);
                    match(TABLE);
                    setState(679);
                    ((HiveReplaceColumnsContext) _localctx).table = identifierReference();
                    setState(681);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(680);
                            partitionSpec();
                        }
                    }

                    setState(683);
                    match(REPLACE);
                    setState(684);
                    match(COLUMNS);
                    setState(685);
                    match(LEFT_PAREN);
                    setState(686);
                    ((HiveReplaceColumnsContext) _localctx).columns = qualifiedColTypeWithPositionList();
                    setState(687);
                    match(RIGHT_PAREN);
                }
                break;
                case 28:
                    _localctx = new SetTableSerDeContext(_localctx);
                    enterOuterAlt(_localctx, 28);
                {
                    setState(689);
                    match(ALTER);
                    setState(690);
                    match(TABLE);
                    setState(691);
                    identifierReference();
                    setState(693);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(692);
                            partitionSpec();
                        }
                    }

                    setState(695);
                    match(SET);
                    setState(696);
                    match(SERDE);
                    setState(697);
                    stringLit();
                    setState(701);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == WITH) {
                        {
                            setState(698);
                            match(WITH);
                            setState(699);
                            match(SERDEPROPERTIES);
                            setState(700);
                            propertyList();
                        }
                    }

                }
                break;
                case 29:
                    _localctx = new SetTableSerDeContext(_localctx);
                    enterOuterAlt(_localctx, 29);
                {
                    setState(703);
                    match(ALTER);
                    setState(704);
                    match(TABLE);
                    setState(705);
                    identifierReference();
                    setState(707);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(706);
                            partitionSpec();
                        }
                    }

                    setState(709);
                    match(SET);
                    setState(710);
                    match(SERDEPROPERTIES);
                    setState(711);
                    propertyList();
                }
                break;
                case 30:
                    _localctx = new AddTablePartitionContext(_localctx);
                    enterOuterAlt(_localctx, 30);
                {
                    setState(713);
                    match(ALTER);
                    setState(714);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(715);
                    identifierReference();
                    setState(716);
                    match(ADD);
                    setState(720);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(717);
                            match(IF);
                            setState(718);
                            match(NOT);
                            setState(719);
                            match(EXISTS);
                        }
                    }

                    setState(723);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    do {
                        {
                            {
                                setState(722);
                                partitionSpecLocation();
                            }
                        }
                        setState(725);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    } while (_la == PARTITION);
                }
                break;
                case 31:
                    _localctx = new RenameTablePartitionContext(_localctx);
                    enterOuterAlt(_localctx, 31);
                {
                    setState(727);
                    match(ALTER);
                    setState(728);
                    match(TABLE);
                    setState(729);
                    identifierReference();
                    setState(730);
                    ((RenameTablePartitionContext) _localctx).from = partitionSpec();
                    setState(731);
                    match(RENAME);
                    setState(732);
                    match(TO);
                    setState(733);
                    ((RenameTablePartitionContext) _localctx).to = partitionSpec();
                }
                break;
                case 32:
                    _localctx = new DropTablePartitionsContext(_localctx);
                    enterOuterAlt(_localctx, 32);
                {
                    setState(735);
                    match(ALTER);
                    setState(736);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(737);
                    identifierReference();
                    setState(738);
                    match(DROP);
                    setState(741);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(739);
                            match(IF);
                            setState(740);
                            match(EXISTS);
                        }
                    }

                    setState(743);
                    partitionSpec();
                    setState(748);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(744);
                                match(COMMA);
                                setState(745);
                                partitionSpec();
                            }
                        }
                        setState(750);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(752);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PURGE) {
                        {
                            setState(751);
                            match(PURGE);
                        }
                    }

                }
                break;
                case 33:
                    _localctx = new SetTableLocationContext(_localctx);
                    enterOuterAlt(_localctx, 33);
                {
                    setState(754);
                    match(ALTER);
                    setState(755);
                    match(TABLE);
                    setState(756);
                    identifierReference();
                    setState(758);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(757);
                            partitionSpec();
                        }
                    }

                    setState(760);
                    match(SET);
                    setState(761);
                    locationSpec();
                }
                break;
                case 34:
                    _localctx = new RecoverPartitionsContext(_localctx);
                    enterOuterAlt(_localctx, 34);
                {
                    setState(763);
                    match(ALTER);
                    setState(764);
                    match(TABLE);
                    setState(765);
                    identifierReference();
                    setState(766);
                    match(RECOVER);
                    setState(767);
                    match(PARTITIONS);
                }
                break;
                case 35:
                    _localctx = new DropTableContext(_localctx);
                    enterOuterAlt(_localctx, 35);
                {
                    setState(769);
                    match(DROP);
                    setState(770);
                    match(TABLE);
                    setState(773);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 44, _ctx)) {
                        case 1: {
                            setState(771);
                            match(IF);
                            setState(772);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(775);
                    identifierReference();
                    setState(777);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PURGE) {
                        {
                            setState(776);
                            match(PURGE);
                        }
                    }

                }
                break;
                case 36:
                    _localctx = new DropViewContext(_localctx);
                    enterOuterAlt(_localctx, 36);
                {
                    setState(779);
                    match(DROP);
                    setState(780);
                    match(VIEW);
                    setState(783);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 46, _ctx)) {
                        case 1: {
                            setState(781);
                            match(IF);
                            setState(782);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(785);
                    identifierReference();
                }
                break;
                case 37:
                    _localctx = new CreateViewContext(_localctx);
                    enterOuterAlt(_localctx, 37);
                {
                    setState(786);
                    match(CREATE);
                    setState(789);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OR) {
                        {
                            setState(787);
                            match(OR);
                            setState(788);
                            match(REPLACE);
                        }
                    }

                    setState(795);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == GLOBAL || _la == TEMPORARY) {
                        {
                            setState(792);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == GLOBAL) {
                                {
                                    setState(791);
                                    match(GLOBAL);
                                }
                            }

                            setState(794);
                            match(TEMPORARY);
                        }
                    }

                    setState(797);
                    match(VIEW);
                    setState(801);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 50, _ctx)) {
                        case 1: {
                            setState(798);
                            match(IF);
                            setState(799);
                            match(NOT);
                            setState(800);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(803);
                    identifierReference();
                    setState(805);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN) {
                        {
                            setState(804);
                            identifierCommentList();
                        }
                    }

                    setState(815);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMENT || _la == PARTITIONED || _la == TBLPROPERTIES) {
                        {
                            setState(813);
                            _errHandler.sync(this);
                            switch (_input.LA(1)) {
                                case COMMENT: {
                                    setState(807);
                                    commentSpec();
                                }
                                break;
                                case PARTITIONED: {
                                    {
                                        setState(808);
                                        match(PARTITIONED);
                                        setState(809);
                                        match(ON);
                                        setState(810);
                                        identifierList();
                                    }
                                }
                                break;
                                case TBLPROPERTIES: {
                                    {
                                        setState(811);
                                        match(TBLPROPERTIES);
                                        setState(812);
                                        propertyList();
                                    }
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        setState(817);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(818);
                    match(AS);
                    setState(819);
                    query();
                }
                break;
                case 38:
                    _localctx = new CreateTempViewUsingContext(_localctx);
                    enterOuterAlt(_localctx, 38);
                {
                    setState(821);
                    match(CREATE);
                    setState(824);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OR) {
                        {
                            setState(822);
                            match(OR);
                            setState(823);
                            match(REPLACE);
                        }
                    }

                    setState(827);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == GLOBAL) {
                        {
                            setState(826);
                            match(GLOBAL);
                        }
                    }

                    setState(829);
                    match(TEMPORARY);
                    setState(830);
                    match(VIEW);
                    setState(831);
                    tableIdentifier();
                    setState(836);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN) {
                        {
                            setState(832);
                            match(LEFT_PAREN);
                            setState(833);
                            colTypeList();
                            setState(834);
                            match(RIGHT_PAREN);
                        }
                    }

                    setState(838);
                    tableProvider();
                    setState(841);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OPTIONS) {
                        {
                            setState(839);
                            match(OPTIONS);
                            setState(840);
                            propertyList();
                        }
                    }

                }
                break;
                case 39:
                    _localctx = new AlterViewQueryContext(_localctx);
                    enterOuterAlt(_localctx, 39);
                {
                    setState(843);
                    match(ALTER);
                    setState(844);
                    match(VIEW);
                    setState(845);
                    identifierReference();
                    setState(847);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == AS) {
                        {
                            setState(846);
                            match(AS);
                        }
                    }

                    setState(849);
                    query();
                }
                break;
                case 40:
                    _localctx = new CreateFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 40);
                {
                    setState(851);
                    match(CREATE);
                    setState(854);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OR) {
                        {
                            setState(852);
                            match(OR);
                            setState(853);
                            match(REPLACE);
                        }
                    }

                    setState(857);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == TEMPORARY) {
                        {
                            setState(856);
                            match(TEMPORARY);
                        }
                    }

                    setState(859);
                    match(FUNCTION);
                    setState(863);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 61, _ctx)) {
                        case 1: {
                            setState(860);
                            match(IF);
                            setState(861);
                            match(NOT);
                            setState(862);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(865);
                    identifierReference();
                    setState(866);
                    match(AS);
                    setState(867);
                    ((CreateFunctionContext) _localctx).className = stringLit();
                    setState(877);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == USING) {
                        {
                            setState(868);
                            match(USING);
                            setState(869);
                            resource();
                            setState(874);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(870);
                                        match(COMMA);
                                        setState(871);
                                        resource();
                                    }
                                }
                                setState(876);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                        }
                    }

                }
                break;
                case 41:
                    _localctx = new DropFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 41);
                {
                    setState(879);
                    match(DROP);
                    setState(881);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == TEMPORARY) {
                        {
                            setState(880);
                            match(TEMPORARY);
                        }
                    }

                    setState(883);
                    match(FUNCTION);
                    setState(886);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 65, _ctx)) {
                        case 1: {
                            setState(884);
                            match(IF);
                            setState(885);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(888);
                    identifierReference();
                }
                break;
                case 42:
                    _localctx = new CreateVariableContext(_localctx);
                    enterOuterAlt(_localctx, 42);
                {
                    setState(889);
                    match(DECLARE);
                    setState(892);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 66, _ctx)) {
                        case 1: {
                            setState(890);
                            match(OR);
                            setState(891);
                            match(REPLACE);
                        }
                        break;
                    }
                    setState(895);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 67, _ctx)) {
                        case 1: {
                            setState(894);
                            match(VARIABLE);
                        }
                        break;
                    }
                    setState(897);
                    identifierReference();
                    setState(899);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 68, _ctx)) {
                        case 1: {
                            setState(898);
                            dataType();
                        }
                        break;
                    }
                    setState(902);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == DEFAULT || _la == EQ) {
                        {
                            setState(901);
                            variableDefaultExpression();
                        }
                    }

                }
                break;
                case 43:
                    _localctx = new DropVariableContext(_localctx);
                    enterOuterAlt(_localctx, 43);
                {
                    setState(904);
                    match(DROP);
                    setState(905);
                    match(TEMPORARY);
                    setState(906);
                    match(VARIABLE);
                    setState(909);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 70, _ctx)) {
                        case 1: {
                            setState(907);
                            match(IF);
                            setState(908);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(911);
                    identifierReference();
                }
                break;
                case 44:
                    _localctx = new ExplainContext(_localctx);
                    enterOuterAlt(_localctx, 44);
                {
                    setState(912);
                    match(EXPLAIN);
                    setState(914);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & 4611686018427396097L) != 0) || _la == FORMATTED || _la == LOGICAL) {
                        {
                            setState(913);
                            _la = _input.LA(1);
                            if (!(((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & 4611686018427396097L) != 0) || _la == FORMATTED || _la == LOGICAL)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                    }

                    setState(916);
                    statement();
                }
                break;
                case 45:
                    _localctx = new ShowTablesContext(_localctx);
                    enterOuterAlt(_localctx, 45);
                {
                    setState(917);
                    match(SHOW);
                    setState(918);
                    match(TABLES);
                    setState(921);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 72, _ctx)) {
                        case 1: {
                            setState(919);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(920);
                            identifierReference();
                        }
                        break;
                    }
                    setState(927);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 74, _ctx)) {
                        case 1: {
                            setState(924);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 73, _ctx)) {
                                case 1: {
                                    setState(923);
                                    match(LIKE);
                                }
                                break;
                            }
                            setState(926);
                            ((ShowTablesContext) _localctx).pattern = stringLit();
                        }
                        break;
                    }
                }
                break;
                case 46:
                    _localctx = new ShowTableExtendedContext(_localctx);
                    enterOuterAlt(_localctx, 46);
                {
                    setState(929);
                    match(SHOW);
                    setState(930);
                    match(TABLE);
                    setState(931);
                    match(EXTENDED);
                    setState(934);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(932);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(933);
                            ((ShowTableExtendedContext) _localctx).ns = identifierReference();
                        }
                    }

                    setState(936);
                    match(LIKE);
                    setState(937);
                    ((ShowTableExtendedContext) _localctx).pattern = stringLit();
                    setState(939);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(938);
                            partitionSpec();
                        }
                    }

                }
                break;
                case 47:
                    _localctx = new ShowTblPropertiesContext(_localctx);
                    enterOuterAlt(_localctx, 47);
                {
                    setState(941);
                    match(SHOW);
                    setState(942);
                    match(TBLPROPERTIES);
                    setState(943);
                    ((ShowTblPropertiesContext) _localctx).table = identifierReference();
                    setState(948);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN) {
                        {
                            setState(944);
                            match(LEFT_PAREN);
                            setState(945);
                            ((ShowTblPropertiesContext) _localctx).key = propertyKey();
                            setState(946);
                            match(RIGHT_PAREN);
                        }
                    }

                }
                break;
                case 48:
                    _localctx = new ShowColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 48);
                {
                    setState(950);
                    match(SHOW);
                    setState(951);
                    match(COLUMNS);
                    setState(952);
                    _la = _input.LA(1);
                    if (!(_la == FROM || _la == IN)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(953);
                    ((ShowColumnsContext) _localctx).table = identifierReference();
                    setState(956);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(954);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(955);
                            ((ShowColumnsContext) _localctx).ns = multipartIdentifier();
                        }
                    }

                }
                break;
                case 49:
                    _localctx = new ShowViewsContext(_localctx);
                    enterOuterAlt(_localctx, 49);
                {
                    setState(958);
                    match(SHOW);
                    setState(959);
                    match(VIEWS);
                    setState(962);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 79, _ctx)) {
                        case 1: {
                            setState(960);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(961);
                            identifierReference();
                        }
                        break;
                    }
                    setState(968);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 81, _ctx)) {
                        case 1: {
                            setState(965);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 80, _ctx)) {
                                case 1: {
                                    setState(964);
                                    match(LIKE);
                                }
                                break;
                            }
                            setState(967);
                            ((ShowViewsContext) _localctx).pattern = stringLit();
                        }
                        break;
                    }
                }
                break;
                case 50:
                    _localctx = new ShowPartitionsContext(_localctx);
                    enterOuterAlt(_localctx, 50);
                {
                    setState(970);
                    match(SHOW);
                    setState(971);
                    match(PARTITIONS);
                    setState(972);
                    identifierReference();
                    setState(974);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(973);
                            partitionSpec();
                        }
                    }

                }
                break;
                case 51:
                    _localctx = new ShowFunctionsContext(_localctx);
                    enterOuterAlt(_localctx, 51);
                {
                    setState(976);
                    match(SHOW);
                    setState(978);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 83, _ctx)) {
                        case 1: {
                            setState(977);
                            identifier();
                        }
                        break;
                    }
                    setState(980);
                    match(FUNCTIONS);
                    setState(983);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 84, _ctx)) {
                        case 1: {
                            setState(981);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(982);
                            ((ShowFunctionsContext) _localctx).ns = identifierReference();
                        }
                        break;
                    }
                    setState(992);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 87, _ctx)) {
                        case 1: {
                            setState(986);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 85, _ctx)) {
                                case 1: {
                                    setState(985);
                                    match(LIKE);
                                }
                                break;
                            }
                            setState(990);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 86, _ctx)) {
                                case 1: {
                                    setState(988);
                                    ((ShowFunctionsContext) _localctx).legacy = multipartIdentifier();
                                }
                                break;
                                case 2: {
                                    setState(989);
                                    ((ShowFunctionsContext) _localctx).pattern = stringLit();
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
                break;
                case 52:
                    _localctx = new ShowCreateTableContext(_localctx);
                    enterOuterAlt(_localctx, 52);
                {
                    setState(994);
                    match(SHOW);
                    setState(995);
                    match(CREATE);
                    setState(996);
                    match(TABLE);
                    setState(997);
                    identifierReference();
                    setState(1000);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == AS) {
                        {
                            setState(998);
                            match(AS);
                            setState(999);
                            match(SERDE);
                        }
                    }

                }
                break;
                case 53:
                    _localctx = new ShowCurrentNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 53);
                {
                    setState(1002);
                    match(SHOW);
                    setState(1003);
                    match(CURRENT);
                    setState(1004);
                    namespace();
                }
                break;
                case 54:
                    _localctx = new ShowCatalogsContext(_localctx);
                    enterOuterAlt(_localctx, 54);
                {
                    setState(1005);
                    match(SHOW);
                    setState(1006);
                    match(CATALOGS);
                    setState(1011);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 90, _ctx)) {
                        case 1: {
                            setState(1008);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 89, _ctx)) {
                                case 1: {
                                    setState(1007);
                                    match(LIKE);
                                }
                                break;
                            }
                            setState(1010);
                            ((ShowCatalogsContext) _localctx).pattern = stringLit();
                        }
                        break;
                    }
                }
                break;
                case 55:
                    _localctx = new DescribeFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 55);
                {
                    setState(1013);
                    _la = _input.LA(1);
                    if (!(_la == DESC || _la == DESCRIBE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(1014);
                    match(FUNCTION);
                    setState(1016);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 91, _ctx)) {
                        case 1: {
                            setState(1015);
                            match(EXTENDED);
                        }
                        break;
                    }
                    setState(1018);
                    describeFuncName();
                }
                break;
                case 56:
                    _localctx = new DescribeNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 56);
                {
                    setState(1019);
                    _la = _input.LA(1);
                    if (!(_la == DESC || _la == DESCRIBE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(1020);
                    namespace();
                    setState(1022);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 92, _ctx)) {
                        case 1: {
                            setState(1021);
                            match(EXTENDED);
                        }
                        break;
                    }
                    setState(1024);
                    identifierReference();
                }
                break;
                case 57:
                    _localctx = new DescribeRelationContext(_localctx);
                    enterOuterAlt(_localctx, 57);
                {
                    setState(1026);
                    _la = _input.LA(1);
                    if (!(_la == DESC || _la == DESCRIBE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(1028);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 93, _ctx)) {
                        case 1: {
                            setState(1027);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1031);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 94, _ctx)) {
                        case 1: {
                            setState(1030);
                            ((DescribeRelationContext) _localctx).option = _input.LT(1);
                            _la = _input.LA(1);
                            if (!(_la == EXTENDED || _la == FORMATTED)) {
                                ((DescribeRelationContext) _localctx).option = (Token) _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                        break;
                    }
                    setState(1033);
                    identifierReference();
                    setState(1035);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 95, _ctx)) {
                        case 1: {
                            setState(1034);
                            partitionSpec();
                        }
                        break;
                    }
                    setState(1038);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 96, _ctx)) {
                        case 1: {
                            setState(1037);
                            describeColName();
                        }
                        break;
                    }
                }
                break;
                case 58:
                    _localctx = new DescribeQueryContext(_localctx);
                    enterOuterAlt(_localctx, 58);
                {
                    setState(1040);
                    _la = _input.LA(1);
                    if (!(_la == DESC || _la == DESCRIBE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(1042);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == QUERY) {
                        {
                            setState(1041);
                            match(QUERY);
                        }
                    }

                    setState(1044);
                    query();
                }
                break;
                case 59:
                    _localctx = new CommentNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 59);
                {
                    setState(1045);
                    match(COMMENT);
                    setState(1046);
                    match(ON);
                    setState(1047);
                    namespace();
                    setState(1048);
                    identifierReference();
                    setState(1049);
                    match(IS);
                    setState(1050);
                    comment();
                }
                break;
                case 60:
                    _localctx = new CommentTableContext(_localctx);
                    enterOuterAlt(_localctx, 60);
                {
                    setState(1052);
                    match(COMMENT);
                    setState(1053);
                    match(ON);
                    setState(1054);
                    match(TABLE);
                    setState(1055);
                    identifierReference();
                    setState(1056);
                    match(IS);
                    setState(1057);
                    comment();
                }
                break;
                case 61:
                    _localctx = new RefreshTableContext(_localctx);
                    enterOuterAlt(_localctx, 61);
                {
                    setState(1059);
                    match(REFRESH);
                    setState(1060);
                    match(TABLE);
                    setState(1061);
                    identifierReference();
                }
                break;
                case 62:
                    _localctx = new RefreshFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 62);
                {
                    setState(1062);
                    match(REFRESH);
                    setState(1063);
                    match(FUNCTION);
                    setState(1064);
                    identifierReference();
                }
                break;
                case 63:
                    _localctx = new RefreshResourceContext(_localctx);
                    enterOuterAlt(_localctx, 63);
                {
                    setState(1065);
                    match(REFRESH);
                    setState(1073);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 99, _ctx)) {
                        case 1: {
                            setState(1066);
                            stringLit();
                        }
                        break;
                        case 2: {
                            setState(1070);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 98, _ctx);
                            while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1 + 1) {
                                    {
                                        {
                                            setState(1067);
                                            matchWildcard();
                                        }
                                    }
                                }
                                setState(1072);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 98, _ctx);
                            }
                        }
                        break;
                    }
                }
                break;
                case 64:
                    _localctx = new CacheTableContext(_localctx);
                    enterOuterAlt(_localctx, 64);
                {
                    setState(1075);
                    match(CACHE);
                    setState(1077);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LAZY) {
                        {
                            setState(1076);
                            match(LAZY);
                        }
                    }

                    setState(1079);
                    match(TABLE);
                    setState(1080);
                    identifierReference();
                    setState(1083);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OPTIONS) {
                        {
                            setState(1081);
                            match(OPTIONS);
                            setState(1082);
                            ((CacheTableContext) _localctx).options = propertyList();
                        }
                    }

                    setState(1089);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN || _la == AS || _la == FROM || _la == MAP || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & 4503599635759105L) != 0) || _la == VALUES || _la == WITH) {
                        {
                            setState(1086);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == AS) {
                                {
                                    setState(1085);
                                    match(AS);
                                }
                            }

                            setState(1088);
                            query();
                        }
                    }

                }
                break;
                case 65:
                    _localctx = new UncacheTableContext(_localctx);
                    enterOuterAlt(_localctx, 65);
                {
                    setState(1091);
                    match(UNCACHE);
                    setState(1092);
                    match(TABLE);
                    setState(1095);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 104, _ctx)) {
                        case 1: {
                            setState(1093);
                            match(IF);
                            setState(1094);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(1097);
                    identifierReference();
                }
                break;
                case 66:
                    _localctx = new ClearCacheContext(_localctx);
                    enterOuterAlt(_localctx, 66);
                {
                    setState(1098);
                    match(CLEAR);
                    setState(1099);
                    match(CACHE);
                }
                break;
                case 67:
                    _localctx = new LoadDataContext(_localctx);
                    enterOuterAlt(_localctx, 67);
                {
                    setState(1100);
                    match(LOAD);
                    setState(1101);
                    match(DATA);
                    setState(1103);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LOCAL) {
                        {
                            setState(1102);
                            match(LOCAL);
                        }
                    }

                    setState(1105);
                    match(INPATH);
                    setState(1106);
                    ((LoadDataContext) _localctx).path = stringLit();
                    setState(1108);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OVERWRITE) {
                        {
                            setState(1107);
                            match(OVERWRITE);
                        }
                    }

                    setState(1110);
                    match(INTO);
                    setState(1111);
                    match(TABLE);
                    setState(1112);
                    identifierReference();
                    setState(1114);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1113);
                            partitionSpec();
                        }
                    }

                }
                break;
                case 68:
                    _localctx = new TruncateTableContext(_localctx);
                    enterOuterAlt(_localctx, 68);
                {
                    setState(1116);
                    match(TRUNCATE);
                    setState(1117);
                    match(TABLE);
                    setState(1118);
                    identifierReference();
                    setState(1120);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1119);
                            partitionSpec();
                        }
                    }

                }
                break;
                case 69:
                    _localctx = new RepairTableContext(_localctx);
                    enterOuterAlt(_localctx, 69);
                {
                    setState(1123);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MSCK) {
                        {
                            setState(1122);
                            match(MSCK);
                        }
                    }

                    setState(1125);
                    match(REPAIR);
                    setState(1126);
                    match(TABLE);
                    setState(1127);
                    identifierReference();
                    setState(1130);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == ADD || _la == DROP || _la == SYNC) {
                        {
                            setState(1128);
                            ((RepairTableContext) _localctx).option = _input.LT(1);
                            _la = _input.LA(1);
                            if (!(_la == ADD || _la == DROP || _la == SYNC)) {
                                ((RepairTableContext) _localctx).option = (Token) _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(1129);
                            match(PARTITIONS);
                        }
                    }

                }
                break;
                case 70:
                    _localctx = new ManageResourceContext(_localctx);
                    enterOuterAlt(_localctx, 70);
                {
                    setState(1132);
                    ((ManageResourceContext) _localctx).op = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == ADD || _la == LIST)) {
                        ((ManageResourceContext) _localctx).op = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(1133);
                    identifier();
                    setState(1137);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 111, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1134);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1139);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 111, _ctx);
                    }
                }
                break;
                case 71:
                    _localctx = new SetCollationContext(_localctx);
                    enterOuterAlt(_localctx, 71);
                {
                    setState(1140);
                    match(SET);
                    setState(1141);
                    match(COLLATION);
                    setState(1142);
                    ((SetCollationContext) _localctx).collationName = identifier();
                }
                break;
                case 72:
                    _localctx = new FailNativeCommandContext(_localctx);
                    enterOuterAlt(_localctx, 72);
                {
                    setState(1143);
                    match(SET);
                    setState(1144);
                    match(ROLE);
                    setState(1148);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 112, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1145);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1150);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 112, _ctx);
                    }
                }
                break;
                case 73:
                    _localctx = new SetTimeZoneContext(_localctx);
                    enterOuterAlt(_localctx, 73);
                {
                    setState(1151);
                    match(SET);
                    setState(1152);
                    match(TIME);
                    setState(1153);
                    match(ZONE);
                    setState(1154);
                    interval();
                }
                break;
                case 74:
                    _localctx = new SetTimeZoneContext(_localctx);
                    enterOuterAlt(_localctx, 74);
                {
                    setState(1155);
                    match(SET);
                    setState(1156);
                    match(TIME);
                    setState(1157);
                    match(ZONE);
                    setState(1158);
                    timezone();
                }
                break;
                case 75:
                    _localctx = new SetTimeZoneContext(_localctx);
                    enterOuterAlt(_localctx, 75);
                {
                    setState(1159);
                    match(SET);
                    setState(1160);
                    match(TIME);
                    setState(1161);
                    match(ZONE);
                    setState(1165);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 113, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1162);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1167);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 113, _ctx);
                    }
                }
                break;
                case 76:
                    _localctx = new SetVariableContext(_localctx);
                    enterOuterAlt(_localctx, 76);
                {
                    setState(1168);
                    match(SET);
                    setState(1169);
                    _la = _input.LA(1);
                    if (!(_la == VAR || _la == VARIABLE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(1170);
                    assignmentList();
                }
                break;
                case 77:
                    _localctx = new SetVariableContext(_localctx);
                    enterOuterAlt(_localctx, 77);
                {
                    setState(1171);
                    match(SET);
                    setState(1172);
                    _la = _input.LA(1);
                    if (!(_la == VAR || _la == VARIABLE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(1173);
                    match(LEFT_PAREN);
                    setState(1174);
                    multipartIdentifierList();
                    setState(1175);
                    match(RIGHT_PAREN);
                    setState(1176);
                    match(EQ);
                    setState(1177);
                    match(LEFT_PAREN);
                    setState(1178);
                    query();
                    setState(1179);
                    match(RIGHT_PAREN);
                }
                break;
                case 78:
                    _localctx = new SetQuotedConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 78);
                {
                    setState(1181);
                    match(SET);
                    setState(1182);
                    configKey();
                    setState(1183);
                    match(EQ);
                    setState(1184);
                    configValue();
                }
                break;
                case 79:
                    _localctx = new SetConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 79);
                {
                    setState(1186);
                    match(SET);
                    setState(1187);
                    configKey();
                    setState(1195);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == EQ) {
                        {
                            setState(1188);
                            match(EQ);
                            setState(1192);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 114, _ctx);
                            while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1 + 1) {
                                    {
                                        {
                                            setState(1189);
                                            matchWildcard();
                                        }
                                    }
                                }
                                setState(1194);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 114, _ctx);
                            }
                        }
                    }

                }
                break;
                case 80:
                    _localctx = new SetQuotedConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 80);
                {
                    setState(1197);
                    match(SET);
                    setState(1201);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 116, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1198);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1203);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 116, _ctx);
                    }
                    setState(1204);
                    match(EQ);
                    setState(1205);
                    configValue();
                }
                break;
                case 81:
                    _localctx = new SetConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 81);
                {
                    setState(1206);
                    match(SET);
                    setState(1210);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 117, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1207);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1212);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 117, _ctx);
                    }
                }
                break;
                case 82:
                    _localctx = new ResetQuotedConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 82);
                {
                    setState(1213);
                    match(RESET);
                    setState(1214);
                    configKey();
                }
                break;
                case 83:
                    _localctx = new ResetConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 83);
                {
                    setState(1215);
                    match(RESET);
                    setState(1219);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 118, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1216);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1221);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 118, _ctx);
                    }
                }
                break;
                case 84:
                    _localctx = new CreateIndexContext(_localctx);
                    enterOuterAlt(_localctx, 84);
                {
                    setState(1222);
                    match(CREATE);
                    setState(1223);
                    match(INDEX);
                    setState(1227);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 119, _ctx)) {
                        case 1: {
                            setState(1224);
                            match(IF);
                            setState(1225);
                            match(NOT);
                            setState(1226);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(1229);
                    identifier();
                    setState(1230);
                    match(ON);
                    setState(1232);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 120, _ctx)) {
                        case 1: {
                            setState(1231);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1234);
                    identifierReference();
                    setState(1237);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == USING) {
                        {
                            setState(1235);
                            match(USING);
                            setState(1236);
                            ((CreateIndexContext) _localctx).indexType = identifier();
                        }
                    }

                    setState(1239);
                    match(LEFT_PAREN);
                    setState(1240);
                    ((CreateIndexContext) _localctx).columns = multipartIdentifierPropertyList();
                    setState(1241);
                    match(RIGHT_PAREN);
                    setState(1244);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OPTIONS) {
                        {
                            setState(1242);
                            match(OPTIONS);
                            setState(1243);
                            ((CreateIndexContext) _localctx).options = propertyList();
                        }
                    }

                }
                break;
                case 85:
                    _localctx = new DropIndexContext(_localctx);
                    enterOuterAlt(_localctx, 85);
                {
                    setState(1246);
                    match(DROP);
                    setState(1247);
                    match(INDEX);
                    setState(1250);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 123, _ctx)) {
                        case 1: {
                            setState(1248);
                            match(IF);
                            setState(1249);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(1252);
                    identifier();
                    setState(1253);
                    match(ON);
                    setState(1255);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 124, _ctx)) {
                        case 1: {
                            setState(1254);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1257);
                    identifierReference();
                }
                break;
                case 86:
                    _localctx = new FailNativeCommandContext(_localctx);
                    enterOuterAlt(_localctx, 86);
                {
                    setState(1259);
                    unsupportedHiveNativeCommands();
                    setState(1263);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 125, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1260);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1265);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 125, _ctx);
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExecuteImmediateContext extends ParserRuleContext {
        public ExecuteImmediateQueryParamContext queryParam;
        public MultipartIdentifierListContext targetVariable;

        public TerminalNode EXECUTE() {
            return getToken(SqlBaseParser.EXECUTE, 0);
        }

        public TerminalNode IMMEDIATE() {
            return getToken(SqlBaseParser.IMMEDIATE, 0);
        }

        public ExecuteImmediateQueryParamContext executeImmediateQueryParam() {
            return getRuleContext(ExecuteImmediateQueryParamContext.class, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public ExecuteImmediateUsingContext executeImmediateUsing() {
            return getRuleContext(ExecuteImmediateUsingContext.class, 0);
        }

        public MultipartIdentifierListContext multipartIdentifierList() {
            return getRuleContext(MultipartIdentifierListContext.class, 0);
        }

        public ExecuteImmediateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_executeImmediate;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExecuteImmediate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitExecuteImmediate(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExecuteImmediate(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExecuteImmediateContext executeImmediate() throws RecognitionException {
        ExecuteImmediateContext _localctx = new ExecuteImmediateContext(_ctx, getState());
        enterRule(_localctx, 16, RULE_executeImmediate);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1268);
                match(EXECUTE);
                setState(1269);
                match(IMMEDIATE);
                setState(1270);
                ((ExecuteImmediateContext) _localctx).queryParam = executeImmediateQueryParam();
                setState(1273);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == INTO) {
                    {
                        setState(1271);
                        match(INTO);
                        setState(1272);
                        ((ExecuteImmediateContext) _localctx).targetVariable = multipartIdentifierList();
                    }
                }

                setState(1276);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == USING) {
                    {
                        setState(1275);
                        executeImmediateUsing();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExecuteImmediateUsingContext extends ParserRuleContext {
        public NamedExpressionSeqContext params;

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public NamedExpressionSeqContext namedExpressionSeq() {
            return getRuleContext(NamedExpressionSeqContext.class, 0);
        }

        public ExecuteImmediateUsingContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_executeImmediateUsing;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExecuteImmediateUsing(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitExecuteImmediateUsing(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExecuteImmediateUsing(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExecuteImmediateUsingContext executeImmediateUsing() throws RecognitionException {
        ExecuteImmediateUsingContext _localctx = new ExecuteImmediateUsingContext(_ctx, getState());
        enterRule(_localctx, 18, RULE_executeImmediateUsing);
        try {
            setState(1285);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 129, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1278);
                    match(USING);
                    setState(1279);
                    match(LEFT_PAREN);
                    setState(1280);
                    ((ExecuteImmediateUsingContext) _localctx).params = namedExpressionSeq();
                    setState(1281);
                    match(RIGHT_PAREN);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1283);
                    match(USING);
                    setState(1284);
                    ((ExecuteImmediateUsingContext) _localctx).params = namedExpressionSeq();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExecuteImmediateQueryParamContext extends ParserRuleContext {
        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public ExecuteImmediateQueryParamContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_executeImmediateQueryParam;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExecuteImmediateQueryParam(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitExecuteImmediateQueryParam(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExecuteImmediateQueryParam(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExecuteImmediateQueryParamContext executeImmediateQueryParam() throws RecognitionException {
        ExecuteImmediateQueryParamContext _localctx = new ExecuteImmediateQueryParamContext(_ctx, getState());
        enterRule(_localctx, 20, RULE_executeImmediateQueryParam);
        try {
            setState(1289);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 130, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1287);
                    stringLit();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1288);
                    multipartIdentifier();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExecuteImmediateArgumentContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext name;

        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public ExecuteImmediateArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_executeImmediateArgument;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExecuteImmediateArgument(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitExecuteImmediateArgument(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExecuteImmediateArgument(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExecuteImmediateArgumentContext executeImmediateArgument() throws RecognitionException {
        ExecuteImmediateArgumentContext _localctx = new ExecuteImmediateArgumentContext(_ctx, getState());
        enterRule(_localctx, 22, RULE_executeImmediateArgument);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1293);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 131, _ctx)) {
                    case 1: {
                        setState(1291);
                        constant();
                    }
                    break;
                    case 2: {
                        setState(1292);
                        multipartIdentifier();
                    }
                    break;
                }
                setState(1297);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AS) {
                    {
                        setState(1295);
                        match(AS);
                        setState(1296);
                        ((ExecuteImmediateArgumentContext) _localctx).name = errorCapturingIdentifier();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExecuteImmediateArgumentSeqContext extends ParserRuleContext {
        public List<ExecuteImmediateArgumentContext> executeImmediateArgument() {
            return getRuleContexts(ExecuteImmediateArgumentContext.class);
        }

        public ExecuteImmediateArgumentContext executeImmediateArgument(int i) {
            return getRuleContext(ExecuteImmediateArgumentContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public ExecuteImmediateArgumentSeqContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_executeImmediateArgumentSeq;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExecuteImmediateArgumentSeq(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitExecuteImmediateArgumentSeq(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExecuteImmediateArgumentSeq(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExecuteImmediateArgumentSeqContext executeImmediateArgumentSeq() throws RecognitionException {
        ExecuteImmediateArgumentSeqContext _localctx = new ExecuteImmediateArgumentSeqContext(_ctx, getState());
        enterRule(_localctx, 24, RULE_executeImmediateArgumentSeq);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1299);
                executeImmediateArgument();
                setState(1304);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1300);
                            match(COMMA);
                            setState(1301);
                            executeImmediateArgument();
                        }
                    }
                    setState(1306);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TimezoneContext extends ParserRuleContext {
        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TimezoneContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_timezone;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTimezone(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTimezone(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTimezone(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TimezoneContext timezone() throws RecognitionException {
        TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
        enterRule(_localctx, 26, RULE_timezone);
        try {
            setState(1309);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 134, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1307);
                    stringLit();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1308);
                    match(LOCAL);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ConfigKeyContext extends ParserRuleContext {
        public QuotedIdentifierContext quotedIdentifier() {
            return getRuleContext(QuotedIdentifierContext.class, 0);
        }

        public ConfigKeyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_configKey;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterConfigKey(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitConfigKey(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitConfigKey(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConfigKeyContext configKey() throws RecognitionException {
        ConfigKeyContext _localctx = new ConfigKeyContext(_ctx, getState());
        enterRule(_localctx, 28, RULE_configKey);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1311);
                quotedIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ConfigValueContext extends ParserRuleContext {
        public BackQuotedIdentifierContext backQuotedIdentifier() {
            return getRuleContext(BackQuotedIdentifierContext.class, 0);
        }

        public ConfigValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_configValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterConfigValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitConfigValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitConfigValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConfigValueContext configValue() throws RecognitionException {
        ConfigValueContext _localctx = new ConfigValueContext(_ctx, getState());
        enterRule(_localctx, 30, RULE_configValue);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1313);
                backQuotedIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnsupportedHiveNativeCommandsContext extends ParserRuleContext {
        public Token kw1;
        public Token kw2;
        public Token kw3;
        public Token kw4;
        public Token kw5;
        public Token kw6;

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode ROLE() {
            return getToken(SqlBaseParser.ROLE, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode GRANT() {
            return getToken(SqlBaseParser.GRANT, 0);
        }

        public TerminalNode REVOKE() {
            return getToken(SqlBaseParser.REVOKE, 0);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode PRINCIPALS() {
            return getToken(SqlBaseParser.PRINCIPALS, 0);
        }

        public TerminalNode ROLES() {
            return getToken(SqlBaseParser.ROLES, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public TerminalNode EXPORT() {
            return getToken(SqlBaseParser.EXPORT, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode IMPORT() {
            return getToken(SqlBaseParser.IMPORT, 0);
        }

        public TerminalNode COMPACTIONS() {
            return getToken(SqlBaseParser.COMPACTIONS, 0);
        }

        public TerminalNode TRANSACTIONS() {
            return getToken(SqlBaseParser.TRANSACTIONS, 0);
        }

        public TerminalNode INDEXES() {
            return getToken(SqlBaseParser.INDEXES, 0);
        }

        public TerminalNode LOCKS() {
            return getToken(SqlBaseParser.LOCKS, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode LOCK() {
            return getToken(SqlBaseParser.LOCK, 0);
        }

        public TerminalNode DATABASE() {
            return getToken(SqlBaseParser.DATABASE, 0);
        }

        public TerminalNode UNLOCK() {
            return getToken(SqlBaseParser.UNLOCK, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode MACRO() {
            return getToken(SqlBaseParser.MACRO, 0);
        }

        public TableIdentifierContext tableIdentifier() {
            return getRuleContext(TableIdentifierContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode CLUSTERED() {
            return getToken(SqlBaseParser.CLUSTERED, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode SORTED() {
            return getToken(SqlBaseParser.SORTED, 0);
        }

        public TerminalNode SKEWED() {
            return getToken(SqlBaseParser.SKEWED, 0);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode DIRECTORIES() {
            return getToken(SqlBaseParser.DIRECTORIES, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode LOCATION() {
            return getToken(SqlBaseParser.LOCATION, 0);
        }

        public TerminalNode EXCHANGE() {
            return getToken(SqlBaseParser.EXCHANGE, 0);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode ARCHIVE() {
            return getToken(SqlBaseParser.ARCHIVE, 0);
        }

        public TerminalNode UNARCHIVE() {
            return getToken(SqlBaseParser.UNARCHIVE, 0);
        }

        public TerminalNode TOUCH() {
            return getToken(SqlBaseParser.TOUCH, 0);
        }

        public TerminalNode COMPACT() {
            return getToken(SqlBaseParser.COMPACT, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode CONCATENATE() {
            return getToken(SqlBaseParser.CONCATENATE, 0);
        }

        public TerminalNode FILEFORMAT() {
            return getToken(SqlBaseParser.FILEFORMAT, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public TerminalNode START() {
            return getToken(SqlBaseParser.START, 0);
        }

        public TerminalNode TRANSACTION() {
            return getToken(SqlBaseParser.TRANSACTION, 0);
        }

        public TerminalNode COMMIT() {
            return getToken(SqlBaseParser.COMMIT, 0);
        }

        public TerminalNode ROLLBACK() {
            return getToken(SqlBaseParser.ROLLBACK, 0);
        }

        public TerminalNode DFS() {
            return getToken(SqlBaseParser.DFS, 0);
        }

        public UnsupportedHiveNativeCommandsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unsupportedHiveNativeCommands;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnsupportedHiveNativeCommands(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnsupportedHiveNativeCommands(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnsupportedHiveNativeCommands(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() throws RecognitionException {
        UnsupportedHiveNativeCommandsContext _localctx = new UnsupportedHiveNativeCommandsContext(_ctx, getState());
        enterRule(_localctx, 32, RULE_unsupportedHiveNativeCommands);
        int _la;
        try {
            setState(1483);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 142, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1315);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(CREATE);
                    setState(1316);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1317);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(DROP);
                    setState(1318);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1319);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(GRANT);
                    setState(1321);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 135, _ctx)) {
                        case 1: {
                            setState(1320);
                            ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                        }
                        break;
                    }
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1323);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(REVOKE);
                    setState(1325);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 136, _ctx)) {
                        case 1: {
                            setState(1324);
                            ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                        }
                        break;
                    }
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1327);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1328);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(GRANT);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(1329);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1330);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                    setState(1332);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 137, _ctx)) {
                        case 1: {
                            setState(1331);
                            ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(GRANT);
                        }
                        break;
                    }
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(1334);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1335);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(PRINCIPALS);
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(1336);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1337);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLES);
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(1338);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1339);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(CURRENT);
                    setState(1340);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(ROLES);
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(1341);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(EXPORT);
                    setState(1342);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                }
                break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(1343);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(IMPORT);
                    setState(1344);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                }
                break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(1345);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1346);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(COMPACTIONS);
                }
                break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(1347);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1348);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(CREATE);
                    setState(1349);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(TABLE);
                }
                break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                {
                    setState(1350);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1351);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TRANSACTIONS);
                }
                break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                {
                    setState(1352);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1353);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(INDEXES);
                }
                break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                {
                    setState(1354);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1355);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(LOCKS);
                }
                break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(1356);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(CREATE);
                    setState(1357);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(INDEX);
                }
                break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(1358);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(DROP);
                    setState(1359);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(INDEX);
                }
                break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(1360);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1361);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(INDEX);
                }
                break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(1362);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(LOCK);
                    setState(1363);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                }
                break;
                case 21:
                    enterOuterAlt(_localctx, 21);
                {
                    setState(1364);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(LOCK);
                    setState(1365);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(DATABASE);
                }
                break;
                case 22:
                    enterOuterAlt(_localctx, 22);
                {
                    setState(1366);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(UNLOCK);
                    setState(1367);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                }
                break;
                case 23:
                    enterOuterAlt(_localctx, 23);
                {
                    setState(1368);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(UNLOCK);
                    setState(1369);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(DATABASE);
                }
                break;
                case 24:
                    enterOuterAlt(_localctx, 24);
                {
                    setState(1370);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(CREATE);
                    setState(1371);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TEMPORARY);
                    setState(1372);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(MACRO);
                }
                break;
                case 25:
                    enterOuterAlt(_localctx, 25);
                {
                    setState(1373);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(DROP);
                    setState(1374);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TEMPORARY);
                    setState(1375);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(MACRO);
                }
                break;
                case 26:
                    enterOuterAlt(_localctx, 26);
                {
                    setState(1376);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1377);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1378);
                    tableIdentifier();
                    setState(1379);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(NOT);
                    setState(1380);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(CLUSTERED);
                }
                break;
                case 27:
                    enterOuterAlt(_localctx, 27);
                {
                    setState(1382);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1383);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1384);
                    tableIdentifier();
                    setState(1385);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(CLUSTERED);
                    setState(1386);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(BY);
                }
                break;
                case 28:
                    enterOuterAlt(_localctx, 28);
                {
                    setState(1388);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1389);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1390);
                    tableIdentifier();
                    setState(1391);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(NOT);
                    setState(1392);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(SORTED);
                }
                break;
                case 29:
                    enterOuterAlt(_localctx, 29);
                {
                    setState(1394);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1395);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1396);
                    tableIdentifier();
                    setState(1397);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(SKEWED);
                    setState(1398);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(BY);
                }
                break;
                case 30:
                    enterOuterAlt(_localctx, 30);
                {
                    setState(1400);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1401);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1402);
                    tableIdentifier();
                    setState(1403);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(NOT);
                    setState(1404);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(SKEWED);
                }
                break;
                case 31:
                    enterOuterAlt(_localctx, 31);
                {
                    setState(1406);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1407);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1408);
                    tableIdentifier();
                    setState(1409);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(NOT);
                    setState(1410);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(STORED);
                    setState(1411);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw5 = match(AS);
                    setState(1412);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw6 = match(DIRECTORIES);
                }
                break;
                case 32:
                    enterOuterAlt(_localctx, 32);
                {
                    setState(1414);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1415);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1416);
                    tableIdentifier();
                    setState(1417);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(SET);
                    setState(1418);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(SKEWED);
                    setState(1419);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw5 = match(LOCATION);
                }
                break;
                case 33:
                    enterOuterAlt(_localctx, 33);
                {
                    setState(1421);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1422);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1423);
                    tableIdentifier();
                    setState(1424);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(EXCHANGE);
                    setState(1425);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(PARTITION);
                }
                break;
                case 34:
                    enterOuterAlt(_localctx, 34);
                {
                    setState(1427);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1428);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1429);
                    tableIdentifier();
                    setState(1430);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(ARCHIVE);
                    setState(1431);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(PARTITION);
                }
                break;
                case 35:
                    enterOuterAlt(_localctx, 35);
                {
                    setState(1433);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1434);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1435);
                    tableIdentifier();
                    setState(1436);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(UNARCHIVE);
                    setState(1437);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(PARTITION);
                }
                break;
                case 36:
                    enterOuterAlt(_localctx, 36);
                {
                    setState(1439);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1440);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1441);
                    tableIdentifier();
                    setState(1442);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(TOUCH);
                }
                break;
                case 37:
                    enterOuterAlt(_localctx, 37);
                {
                    setState(1444);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1445);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1446);
                    tableIdentifier();
                    setState(1448);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1447);
                            partitionSpec();
                        }
                    }

                    setState(1450);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(COMPACT);
                }
                break;
                case 38:
                    enterOuterAlt(_localctx, 38);
                {
                    setState(1452);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1453);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1454);
                    tableIdentifier();
                    setState(1456);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1455);
                            partitionSpec();
                        }
                    }

                    setState(1458);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(CONCATENATE);
                }
                break;
                case 39:
                    enterOuterAlt(_localctx, 39);
                {
                    setState(1460);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1461);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1462);
                    tableIdentifier();
                    setState(1464);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1463);
                            partitionSpec();
                        }
                    }

                    setState(1466);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(SET);
                    setState(1467);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(FILEFORMAT);
                }
                break;
                case 40:
                    enterOuterAlt(_localctx, 40);
                {
                    setState(1469);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1470);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1471);
                    tableIdentifier();
                    setState(1473);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1472);
                            partitionSpec();
                        }
                    }

                    setState(1475);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(REPLACE);
                    setState(1476);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(COLUMNS);
                }
                break;
                case 41:
                    enterOuterAlt(_localctx, 41);
                {
                    setState(1478);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(START);
                    setState(1479);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TRANSACTION);
                }
                break;
                case 42:
                    enterOuterAlt(_localctx, 42);
                {
                    setState(1480);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(COMMIT);
                }
                break;
                case 43:
                    enterOuterAlt(_localctx, 43);
                {
                    setState(1481);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ROLLBACK);
                }
                break;
                case 44:
                    enterOuterAlt(_localctx, 44);
                {
                    setState(1482);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(DFS);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateTableHeaderContext extends ParserRuleContext {
        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode EXTERNAL() {
            return getToken(SqlBaseParser.EXTERNAL, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public CreateTableHeaderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createTableHeader;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateTableHeader(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateTableHeader(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTableHeader(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateTableHeaderContext createTableHeader() throws RecognitionException {
        CreateTableHeaderContext _localctx = new CreateTableHeaderContext(_ctx, getState());
        enterRule(_localctx, 34, RULE_createTableHeader);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1485);
                match(CREATE);
                setState(1487);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == TEMPORARY) {
                    {
                        setState(1486);
                        match(TEMPORARY);
                    }
                }

                setState(1490);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == EXTERNAL) {
                    {
                        setState(1489);
                        match(EXTERNAL);
                    }
                }

                setState(1492);
                match(TABLE);
                setState(1496);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 145, _ctx)) {
                    case 1: {
                        setState(1493);
                        match(IF);
                        setState(1494);
                        match(NOT);
                        setState(1495);
                        match(EXISTS);
                    }
                    break;
                }
                setState(1498);
                identifierReference();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReplaceTableHeaderContext extends ParserRuleContext {
        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public ReplaceTableHeaderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_replaceTableHeader;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterReplaceTableHeader(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitReplaceTableHeader(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitReplaceTableHeader(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ReplaceTableHeaderContext replaceTableHeader() throws RecognitionException {
        ReplaceTableHeaderContext _localctx = new ReplaceTableHeaderContext(_ctx, getState());
        enterRule(_localctx, 36, RULE_replaceTableHeader);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1502);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == CREATE) {
                    {
                        setState(1500);
                        match(CREATE);
                        setState(1501);
                        match(OR);
                    }
                }

                setState(1504);
                match(REPLACE);
                setState(1505);
                match(TABLE);
                setState(1506);
                identifierReference();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ClusterBySpecContext extends ParserRuleContext {
        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public MultipartIdentifierListContext multipartIdentifierList() {
            return getRuleContext(MultipartIdentifierListContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public ClusterBySpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_clusterBySpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterClusterBySpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitClusterBySpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitClusterBySpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ClusterBySpecContext clusterBySpec() throws RecognitionException {
        ClusterBySpecContext _localctx = new ClusterBySpecContext(_ctx, getState());
        enterRule(_localctx, 38, RULE_clusterBySpec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1508);
                match(CLUSTER);
                setState(1509);
                match(BY);
                setState(1510);
                match(LEFT_PAREN);
                setState(1511);
                multipartIdentifierList();
                setState(1512);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BucketSpecContext extends ParserRuleContext {
        public TerminalNode CLUSTERED() {
            return getToken(SqlBaseParser.CLUSTERED, 0);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode BUCKETS() {
            return getToken(SqlBaseParser.BUCKETS, 0);
        }

        public TerminalNode SORTED() {
            return getToken(SqlBaseParser.SORTED, 0);
        }

        public OrderedIdentifierListContext orderedIdentifierList() {
            return getRuleContext(OrderedIdentifierListContext.class, 0);
        }

        public BucketSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bucketSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterBucketSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitBucketSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBucketSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BucketSpecContext bucketSpec() throws RecognitionException {
        BucketSpecContext _localctx = new BucketSpecContext(_ctx, getState());
        enterRule(_localctx, 40, RULE_bucketSpec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1514);
                match(CLUSTERED);
                setState(1515);
                match(BY);
                setState(1516);
                identifierList();
                setState(1520);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == SORTED) {
                    {
                        setState(1517);
                        match(SORTED);
                        setState(1518);
                        match(BY);
                        setState(1519);
                        orderedIdentifierList();
                    }
                }

                setState(1522);
                match(INTO);
                setState(1523);
                match(INTEGER_VALUE);
                setState(1524);
                match(BUCKETS);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewSpecContext extends ParserRuleContext {
        public TerminalNode SKEWED() {
            return getToken(SqlBaseParser.SKEWED, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public ConstantListContext constantList() {
            return getRuleContext(ConstantListContext.class, 0);
        }

        public NestedConstantListContext nestedConstantList() {
            return getRuleContext(NestedConstantListContext.class, 0);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode DIRECTORIES() {
            return getToken(SqlBaseParser.DIRECTORIES, 0);
        }

        public SkewSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSkewSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSkewSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSkewSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewSpecContext skewSpec() throws RecognitionException {
        SkewSpecContext _localctx = new SkewSpecContext(_ctx, getState());
        enterRule(_localctx, 42, RULE_skewSpec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1526);
                match(SKEWED);
                setState(1527);
                match(BY);
                setState(1528);
                identifierList();
                setState(1529);
                match(ON);
                setState(1532);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 148, _ctx)) {
                    case 1: {
                        setState(1530);
                        constantList();
                    }
                    break;
                    case 2: {
                        setState(1531);
                        nestedConstantList();
                    }
                    break;
                }
                setState(1537);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 149, _ctx)) {
                    case 1: {
                        setState(1534);
                        match(STORED);
                        setState(1535);
                        match(AS);
                        setState(1536);
                        match(DIRECTORIES);
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LocationSpecContext extends ParserRuleContext {
        public TerminalNode LOCATION() {
            return getToken(SqlBaseParser.LOCATION, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public LocationSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_locationSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLocationSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLocationSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLocationSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LocationSpecContext locationSpec() throws RecognitionException {
        LocationSpecContext _localctx = new LocationSpecContext(_ctx, getState());
        enterRule(_localctx, 44, RULE_locationSpec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1539);
                match(LOCATION);
                setState(1540);
                stringLit();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CommentSpecContext extends ParserRuleContext {
        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public CommentSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_commentSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCommentSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCommentSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCommentSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CommentSpecContext commentSpec() throws RecognitionException {
        CommentSpecContext _localctx = new CommentSpecContext(_ctx, getState());
        enterRule(_localctx, 46, RULE_commentSpec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1542);
                match(COMMENT);
                setState(1543);
                stringLit();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QueryContext extends ParserRuleContext {
        public QueryTermContext queryTerm() {
            return getRuleContext(QueryTermContext.class, 0);
        }

        public QueryOrganizationContext queryOrganization() {
            return getRuleContext(QueryOrganizationContext.class, 0);
        }

        public CtesContext ctes() {
            return getRuleContext(CtesContext.class, 0);
        }

        public QueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_query;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QueryContext query() throws RecognitionException {
        QueryContext _localctx = new QueryContext(_ctx, getState());
        enterRule(_localctx, 48, RULE_query);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1546);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == WITH) {
                    {
                        setState(1545);
                        ctes();
                    }
                }

                setState(1548);
                queryTerm(0);
                setState(1549);
                queryOrganization();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InsertIntoContext extends ParserRuleContext {
        public InsertIntoContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_insertInto;
        }

        public InsertIntoContext() {
        }

        public void copyFrom(InsertIntoContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InsertIntoReplaceWhereContext extends InsertIntoContext {
        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public InsertIntoReplaceWhereContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertIntoReplaceWhere(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInsertIntoReplaceWhere(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertIntoReplaceWhere(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InsertOverwriteHiveDirContext extends InsertIntoContext {
        public StringLitContext path;

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public TerminalNode DIRECTORY() {
            return getToken(SqlBaseParser.DIRECTORY, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public RowFormatContext rowFormat() {
            return getRuleContext(RowFormatContext.class, 0);
        }

        public CreateFileFormatContext createFileFormat() {
            return getRuleContext(CreateFileFormatContext.class, 0);
        }

        public InsertOverwriteHiveDirContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertOverwriteHiveDir(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInsertOverwriteHiveDir(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertOverwriteHiveDir(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InsertOverwriteDirContext extends InsertIntoContext {
        public StringLitContext path;
        public PropertyListContext options;

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public TerminalNode DIRECTORY() {
            return getToken(SqlBaseParser.DIRECTORY, 0);
        }

        public TableProviderContext tableProvider() {
            return getRuleContext(TableProviderContext.class, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public InsertOverwriteDirContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertOverwriteDir(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInsertOverwriteDir(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertOverwriteDir(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InsertOverwriteTableContext extends InsertIntoContext {
        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode NAME() {
            return getToken(SqlBaseParser.NAME, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public InsertOverwriteTableContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertOverwriteTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInsertOverwriteTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertOverwriteTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InsertIntoTableContext extends InsertIntoContext {
        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode NAME() {
            return getToken(SqlBaseParser.NAME, 0);
        }

        public InsertIntoTableContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertIntoTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitInsertIntoTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertIntoTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public final InsertIntoContext insertInto() throws RecognitionException {
        InsertIntoContext _localctx = new InsertIntoContext(_ctx, getState());
        enterRule(_localctx, 50, RULE_insertInto);
        int _la;
        try {
            setState(1625);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 166, _ctx)) {
                case 1:
                    _localctx = new InsertOverwriteTableContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1551);
                    match(INSERT);
                    setState(1552);
                    match(OVERWRITE);
                    setState(1554);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 151, _ctx)) {
                        case 1: {
                            setState(1553);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1556);
                    identifierReference();
                    setState(1563);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1557);
                            partitionSpec();
                            setState(1561);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == IF) {
                                {
                                    setState(1558);
                                    match(IF);
                                    setState(1559);
                                    match(NOT);
                                    setState(1560);
                                    match(EXISTS);
                                }
                            }

                        }
                    }

                    setState(1568);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 154, _ctx)) {
                        case 1: {
                            {
                                setState(1565);
                                match(BY);
                                setState(1566);
                                match(NAME);
                            }
                        }
                        break;
                        case 2: {
                            setState(1567);
                            identifierList();
                        }
                        break;
                    }
                }
                break;
                case 2:
                    _localctx = new InsertIntoTableContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1570);
                    match(INSERT);
                    setState(1571);
                    match(INTO);
                    setState(1573);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 155, _ctx)) {
                        case 1: {
                            setState(1572);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1575);
                    identifierReference();
                    setState(1577);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1576);
                            partitionSpec();
                        }
                    }

                    setState(1582);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(1579);
                            match(IF);
                            setState(1580);
                            match(NOT);
                            setState(1581);
                            match(EXISTS);
                        }
                    }

                    setState(1587);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 158, _ctx)) {
                        case 1: {
                            {
                                setState(1584);
                                match(BY);
                                setState(1585);
                                match(NAME);
                            }
                        }
                        break;
                        case 2: {
                            setState(1586);
                            identifierList();
                        }
                        break;
                    }
                }
                break;
                case 3:
                    _localctx = new InsertIntoReplaceWhereContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1589);
                    match(INSERT);
                    setState(1590);
                    match(INTO);
                    setState(1592);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 159, _ctx)) {
                        case 1: {
                            setState(1591);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1594);
                    identifierReference();
                    setState(1595);
                    match(REPLACE);
                    setState(1596);
                    whereClause();
                }
                break;
                case 4:
                    _localctx = new InsertOverwriteHiveDirContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1598);
                    match(INSERT);
                    setState(1599);
                    match(OVERWRITE);
                    setState(1601);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LOCAL) {
                        {
                            setState(1600);
                            match(LOCAL);
                        }
                    }

                    setState(1603);
                    match(DIRECTORY);
                    setState(1604);
                    ((InsertOverwriteHiveDirContext) _localctx).path = stringLit();
                    setState(1606);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == ROW) {
                        {
                            setState(1605);
                            rowFormat();
                        }
                    }

                    setState(1609);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == STORED) {
                        {
                            setState(1608);
                            createFileFormat();
                        }
                    }

                }
                break;
                case 5:
                    _localctx = new InsertOverwriteDirContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1611);
                    match(INSERT);
                    setState(1612);
                    match(OVERWRITE);
                    setState(1614);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LOCAL) {
                        {
                            setState(1613);
                            match(LOCAL);
                        }
                    }

                    setState(1616);
                    match(DIRECTORY);
                    setState(1618);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 164, _ctx)) {
                        case 1: {
                            setState(1617);
                            ((InsertOverwriteDirContext) _localctx).path = stringLit();
                        }
                        break;
                    }
                    setState(1620);
                    tableProvider();
                    setState(1623);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OPTIONS) {
                        {
                            setState(1621);
                            match(OPTIONS);
                            setState(1622);
                            ((InsertOverwriteDirContext) _localctx).options = propertyList();
                        }
                    }

                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionSpecLocationContext extends ParserRuleContext {
        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public LocationSpecContext locationSpec() {
            return getRuleContext(LocationSpecContext.class, 0);
        }

        public PartitionSpecLocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionSpecLocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPartitionSpecLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPartitionSpecLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionSpecLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionSpecLocationContext partitionSpecLocation() throws RecognitionException {
        PartitionSpecLocationContext _localctx = new PartitionSpecLocationContext(_ctx, getState());
        enterRule(_localctx, 52, RULE_partitionSpecLocation);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1627);
                partitionSpec();
                setState(1629);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LOCATION) {
                    {
                        setState(1628);
                        locationSpec();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionSpecContext extends ParserRuleContext {
        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<PartitionValContext> partitionVal() {
            return getRuleContexts(PartitionValContext.class);
        }

        public PartitionValContext partitionVal(int i) {
            return getRuleContext(PartitionValContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPartitionSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPartitionSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionSpecContext partitionSpec() throws RecognitionException {
        PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
        enterRule(_localctx, 54, RULE_partitionSpec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1631);
                match(PARTITION);
                setState(1632);
                match(LEFT_PAREN);
                setState(1633);
                partitionVal();
                setState(1638);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1634);
                            match(COMMA);
                            setState(1635);
                            partitionVal();
                        }
                    }
                    setState(1640);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1641);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionValContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public PartitionValContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionVal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPartitionVal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPartitionVal(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionVal(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionValContext partitionVal() throws RecognitionException {
        PartitionValContext _localctx = new PartitionValContext(_ctx, getState());
        enterRule(_localctx, 56, RULE_partitionVal);
        int _la;
        try {
            setState(1652);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 170, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1643);
                    identifier();
                    setState(1646);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == EQ) {
                        {
                            setState(1644);
                            match(EQ);
                            setState(1645);
                            constant();
                        }
                    }

                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1648);
                    identifier();
                    setState(1649);
                    match(EQ);
                    setState(1650);
                    match(DEFAULT);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NamespaceContext extends ParserRuleContext {
        public TerminalNode NAMESPACE() {
            return getToken(SqlBaseParser.NAMESPACE, 0);
        }

        public TerminalNode DATABASE() {
            return getToken(SqlBaseParser.DATABASE, 0);
        }

        public TerminalNode SCHEMA() {
            return getToken(SqlBaseParser.SCHEMA, 0);
        }

        public NamespaceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namespace;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NamespaceContext namespace() throws RecognitionException {
        NamespaceContext _localctx = new NamespaceContext(_ctx, getState());
        enterRule(_localctx, 58, RULE_namespace);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1654);
                _la = _input.LA(1);
                if (!(_la == DATABASE || _la == NAMESPACE || _la == SCHEMA)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NamespacesContext extends ParserRuleContext {
        public TerminalNode NAMESPACES() {
            return getToken(SqlBaseParser.NAMESPACES, 0);
        }

        public TerminalNode DATABASES() {
            return getToken(SqlBaseParser.DATABASES, 0);
        }

        public TerminalNode SCHEMAS() {
            return getToken(SqlBaseParser.SCHEMAS, 0);
        }

        public NamespacesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namespaces;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNamespaces(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamespaces(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamespaces(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NamespacesContext namespaces() throws RecognitionException {
        NamespacesContext _localctx = new NamespacesContext(_ctx, getState());
        enterRule(_localctx, 60, RULE_namespaces);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1656);
                _la = _input.LA(1);
                if (!(_la == DATABASES || _la == NAMESPACES || _la == SCHEMAS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DescribeFuncNameContext extends ParserRuleContext {
        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public ComparisonOperatorContext comparisonOperator() {
            return getRuleContext(ComparisonOperatorContext.class, 0);
        }

        public ArithmeticOperatorContext arithmeticOperator() {
            return getRuleContext(ArithmeticOperatorContext.class, 0);
        }

        public PredicateOperatorContext predicateOperator() {
            return getRuleContext(PredicateOperatorContext.class, 0);
        }

        public TerminalNode BANG() {
            return getToken(SqlBaseParser.BANG, 0);
        }

        public DescribeFuncNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_describeFuncName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeFuncName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDescribeFuncName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeFuncName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DescribeFuncNameContext describeFuncName() throws RecognitionException {
        DescribeFuncNameContext _localctx = new DescribeFuncNameContext(_ctx, getState());
        enterRule(_localctx, 62, RULE_describeFuncName);
        try {
            setState(1664);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 171, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1658);
                    identifierReference();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1659);
                    stringLit();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1660);
                    comparisonOperator();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1661);
                    arithmeticOperator();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1662);
                    predicateOperator();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(1663);
                    match(BANG);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DescribeColNameContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext errorCapturingIdentifier;
        public List<ErrorCapturingIdentifierContext> nameParts = new ArrayList<ErrorCapturingIdentifierContext>();

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(SqlBaseParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(SqlBaseParser.DOT, i);
        }

        public DescribeColNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_describeColName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeColName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDescribeColName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeColName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DescribeColNameContext describeColName() throws RecognitionException {
        DescribeColNameContext _localctx = new DescribeColNameContext(_ctx, getState());
        enterRule(_localctx, 64, RULE_describeColName);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1666);
                ((DescribeColNameContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                ((DescribeColNameContext) _localctx).nameParts.add(((DescribeColNameContext) _localctx).errorCapturingIdentifier);
                setState(1671);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == DOT) {
                    {
                        {
                            setState(1667);
                            match(DOT);
                            setState(1668);
                            ((DescribeColNameContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                            ((DescribeColNameContext) _localctx).nameParts.add(((DescribeColNameContext) _localctx).errorCapturingIdentifier);
                        }
                    }
                    setState(1673);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CtesContext extends ParserRuleContext {
        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public List<NamedQueryContext> namedQuery() {
            return getRuleContexts(NamedQueryContext.class);
        }

        public NamedQueryContext namedQuery(int i) {
            return getRuleContext(NamedQueryContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public CtesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ctes;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCtes(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCtes(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCtes(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CtesContext ctes() throws RecognitionException {
        CtesContext _localctx = new CtesContext(_ctx, getState());
        enterRule(_localctx, 66, RULE_ctes);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1674);
                match(WITH);
                setState(1675);
                namedQuery();
                setState(1680);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1676);
                            match(COMMA);
                            setState(1677);
                            namedQuery();
                        }
                    }
                    setState(1682);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NamedQueryContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext name;
        public IdentifierListContext columnAliases;

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public NamedQueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedQuery;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNamedQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamedQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NamedQueryContext namedQuery() throws RecognitionException {
        NamedQueryContext _localctx = new NamedQueryContext(_ctx, getState());
        enterRule(_localctx, 68, RULE_namedQuery);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1683);
                ((NamedQueryContext) _localctx).name = errorCapturingIdentifier();
                setState(1685);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 174, _ctx)) {
                    case 1: {
                        setState(1684);
                        ((NamedQueryContext) _localctx).columnAliases = identifierList();
                    }
                    break;
                }
                setState(1688);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AS) {
                    {
                        setState(1687);
                        match(AS);
                    }
                }

                setState(1690);
                match(LEFT_PAREN);
                setState(1691);
                query();
                setState(1692);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableProviderContext extends ParserRuleContext {
        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TableProviderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableProvider;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTableProvider(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableProvider(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableProvider(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableProviderContext tableProvider() throws RecognitionException {
        TableProviderContext _localctx = new TableProviderContext(_ctx, getState());
        enterRule(_localctx, 70, RULE_tableProvider);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1694);
                match(USING);
                setState(1695);
                multipartIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateTableClausesContext extends ParserRuleContext {
        public ExpressionPropertyListContext options;
        public PartitionFieldListContext partitioning;
        public PropertyListContext tableProps;

        public List<SkewSpecContext> skewSpec() {
            return getRuleContexts(SkewSpecContext.class);
        }

        public SkewSpecContext skewSpec(int i) {
            return getRuleContext(SkewSpecContext.class, i);
        }

        public List<ClusterBySpecContext> clusterBySpec() {
            return getRuleContexts(ClusterBySpecContext.class);
        }

        public ClusterBySpecContext clusterBySpec(int i) {
            return getRuleContext(ClusterBySpecContext.class, i);
        }

        public List<BucketSpecContext> bucketSpec() {
            return getRuleContexts(BucketSpecContext.class);
        }

        public BucketSpecContext bucketSpec(int i) {
            return getRuleContext(BucketSpecContext.class, i);
        }

        public List<RowFormatContext> rowFormat() {
            return getRuleContexts(RowFormatContext.class);
        }

        public RowFormatContext rowFormat(int i) {
            return getRuleContext(RowFormatContext.class, i);
        }

        public List<CreateFileFormatContext> createFileFormat() {
            return getRuleContexts(CreateFileFormatContext.class);
        }

        public CreateFileFormatContext createFileFormat(int i) {
            return getRuleContext(CreateFileFormatContext.class, i);
        }

        public List<LocationSpecContext> locationSpec() {
            return getRuleContexts(LocationSpecContext.class);
        }

        public LocationSpecContext locationSpec(int i) {
            return getRuleContext(LocationSpecContext.class, i);
        }

        public List<CommentSpecContext> commentSpec() {
            return getRuleContexts(CommentSpecContext.class);
        }

        public CommentSpecContext commentSpec(int i) {
            return getRuleContext(CommentSpecContext.class, i);
        }

        public List<TerminalNode> OPTIONS() {
            return getTokens(SqlBaseParser.OPTIONS);
        }

        public TerminalNode OPTIONS(int i) {
            return getToken(SqlBaseParser.OPTIONS, i);
        }

        public List<TerminalNode> PARTITIONED() {
            return getTokens(SqlBaseParser.PARTITIONED);
        }

        public TerminalNode PARTITIONED(int i) {
            return getToken(SqlBaseParser.PARTITIONED, i);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public List<TerminalNode> TBLPROPERTIES() {
            return getTokens(SqlBaseParser.TBLPROPERTIES);
        }

        public TerminalNode TBLPROPERTIES(int i) {
            return getToken(SqlBaseParser.TBLPROPERTIES, i);
        }

        public List<ExpressionPropertyListContext> expressionPropertyList() {
            return getRuleContexts(ExpressionPropertyListContext.class);
        }

        public ExpressionPropertyListContext expressionPropertyList(int i) {
            return getRuleContext(ExpressionPropertyListContext.class, i);
        }

        public List<PartitionFieldListContext> partitionFieldList() {
            return getRuleContexts(PartitionFieldListContext.class);
        }

        public PartitionFieldListContext partitionFieldList(int i) {
            return getRuleContext(PartitionFieldListContext.class, i);
        }

        public List<PropertyListContext> propertyList() {
            return getRuleContexts(PropertyListContext.class);
        }

        public PropertyListContext propertyList(int i) {
            return getRuleContext(PropertyListContext.class, i);
        }

        public CreateTableClausesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createTableClauses;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateTableClauses(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateTableClauses(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTableClauses(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateTableClausesContext createTableClauses() throws RecognitionException {
        CreateTableClausesContext _localctx = new CreateTableClausesContext(_ctx, getState());
        enterRule(_localctx, 72, RULE_createTableClauses);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1713);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9112752371007488L) != 0) || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & 35201551958017L) != 0) || ((((_la - 253)) & ~0x3f) == 0 && ((1L << (_la - 253)) & 549823184897L) != 0)) {
                    {
                        setState(1711);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case OPTIONS: {
                                {
                                    setState(1697);
                                    match(OPTIONS);
                                    setState(1698);
                                    ((CreateTableClausesContext) _localctx).options = expressionPropertyList();
                                }
                            }
                            break;
                            case PARTITIONED: {
                                {
                                    setState(1699);
                                    match(PARTITIONED);
                                    setState(1700);
                                    match(BY);
                                    setState(1701);
                                    ((CreateTableClausesContext) _localctx).partitioning = partitionFieldList();
                                }
                            }
                            break;
                            case SKEWED: {
                                setState(1702);
                                skewSpec();
                            }
                            break;
                            case CLUSTER: {
                                setState(1703);
                                clusterBySpec();
                            }
                            break;
                            case CLUSTERED: {
                                setState(1704);
                                bucketSpec();
                            }
                            break;
                            case ROW: {
                                setState(1705);
                                rowFormat();
                            }
                            break;
                            case STORED: {
                                setState(1706);
                                createFileFormat();
                            }
                            break;
                            case LOCATION: {
                                setState(1707);
                                locationSpec();
                            }
                            break;
                            case COMMENT: {
                                setState(1708);
                                commentSpec();
                            }
                            break;
                            case TBLPROPERTIES: {
                                {
                                    setState(1709);
                                    match(TBLPROPERTIES);
                                    setState(1710);
                                    ((CreateTableClausesContext) _localctx).tableProps = propertyList();
                                }
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    setState(1715);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PropertyListContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<PropertyContext> property() {
            return getRuleContexts(PropertyContext.class);
        }

        public PropertyContext property(int i) {
            return getRuleContext(PropertyContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public PropertyListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPropertyList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPropertyList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPropertyList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PropertyListContext propertyList() throws RecognitionException {
        PropertyListContext _localctx = new PropertyListContext(_ctx, getState());
        enterRule(_localctx, 74, RULE_propertyList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1716);
                match(LEFT_PAREN);
                setState(1717);
                property();
                setState(1722);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1718);
                            match(COMMA);
                            setState(1719);
                            property();
                        }
                    }
                    setState(1724);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1725);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PropertyContext extends ParserRuleContext {
        public PropertyKeyContext key;
        public PropertyValueContext value;

        public PropertyKeyContext propertyKey() {
            return getRuleContext(PropertyKeyContext.class, 0);
        }

        public PropertyValueContext propertyValue() {
            return getRuleContext(PropertyValueContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public PropertyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_property;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterProperty(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitProperty(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitProperty(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PropertyContext property() throws RecognitionException {
        PropertyContext _localctx = new PropertyContext(_ctx, getState());
        enterRule(_localctx, 76, RULE_property);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1727);
                ((PropertyContext) _localctx).key = propertyKey();
                setState(1732);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 180, _ctx)) {
                    case 1: {
                        setState(1729);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 179, _ctx)) {
                            case 1: {
                                setState(1728);
                                match(EQ);
                            }
                            break;
                        }
                        setState(1731);
                        ((PropertyContext) _localctx).value = propertyValue();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PropertyKeyContext extends ParserRuleContext {
        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(SqlBaseParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(SqlBaseParser.DOT, i);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public PropertyKeyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyKey;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPropertyKey(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPropertyKey(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPropertyKey(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PropertyKeyContext propertyKey() throws RecognitionException {
        PropertyKeyContext _localctx = new PropertyKeyContext(_ctx, getState());
        enterRule(_localctx, 78, RULE_propertyKey);
        try {
            int _alt;
            setState(1743);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 182, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1734);
                    errorCapturingIdentifier();
                    setState(1739);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 181, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(1735);
                                    match(DOT);
                                    setState(1736);
                                    errorCapturingIdentifier();
                                }
                            }
                        }
                        setState(1741);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 181, _ctx);
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1742);
                    stringLit();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PropertyValueContext extends ParserRuleContext {
        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public BooleanValueContext booleanValue() {
            return getRuleContext(BooleanValueContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public PropertyValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPropertyValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPropertyValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPropertyValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PropertyValueContext propertyValue() throws RecognitionException {
        PropertyValueContext _localctx = new PropertyValueContext(_ctx, getState());
        enterRule(_localctx, 80, RULE_propertyValue);
        try {
            setState(1749);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 183, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1745);
                    match(INTEGER_VALUE);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1746);
                    match(DECIMAL_VALUE);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1747);
                    booleanValue();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1748);
                    stringLit();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionPropertyListContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<ExpressionPropertyContext> expressionProperty() {
            return getRuleContexts(ExpressionPropertyContext.class);
        }

        public ExpressionPropertyContext expressionProperty(int i) {
            return getRuleContext(ExpressionPropertyContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public ExpressionPropertyListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressionPropertyList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExpressionPropertyList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitExpressionPropertyList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExpressionPropertyList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionPropertyListContext expressionPropertyList() throws RecognitionException {
        ExpressionPropertyListContext _localctx = new ExpressionPropertyListContext(_ctx, getState());
        enterRule(_localctx, 82, RULE_expressionPropertyList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1751);
                match(LEFT_PAREN);
                setState(1752);
                expressionProperty();
                setState(1757);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1753);
                            match(COMMA);
                            setState(1754);
                            expressionProperty();
                        }
                    }
                    setState(1759);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1760);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionPropertyContext extends ParserRuleContext {
        public PropertyKeyContext key;
        public ExpressionContext value;

        public PropertyKeyContext propertyKey() {
            return getRuleContext(PropertyKeyContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public ExpressionPropertyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressionProperty;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExpressionProperty(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitExpressionProperty(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExpressionProperty(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionPropertyContext expressionProperty() throws RecognitionException {
        ExpressionPropertyContext _localctx = new ExpressionPropertyContext(_ctx, getState());
        enterRule(_localctx, 84, RULE_expressionProperty);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1762);
                ((ExpressionPropertyContext) _localctx).key = propertyKey();
                setState(1767);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 186, _ctx)) {
                    case 1: {
                        setState(1764);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 185, _ctx)) {
                            case 1: {
                                setState(1763);
                                match(EQ);
                            }
                            break;
                        }
                        setState(1766);
                        ((ExpressionPropertyContext) _localctx).value = expression();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ConstantListContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<ConstantContext> constant() {
            return getRuleContexts(ConstantContext.class);
        }

        public ConstantContext constant(int i) {
            return getRuleContext(ConstantContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public ConstantListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_constantList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterConstantList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitConstantList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitConstantList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConstantListContext constantList() throws RecognitionException {
        ConstantListContext _localctx = new ConstantListContext(_ctx, getState());
        enterRule(_localctx, 86, RULE_constantList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1769);
                match(LEFT_PAREN);
                setState(1770);
                constant();
                setState(1775);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1771);
                            match(COMMA);
                            setState(1772);
                            constant();
                        }
                    }
                    setState(1777);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1778);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NestedConstantListContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<ConstantListContext> constantList() {
            return getRuleContexts(ConstantListContext.class);
        }

        public ConstantListContext constantList(int i) {
            return getRuleContext(ConstantListContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public NestedConstantListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nestedConstantList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNestedConstantList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNestedConstantList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNestedConstantList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NestedConstantListContext nestedConstantList() throws RecognitionException {
        NestedConstantListContext _localctx = new NestedConstantListContext(_ctx, getState());
        enterRule(_localctx, 88, RULE_nestedConstantList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1780);
                match(LEFT_PAREN);
                setState(1781);
                constantList();
                setState(1786);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1782);
                            match(COMMA);
                            setState(1783);
                            constantList();
                        }
                    }
                    setState(1788);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1789);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateFileFormatContext extends ParserRuleContext {
        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public FileFormatContext fileFormat() {
            return getRuleContext(FileFormatContext.class, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public StorageHandlerContext storageHandler() {
            return getRuleContext(StorageHandlerContext.class, 0);
        }

        public CreateFileFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createFileFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateFileFormatContext createFileFormat() throws RecognitionException {
        CreateFileFormatContext _localctx = new CreateFileFormatContext(_ctx, getState());
        enterRule(_localctx, 90, RULE_createFileFormat);
        try {
            setState(1797);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 189, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1791);
                    match(STORED);
                    setState(1792);
                    match(AS);
                    setState(1793);
                    fileFormat();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1794);
                    match(STORED);
                    setState(1795);
                    match(BY);
                    setState(1796);
                    storageHandler();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FileFormatContext extends ParserRuleContext {
        public FileFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fileFormat;
        }

        public FileFormatContext() {
        }

        public void copyFrom(FileFormatContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableFileFormatContext extends FileFormatContext {
        public StringLitContext inFmt;
        public StringLitContext outFmt;

        public TerminalNode INPUTFORMAT() {
            return getToken(SqlBaseParser.INPUTFORMAT, 0);
        }

        public TerminalNode OUTPUTFORMAT() {
            return getToken(SqlBaseParser.OUTPUTFORMAT, 0);
        }

        public List<StringLitContext> stringLit() {
            return getRuleContexts(StringLitContext.class);
        }

        public StringLitContext stringLit(int i) {
            return getRuleContext(StringLitContext.class, i);
        }

        public TableFileFormatContext(FileFormatContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTableFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GenericFileFormatContext extends FileFormatContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public GenericFileFormatContext(FileFormatContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterGenericFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitGenericFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGenericFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FileFormatContext fileFormat() throws RecognitionException {
        FileFormatContext _localctx = new FileFormatContext(_ctx, getState());
        enterRule(_localctx, 92, RULE_fileFormat);
        try {
            setState(1805);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 190, _ctx)) {
                case 1:
                    _localctx = new TableFileFormatContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1799);
                    match(INPUTFORMAT);
                    setState(1800);
                    ((TableFileFormatContext) _localctx).inFmt = stringLit();
                    setState(1801);
                    match(OUTPUTFORMAT);
                    setState(1802);
                    ((TableFileFormatContext) _localctx).outFmt = stringLit();
                }
                break;
                case 2:
                    _localctx = new GenericFileFormatContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1804);
                    identifier();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StorageHandlerContext extends ParserRuleContext {
        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public StorageHandlerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_storageHandler;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStorageHandler(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStorageHandler(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStorageHandler(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StorageHandlerContext storageHandler() throws RecognitionException {
        StorageHandlerContext _localctx = new StorageHandlerContext(_ctx, getState());
        enterRule(_localctx, 94, RULE_storageHandler);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1807);
                stringLit();
                setState(1811);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 191, _ctx)) {
                    case 1: {
                        setState(1808);
                        match(WITH);
                        setState(1809);
                        match(SERDEPROPERTIES);
                        setState(1810);
                        propertyList();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ResourceContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public ResourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_resource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterResource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitResource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitResource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ResourceContext resource() throws RecognitionException {
        ResourceContext _localctx = new ResourceContext(_ctx, getState());
        enterRule(_localctx, 96, RULE_resource);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1813);
                identifier();
                setState(1814);
                stringLit();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DmlStatementNoWithContext extends ParserRuleContext {
        public DmlStatementNoWithContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dmlStatementNoWith;
        }

        public DmlStatementNoWithContext() {
        }

        public void copyFrom(DmlStatementNoWithContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DeleteFromTableContext extends DmlStatementNoWithContext {
        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public DeleteFromTableContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDeleteFromTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDeleteFromTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDeleteFromTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleInsertQueryContext extends DmlStatementNoWithContext {
        public InsertIntoContext insertInto() {
            return getRuleContext(InsertIntoContext.class, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public SingleInsertQueryContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleInsertQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleInsertQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleInsertQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MultiInsertQueryContext extends DmlStatementNoWithContext {
        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<MultiInsertQueryBodyContext> multiInsertQueryBody() {
            return getRuleContexts(MultiInsertQueryBodyContext.class);
        }

        public MultiInsertQueryBodyContext multiInsertQueryBody(int i) {
            return getRuleContext(MultiInsertQueryBodyContext.class, i);
        }

        public MultiInsertQueryContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultiInsertQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultiInsertQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultiInsertQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UpdateTableContext extends DmlStatementNoWithContext {
        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public SetClauseContext setClause() {
            return getRuleContext(SetClauseContext.class, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public UpdateTableContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUpdateTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUpdateTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUpdateTable(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MergeIntoTableContext extends DmlStatementNoWithContext {
        public IdentifierReferenceContext target;
        public TableAliasContext targetAlias;
        public IdentifierReferenceContext source;
        public QueryContext sourceQuery;
        public TableAliasContext sourceAlias;
        public BooleanExpressionContext mergeCondition;

        public TerminalNode MERGE() {
            return getToken(SqlBaseParser.MERGE, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public List<IdentifierReferenceContext> identifierReference() {
            return getRuleContexts(IdentifierReferenceContext.class);
        }

        public IdentifierReferenceContext identifierReference(int i) {
            return getRuleContext(IdentifierReferenceContext.class, i);
        }

        public List<TableAliasContext> tableAlias() {
            return getRuleContexts(TableAliasContext.class);
        }

        public TableAliasContext tableAlias(int i) {
            return getRuleContext(TableAliasContext.class, i);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SCHEMA() {
            return getToken(SqlBaseParser.SCHEMA, 0);
        }

        public TerminalNode EVOLUTION() {
            return getToken(SqlBaseParser.EVOLUTION, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public List<MatchedClauseContext> matchedClause() {
            return getRuleContexts(MatchedClauseContext.class);
        }

        public MatchedClauseContext matchedClause(int i) {
            return getRuleContext(MatchedClauseContext.class, i);
        }

        public List<NotMatchedClauseContext> notMatchedClause() {
            return getRuleContexts(NotMatchedClauseContext.class);
        }

        public NotMatchedClauseContext notMatchedClause(int i) {
            return getRuleContext(NotMatchedClauseContext.class, i);
        }

        public List<NotMatchedBySourceClauseContext> notMatchedBySourceClause() {
            return getRuleContexts(NotMatchedBySourceClauseContext.class);
        }

        public NotMatchedBySourceClauseContext notMatchedBySourceClause(int i) {
            return getRuleContext(NotMatchedBySourceClauseContext.class, i);
        }

        public MergeIntoTableContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterMergeIntoTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitMergeIntoTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMergeIntoTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DmlStatementNoWithContext dmlStatementNoWith() throws RecognitionException {
        DmlStatementNoWithContext _localctx = new DmlStatementNoWithContext(_ctx, getState());
        enterRule(_localctx, 98, RULE_dmlStatementNoWith);
        int _la;
        try {
            int _alt;
            setState(1881);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case INSERT:
                    _localctx = new SingleInsertQueryContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1816);
                    insertInto();
                    setState(1817);
                    query();
                }
                break;
                case FROM:
                    _localctx = new MultiInsertQueryContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1819);
                    fromClause();
                    setState(1821);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    do {
                        {
                            {
                                setState(1820);
                                multiInsertQueryBody();
                            }
                        }
                        setState(1823);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    } while (_la == INSERT);
                }
                break;
                case DELETE:
                    _localctx = new DeleteFromTableContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1825);
                    match(DELETE);
                    setState(1826);
                    match(FROM);
                    setState(1827);
                    identifierReference();
                    setState(1828);
                    tableAlias();
                    setState(1830);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == WHERE) {
                        {
                            setState(1829);
                            whereClause();
                        }
                    }

                }
                break;
                case UPDATE:
                    _localctx = new UpdateTableContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1832);
                    match(UPDATE);
                    setState(1833);
                    identifierReference();
                    setState(1834);
                    tableAlias();
                    setState(1835);
                    setClause();
                    setState(1841);
                    _errHandler.sync(this);
                    switch (_input.LA(1)) {
                        case BY: {
                            setState(1836);
                            match(BY);
                            setState(1837);
                            valueExpression(0);
                        }
                        break;
                        case EOF:
                        case SEMICOLON:
                        case WHERE: {
                            setState(1839);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == WHERE) {
                                {
                                    setState(1838);
                                    whereClause();
                                }
                            }

                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
                break;
                case MERGE:
                    _localctx = new MergeIntoTableContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1843);
                    match(MERGE);
                    setState(1847);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == WITH) {
                        {
                            setState(1844);
                            match(WITH);
                            setState(1845);
                            match(SCHEMA);
                            setState(1846);
                            match(EVOLUTION);
                        }
                    }

                    setState(1849);
                    match(INTO);
                    setState(1850);
                    ((MergeIntoTableContext) _localctx).target = identifierReference();
                    setState(1851);
                    ((MergeIntoTableContext) _localctx).targetAlias = tableAlias();
                    setState(1852);
                    match(USING);
                    setState(1858);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 197, _ctx)) {
                        case 1: {
                            setState(1853);
                            ((MergeIntoTableContext) _localctx).source = identifierReference();
                        }
                        break;
                        case 2: {
                            setState(1854);
                            match(LEFT_PAREN);
                            setState(1855);
                            ((MergeIntoTableContext) _localctx).sourceQuery = query();
                            setState(1856);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                    setState(1860);
                    ((MergeIntoTableContext) _localctx).sourceAlias = tableAlias();
                    setState(1861);
                    match(ON);
                    setState(1862);
                    ((MergeIntoTableContext) _localctx).mergeCondition = booleanExpression(0);
                    setState(1866);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 198, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(1863);
                                    matchedClause();
                                }
                            }
                        }
                        setState(1868);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 198, _ctx);
                    }
                    setState(1872);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 199, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(1869);
                                    notMatchedClause();
                                }
                            }
                        }
                        setState(1874);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 199, _ctx);
                    }
                    setState(1878);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == WHEN) {
                        {
                            {
                                setState(1875);
                                notMatchedBySourceClause();
                            }
                        }
                        setState(1880);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentifierReferenceContext extends ParserRuleContext {
        public TerminalNode IDENTIFIER_KW() {
            return getToken(SqlBaseParser.IDENTIFIER_KW, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public IdentifierReferenceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierReference;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIdentifierReference(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitIdentifierReference(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierReference(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdentifierReferenceContext identifierReference() throws RecognitionException {
        IdentifierReferenceContext _localctx = new IdentifierReferenceContext(_ctx, getState());
        enterRule(_localctx, 100, RULE_identifierReference);
        try {
            setState(1889);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 202, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1883);
                    match(IDENTIFIER_KW);
                    setState(1884);
                    match(LEFT_PAREN);
                    setState(1885);
                    expression();
                    setState(1886);
                    match(RIGHT_PAREN);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1888);
                    multipartIdentifier();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LimitPaginationContext extends ParserRuleContext {
        public List<TerminalNode> INTEGER_VALUE() {
            return getTokens(SqlBaseParser.INTEGER_VALUE);
        }

        public TerminalNode INTEGER_VALUE(int i) {
            return getToken(SqlBaseParser.INTEGER_VALUE, i);
        }

        public TerminalNode COMMA() {
            return getToken(SqlBaseParser.COMMA, 0);
        }

        public LimitPaginationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_limitPagination;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterLimitPagination(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLimitPagination(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLimitPagination(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LimitPaginationContext limitPagination() throws RecognitionException {
        LimitPaginationContext _localctx = new LimitPaginationContext(_ctx, getState());
        enterRule(_localctx, 102, RULE_limitPagination);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1891);
                match(INTEGER_VALUE);
                setState(1892);
                match(COMMA);
                setState(1893);
                match(INTEGER_VALUE);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QueryOrganizationContext extends ParserRuleContext {
        public SortItemContext sortItem;
        public List<SortItemContext> order = new ArrayList<SortItemContext>();
        public ExpressionContext expression;
        public List<ExpressionContext> clusterBy = new ArrayList<ExpressionContext>();
        public List<ExpressionContext> distributeBy = new ArrayList<ExpressionContext>();
        public List<SortItemContext> sort = new ArrayList<SortItemContext>();
        public ExpressionContext limit;
        public ExpressionContext offset;

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        public WindowClauseContext windowClause() {
            return getRuleContext(WindowClauseContext.class, 0);
        }

        public TerminalNode LIMIT() {
            return getToken(SqlBaseParser.LIMIT, 0);
        }

        public TerminalNode OFFSET() {
            return getToken(SqlBaseParser.OFFSET, 0);
        }

        public List<SortItemContext> sortItem() {
            return getRuleContexts(SortItemContext.class);
        }

        public SortItemContext sortItem(int i) {
            return getRuleContext(SortItemContext.class, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        public LimitPaginationContext limitPagination() {
            return getRuleContext(LimitPaginationContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public QueryOrganizationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_queryOrganization;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQueryOrganization(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQueryOrganization(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQueryOrganization(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QueryOrganizationContext queryOrganization() throws RecognitionException {
        QueryOrganizationContext _localctx = new QueryOrganizationContext(_ctx, getState());
        enterRule(_localctx, 104, RULE_queryOrganization);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1905);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 204, _ctx)) {
                    case 1: {
                        setState(1895);
                        match(ORDER);
                        setState(1896);
                        match(BY);
                        setState(1897);
                        ((QueryOrganizationContext) _localctx).sortItem = sortItem();
                        ((QueryOrganizationContext) _localctx).order.add(((QueryOrganizationContext) _localctx).sortItem);
                        setState(1902);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 203, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1898);
                                        match(COMMA);
                                        setState(1899);
                                        ((QueryOrganizationContext) _localctx).sortItem = sortItem();
                                        ((QueryOrganizationContext) _localctx).order.add(((QueryOrganizationContext) _localctx).sortItem);
                                    }
                                }
                            }
                            setState(1904);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 203, _ctx);
                        }
                    }
                    break;
                }
                setState(1917);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 206, _ctx)) {
                    case 1: {
                        setState(1907);
                        match(CLUSTER);
                        setState(1908);
                        match(BY);
                        setState(1909);
                        ((QueryOrganizationContext) _localctx).expression = expression();
                        ((QueryOrganizationContext) _localctx).clusterBy.add(((QueryOrganizationContext) _localctx).expression);
                        setState(1914);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 205, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1910);
                                        match(COMMA);
                                        setState(1911);
                                        ((QueryOrganizationContext) _localctx).expression = expression();
                                        ((QueryOrganizationContext) _localctx).clusterBy.add(((QueryOrganizationContext) _localctx).expression);
                                    }
                                }
                            }
                            setState(1916);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 205, _ctx);
                        }
                    }
                    break;
                }
                setState(1929);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 208, _ctx)) {
                    case 1: {
                        setState(1919);
                        match(DISTRIBUTE);
                        setState(1920);
                        match(BY);
                        setState(1921);
                        ((QueryOrganizationContext) _localctx).expression = expression();
                        ((QueryOrganizationContext) _localctx).distributeBy.add(((QueryOrganizationContext) _localctx).expression);
                        setState(1926);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 207, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1922);
                                        match(COMMA);
                                        setState(1923);
                                        ((QueryOrganizationContext) _localctx).expression = expression();
                                        ((QueryOrganizationContext) _localctx).distributeBy.add(((QueryOrganizationContext) _localctx).expression);
                                    }
                                }
                            }
                            setState(1928);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 207, _ctx);
                        }
                    }
                    break;
                }
                setState(1941);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 210, _ctx)) {
                    case 1: {
                        setState(1931);
                        match(SORT);
                        setState(1932);
                        match(BY);
                        setState(1933);
                        ((QueryOrganizationContext) _localctx).sortItem = sortItem();
                        ((QueryOrganizationContext) _localctx).sort.add(((QueryOrganizationContext) _localctx).sortItem);
                        setState(1938);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 209, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1934);
                                        match(COMMA);
                                        setState(1935);
                                        ((QueryOrganizationContext) _localctx).sortItem = sortItem();
                                        ((QueryOrganizationContext) _localctx).sort.add(((QueryOrganizationContext) _localctx).sortItem);
                                    }
                                }
                            }
                            setState(1940);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 209, _ctx);
                        }
                    }
                    break;
                }
                setState(1944);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 211, _ctx)) {
                    case 1: {
                        setState(1943);
                        windowClause();
                    }
                    break;
                }
                setState(1952);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 213, _ctx)) {
                    case 1: {
                        setState(1946);
                        match(LIMIT);
                        setState(1950);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 212, _ctx)) {
                            case 1: {
                                setState(1947);
                                match(ALL);
                            }
                            break;
                            case 2: {
                                setState(1948);
                                ((QueryOrganizationContext) _localctx).limit = expression();
                            }
                            break;
                            case 3: {
                                setState(1949);
                                limitPagination();
                            }
                            break;
                        }
                    }
                    break;
                }
                setState(1956);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 214, _ctx)) {
                    case 1: {
                        setState(1954);
                        match(OFFSET);
                        setState(1955);
                        ((QueryOrganizationContext) _localctx).offset = expression();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MultiInsertQueryBodyContext extends ParserRuleContext {
        public InsertIntoContext insertInto() {
            return getRuleContext(InsertIntoContext.class, 0);
        }

        public FromStatementBodyContext fromStatementBody() {
            return getRuleContext(FromStatementBodyContext.class, 0);
        }

        public MultiInsertQueryBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multiInsertQueryBody;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultiInsertQueryBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultiInsertQueryBody(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultiInsertQueryBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MultiInsertQueryBodyContext multiInsertQueryBody() throws RecognitionException {
        MultiInsertQueryBodyContext _localctx = new MultiInsertQueryBodyContext(_ctx, getState());
        enterRule(_localctx, 106, RULE_multiInsertQueryBody);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1958);
                insertInto();
                setState(1959);
                fromStatementBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QueryTermContext extends ParserRuleContext {
        public QueryTermContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_queryTerm;
        }

        public QueryTermContext() {
        }

        public void copyFrom(QueryTermContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QueryTermDefaultContext extends QueryTermContext {
        public QueryPrimaryContext queryPrimary() {
            return getRuleContext(QueryPrimaryContext.class, 0);
        }

        public QueryTermDefaultContext(QueryTermContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQueryTermDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQueryTermDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQueryTermDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetOperationContext extends QueryTermContext {
        public QueryTermContext left;
        public Token operator;
        public QueryTermContext right;

        public List<QueryTermContext> queryTerm() {
            return getRuleContexts(QueryTermContext.class);
        }

        public QueryTermContext queryTerm(int i) {
            return getRuleContext(QueryTermContext.class, i);
        }

        public TerminalNode INTERSECT() {
            return getToken(SqlBaseParser.INTERSECT, 0);
        }

        public TerminalNode UNION() {
            return getToken(SqlBaseParser.UNION, 0);
        }

        public TerminalNode EXCEPT() {
            return getToken(SqlBaseParser.EXCEPT, 0);
        }

        public TerminalNode SETMINUS() {
            return getToken(SqlBaseParser.SETMINUS, 0);
        }

        public SetQuantifierContext setQuantifier() {
            return getRuleContext(SetQuantifierContext.class, 0);
        }

        public SetOperationContext(QueryTermContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetOperation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetOperation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetOperation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QueryTermContext queryTerm() throws RecognitionException {
        return queryTerm(0);
    }

    private QueryTermContext queryTerm(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        QueryTermContext _localctx = new QueryTermContext(_ctx, _parentState);
        QueryTermContext _prevctx = _localctx;
        int _startState = 108;
        enterRecursionRule(_localctx, 108, RULE_queryTerm, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                {
                    _localctx = new QueryTermDefaultContext(_localctx);
                    _ctx = _localctx;
                    _prevctx = _localctx;

                    setState(1962);
                    queryPrimary();
                }
                _ctx.stop = _input.LT(-1);
                setState(1987);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 219, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(1985);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 218, _ctx)) {
                                case 1: {
                                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                                    ((SetOperationContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
                                    setState(1964);
                                    if (!(precpred(_ctx, 3)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                                    setState(1965);
                                    if (!(legacy_setops_precedence_enabled))
                                        throw new FailedPredicateException(this, "legacy_setops_precedence_enabled");
                                    setState(1966);
                                    ((SetOperationContext) _localctx).operator = _input.LT(1);
                                    _la = _input.LA(1);
                                    if (!(_la == EXCEPT || _la == INTERSECT || _la == SETMINUS || _la == UNION)) {
                                        ((SetOperationContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1968);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == ALL || _la == DISTINCT) {
                                        {
                                            setState(1967);
                                            setQuantifier();
                                        }
                                    }

                                    setState(1970);
                                    ((SetOperationContext) _localctx).right = queryTerm(4);
                                }
                                break;
                                case 2: {
                                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                                    ((SetOperationContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
                                    setState(1971);
                                    if (!(precpred(_ctx, 2)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                                    setState(1972);
                                    if (!(!legacy_setops_precedence_enabled))
                                        throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
                                    setState(1973);
                                    ((SetOperationContext) _localctx).operator = match(INTERSECT);
                                    setState(1975);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == ALL || _la == DISTINCT) {
                                        {
                                            setState(1974);
                                            setQuantifier();
                                        }
                                    }

                                    setState(1977);
                                    ((SetOperationContext) _localctx).right = queryTerm(3);
                                }
                                break;
                                case 3: {
                                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                                    ((SetOperationContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
                                    setState(1978);
                                    if (!(precpred(_ctx, 1)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                                    setState(1979);
                                    if (!(!legacy_setops_precedence_enabled))
                                        throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
                                    setState(1980);
                                    ((SetOperationContext) _localctx).operator = _input.LT(1);
                                    _la = _input.LA(1);
                                    if (!(_la == EXCEPT || _la == SETMINUS || _la == UNION)) {
                                        ((SetOperationContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1982);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == ALL || _la == DISTINCT) {
                                        {
                                            setState(1981);
                                            setQuantifier();
                                        }
                                    }

                                    setState(1984);
                                    ((SetOperationContext) _localctx).right = queryTerm(2);
                                }
                                break;
                            }
                        }
                    }
                    setState(1989);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 219, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QueryPrimaryContext extends ParserRuleContext {
        public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_queryPrimary;
        }

        public QueryPrimaryContext() {
        }

        public void copyFrom(QueryPrimaryContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SubqueryContext extends QueryPrimaryContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public SubqueryContext(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSubquery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSubquery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSubquery(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QueryPrimaryDefaultContext extends QueryPrimaryContext {
        public QuerySpecificationContext querySpecification() {
            return getRuleContext(QuerySpecificationContext.class, 0);
        }

        public QueryPrimaryDefaultContext(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQueryPrimaryDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQueryPrimaryDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQueryPrimaryDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InlineTableDefault1Context extends QueryPrimaryContext {
        public InlineTableContext inlineTable() {
            return getRuleContext(InlineTableContext.class, 0);
        }

        public InlineTableDefault1Context(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInlineTableDefault1(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInlineTableDefault1(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInlineTableDefault1(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FromStmtContext extends QueryPrimaryContext {
        public FromStatementContext fromStatement() {
            return getRuleContext(FromStatementContext.class, 0);
        }

        public FromStmtContext(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFromStmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFromStmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFromStmt(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableContext extends QueryPrimaryContext {
        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TableContext(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QueryPrimaryContext queryPrimary() throws RecognitionException {
        QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
        enterRule(_localctx, 110, RULE_queryPrimary);
        try {
            setState(1999);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case MAP:
                case REDUCE:
                case SELECT:
                    _localctx = new QueryPrimaryDefaultContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1990);
                    querySpecification();
                }
                break;
                case FROM:
                    _localctx = new FromStmtContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1991);
                    fromStatement();
                }
                break;
                case TABLE:
                    _localctx = new TableContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1992);
                    match(TABLE);
                    setState(1993);
                    identifierReference();
                }
                break;
                case VALUES:
                    _localctx = new InlineTableDefault1Context(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1994);
                    inlineTable();
                }
                break;
                case LEFT_PAREN:
                    _localctx = new SubqueryContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1995);
                    match(LEFT_PAREN);
                    setState(1996);
                    query();
                    setState(1997);
                    match(RIGHT_PAREN);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SortItemContext extends ParserRuleContext {
        public Token ordering;
        public Token nullOrder;

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode ASC() {
            return getToken(SqlBaseParser.ASC, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode LAST() {
            return getToken(SqlBaseParser.LAST, 0);
        }

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public SortItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sortItem;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSortItem(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSortItem(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSortItem(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SortItemContext sortItem() throws RecognitionException {
        SortItemContext _localctx = new SortItemContext(_ctx, getState());
        enterRule(_localctx, 112, RULE_sortItem);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2001);
                expression();
                setState(2003);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 221, _ctx)) {
                    case 1: {
                        setState(2002);
                        ((SortItemContext) _localctx).ordering = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == ASC || _la == DESC)) {
                            ((SortItemContext) _localctx).ordering = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                }
                setState(2007);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 222, _ctx)) {
                    case 1: {
                        setState(2005);
                        match(NULLS);
                        setState(2006);
                        ((SortItemContext) _localctx).nullOrder = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == FIRST || _la == LAST)) {
                            ((SortItemContext) _localctx).nullOrder = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FromStatementContext extends ParserRuleContext {
        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<FromStatementBodyContext> fromStatementBody() {
            return getRuleContexts(FromStatementBodyContext.class);
        }

        public FromStatementBodyContext fromStatementBody(int i) {
            return getRuleContext(FromStatementBodyContext.class, i);
        }

        public FromStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFromStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFromStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFromStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FromStatementContext fromStatement() throws RecognitionException {
        FromStatementContext _localctx = new FromStatementContext(_ctx, getState());
        enterRule(_localctx, 114, RULE_fromStatement);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2009);
                fromClause();
                setState(2011);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1: {
                            {
                                setState(2010);
                                fromStatementBody();
                            }
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(2013);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 223, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FromStatementBodyContext extends ParserRuleContext {
        public TransformClauseContext transformClause() {
            return getRuleContext(TransformClauseContext.class, 0);
        }

        public QueryOrganizationContext queryOrganization() {
            return getRuleContext(QueryOrganizationContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public SelectClauseContext selectClause() {
            return getRuleContext(SelectClauseContext.class, 0);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public AggregationClauseContext aggregationClause() {
            return getRuleContext(AggregationClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return getRuleContext(HavingClauseContext.class, 0);
        }

        public WindowClauseContext windowClause() {
            return getRuleContext(WindowClauseContext.class, 0);
        }

        public FromStatementBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromStatementBody;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFromStatementBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFromStatementBody(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFromStatementBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FromStatementBodyContext fromStatementBody() throws RecognitionException {
        FromStatementBodyContext _localctx = new FromStatementBodyContext(_ctx, getState());
        enterRule(_localctx, 116, RULE_fromStatementBody);
        try {
            int _alt;
            setState(2042);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 230, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2015);
                    transformClause();
                    setState(2017);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 224, _ctx)) {
                        case 1: {
                            setState(2016);
                            whereClause();
                        }
                        break;
                    }
                    setState(2019);
                    queryOrganization();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2021);
                    selectClause();
                    setState(2025);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 225, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(2022);
                                    lateralView();
                                }
                            }
                        }
                        setState(2027);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 225, _ctx);
                    }
                    setState(2029);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 226, _ctx)) {
                        case 1: {
                            setState(2028);
                            whereClause();
                        }
                        break;
                    }
                    setState(2032);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 227, _ctx)) {
                        case 1: {
                            setState(2031);
                            aggregationClause();
                        }
                        break;
                    }
                    setState(2035);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 228, _ctx)) {
                        case 1: {
                            setState(2034);
                            havingClause();
                        }
                        break;
                    }
                    setState(2038);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 229, _ctx)) {
                        case 1: {
                            setState(2037);
                            windowClause();
                        }
                        break;
                    }
                    setState(2040);
                    queryOrganization();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QuerySpecificationContext extends ParserRuleContext {
        public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_querySpecification;
        }

        public QuerySpecificationContext() {
        }

        public void copyFrom(QuerySpecificationContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RegularQuerySpecificationContext extends QuerySpecificationContext {
        public SelectClauseContext selectClause() {
            return getRuleContext(SelectClauseContext.class, 0);
        }

        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public AggregationClauseContext aggregationClause() {
            return getRuleContext(AggregationClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return getRuleContext(HavingClauseContext.class, 0);
        }

        public WindowClauseContext windowClause() {
            return getRuleContext(WindowClauseContext.class, 0);
        }

        public RegularQuerySpecificationContext(QuerySpecificationContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRegularQuerySpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRegularQuerySpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRegularQuerySpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TransformQuerySpecificationContext extends QuerySpecificationContext {
        public TransformClauseContext transformClause() {
            return getRuleContext(TransformClauseContext.class, 0);
        }

        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public AggregationClauseContext aggregationClause() {
            return getRuleContext(AggregationClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return getRuleContext(HavingClauseContext.class, 0);
        }

        public WindowClauseContext windowClause() {
            return getRuleContext(WindowClauseContext.class, 0);
        }

        public TransformQuerySpecificationContext(QuerySpecificationContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTransformQuerySpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitTransformQuerySpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTransformQuerySpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QuerySpecificationContext querySpecification() throws RecognitionException {
        QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
        enterRule(_localctx, 118, RULE_querySpecification);
        try {
            int _alt;
            setState(2088);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 243, _ctx)) {
                case 1:
                    _localctx = new TransformQuerySpecificationContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2044);
                    transformClause();
                    setState(2046);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 231, _ctx)) {
                        case 1: {
                            setState(2045);
                            fromClause();
                        }
                        break;
                    }
                    setState(2051);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 232, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(2048);
                                    lateralView();
                                }
                            }
                        }
                        setState(2053);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 232, _ctx);
                    }
                    setState(2055);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 233, _ctx)) {
                        case 1: {
                            setState(2054);
                            whereClause();
                        }
                        break;
                    }
                    setState(2058);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 234, _ctx)) {
                        case 1: {
                            setState(2057);
                            aggregationClause();
                        }
                        break;
                    }
                    setState(2061);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 235, _ctx)) {
                        case 1: {
                            setState(2060);
                            havingClause();
                        }
                        break;
                    }
                    setState(2064);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 236, _ctx)) {
                        case 1: {
                            setState(2063);
                            windowClause();
                        }
                        break;
                    }
                }
                break;
                case 2:
                    _localctx = new RegularQuerySpecificationContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2066);
                    selectClause();
                    setState(2068);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 237, _ctx)) {
                        case 1: {
                            setState(2067);
                            fromClause();
                        }
                        break;
                    }
                    setState(2073);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 238, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(2070);
                                    lateralView();
                                }
                            }
                        }
                        setState(2075);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 238, _ctx);
                    }
                    setState(2077);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 239, _ctx)) {
                        case 1: {
                            setState(2076);
                            whereClause();
                        }
                        break;
                    }
                    setState(2080);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 240, _ctx)) {
                        case 1: {
                            setState(2079);
                            aggregationClause();
                        }
                        break;
                    }
                    setState(2083);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 241, _ctx)) {
                        case 1: {
                            setState(2082);
                            havingClause();
                        }
                        break;
                    }
                    setState(2086);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 242, _ctx)) {
                        case 1: {
                            setState(2085);
                            windowClause();
                        }
                        break;
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TransformClauseContext extends ParserRuleContext {
        public Token kind;
        public RowFormatContext inRowFormat;
        public StringLitContext recordWriter;
        public StringLitContext script;
        public RowFormatContext outRowFormat;
        public StringLitContext recordReader;

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public List<StringLitContext> stringLit() {
            return getRuleContexts(StringLitContext.class);
        }

        public StringLitContext stringLit(int i) {
            return getRuleContext(StringLitContext.class, i);
        }

        public TerminalNode SELECT() {
            return getToken(SqlBaseParser.SELECT, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public ExpressionSeqContext expressionSeq() {
            return getRuleContext(ExpressionSeqContext.class, 0);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode TRANSFORM() {
            return getToken(SqlBaseParser.TRANSFORM, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode REDUCE() {
            return getToken(SqlBaseParser.REDUCE, 0);
        }

        public TerminalNode RECORDWRITER() {
            return getToken(SqlBaseParser.RECORDWRITER, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode RECORDREADER() {
            return getToken(SqlBaseParser.RECORDREADER, 0);
        }

        public List<RowFormatContext> rowFormat() {
            return getRuleContexts(RowFormatContext.class);
        }

        public RowFormatContext rowFormat(int i) {
            return getRuleContext(RowFormatContext.class, i);
        }

        public SetQuantifierContext setQuantifier() {
            return getRuleContext(SetQuantifierContext.class, 0);
        }

        public IdentifierSeqContext identifierSeq() {
            return getRuleContext(IdentifierSeqContext.class, 0);
        }

        public ColTypeListContext colTypeList() {
            return getRuleContext(ColTypeListContext.class, 0);
        }

        public TransformClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_transformClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTransformClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTransformClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTransformClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TransformClauseContext transformClause() throws RecognitionException {
        TransformClauseContext _localctx = new TransformClauseContext(_ctx, getState());
        enterRule(_localctx, 120, RULE_transformClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2109);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case SELECT: {
                        setState(2090);
                        match(SELECT);
                        setState(2091);
                        ((TransformClauseContext) _localctx).kind = match(TRANSFORM);
                        setState(2092);
                        match(LEFT_PAREN);
                        setState(2094);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 244, _ctx)) {
                            case 1: {
                                setState(2093);
                                setQuantifier();
                            }
                            break;
                        }
                        setState(2096);
                        expressionSeq();
                        setState(2097);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case MAP: {
                        setState(2099);
                        ((TransformClauseContext) _localctx).kind = match(MAP);
                        setState(2101);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 245, _ctx)) {
                            case 1: {
                                setState(2100);
                                setQuantifier();
                            }
                            break;
                        }
                        setState(2103);
                        expressionSeq();
                    }
                    break;
                    case REDUCE: {
                        setState(2104);
                        ((TransformClauseContext) _localctx).kind = match(REDUCE);
                        setState(2106);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 246, _ctx)) {
                            case 1: {
                                setState(2105);
                                setQuantifier();
                            }
                            break;
                        }
                        setState(2108);
                        expressionSeq();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2112);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == ROW) {
                    {
                        setState(2111);
                        ((TransformClauseContext) _localctx).inRowFormat = rowFormat();
                    }
                }

                setState(2116);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == RECORDWRITER) {
                    {
                        setState(2114);
                        match(RECORDWRITER);
                        setState(2115);
                        ((TransformClauseContext) _localctx).recordWriter = stringLit();
                    }
                }

                setState(2118);
                match(USING);
                setState(2119);
                ((TransformClauseContext) _localctx).script = stringLit();
                setState(2132);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 252, _ctx)) {
                    case 1: {
                        setState(2120);
                        match(AS);
                        setState(2130);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 251, _ctx)) {
                            case 1: {
                                setState(2121);
                                identifierSeq();
                            }
                            break;
                            case 2: {
                                setState(2122);
                                colTypeList();
                            }
                            break;
                            case 3: {
                                {
                                    setState(2123);
                                    match(LEFT_PAREN);
                                    setState(2126);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 250, _ctx)) {
                                        case 1: {
                                            setState(2124);
                                            identifierSeq();
                                        }
                                        break;
                                        case 2: {
                                            setState(2125);
                                            colTypeList();
                                        }
                                        break;
                                    }
                                    setState(2128);
                                    match(RIGHT_PAREN);
                                }
                            }
                            break;
                        }
                    }
                    break;
                }
                setState(2135);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 253, _ctx)) {
                    case 1: {
                        setState(2134);
                        ((TransformClauseContext) _localctx).outRowFormat = rowFormat();
                    }
                    break;
                }
                setState(2139);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 254, _ctx)) {
                    case 1: {
                        setState(2137);
                        match(RECORDREADER);
                        setState(2138);
                        ((TransformClauseContext) _localctx).recordReader = stringLit();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectClauseContext extends ParserRuleContext {
        public HintContext hint;
        public List<HintContext> hints = new ArrayList<HintContext>();

        public TerminalNode SELECT() {
            return getToken(SqlBaseParser.SELECT, 0);
        }

        public NamedExpressionSeqContext namedExpressionSeq() {
            return getRuleContext(NamedExpressionSeqContext.class, 0);
        }

        public SetQuantifierContext setQuantifier() {
            return getRuleContext(SetQuantifierContext.class, 0);
        }

        public List<HintContext> hint() {
            return getRuleContexts(HintContext.class);
        }

        public HintContext hint(int i) {
            return getRuleContext(HintContext.class, i);
        }

        public SelectClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSelectClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSelectClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSelectClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectClauseContext selectClause() throws RecognitionException {
        SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
        enterRule(_localctx, 122, RULE_selectClause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2141);
                match(SELECT);
                setState(2145);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 255, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2142);
                                ((SelectClauseContext) _localctx).hint = hint();
                                ((SelectClauseContext) _localctx).hints.add(((SelectClauseContext) _localctx).hint);
                            }
                        }
                    }
                    setState(2147);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 255, _ctx);
                }
                setState(2149);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 256, _ctx)) {
                    case 1: {
                        setState(2148);
                        setQuantifier();
                    }
                    break;
                }
                setState(2151);
                namedExpressionSeq();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetClauseContext extends ParserRuleContext {
        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public AssignmentListContext assignmentList() {
            return getRuleContext(AssignmentListContext.class, 0);
        }

        public SetClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SetClauseContext setClause() throws RecognitionException {
        SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
        enterRule(_localctx, 124, RULE_setClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2153);
                match(SET);
                setState(2154);
                assignmentList();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MatchedClauseContext extends ParserRuleContext {
        public BooleanExpressionContext matchedCond;

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public MatchedActionContext matchedAction() {
            return getRuleContext(MatchedActionContext.class, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public MatchedClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_matchedClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterMatchedClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitMatchedClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMatchedClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MatchedClauseContext matchedClause() throws RecognitionException {
        MatchedClauseContext _localctx = new MatchedClauseContext(_ctx, getState());
        enterRule(_localctx, 126, RULE_matchedClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2156);
                match(WHEN);
                setState(2157);
                match(MATCHED);
                setState(2160);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AND) {
                    {
                        setState(2158);
                        match(AND);
                        setState(2159);
                        ((MatchedClauseContext) _localctx).matchedCond = booleanExpression(0);
                    }
                }

                setState(2162);
                match(THEN);
                setState(2163);
                matchedAction();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NotMatchedClauseContext extends ParserRuleContext {
        public BooleanExpressionContext notMatchedCond;

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public NotMatchedActionContext notMatchedAction() {
            return getRuleContext(NotMatchedActionContext.class, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode TARGET() {
            return getToken(SqlBaseParser.TARGET, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public NotMatchedClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_notMatchedClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNotMatchedClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNotMatchedClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNotMatchedClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NotMatchedClauseContext notMatchedClause() throws RecognitionException {
        NotMatchedClauseContext _localctx = new NotMatchedClauseContext(_ctx, getState());
        enterRule(_localctx, 128, RULE_notMatchedClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2165);
                match(WHEN);
                setState(2166);
                match(NOT);
                setState(2167);
                match(MATCHED);
                setState(2170);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == BY) {
                    {
                        setState(2168);
                        match(BY);
                        setState(2169);
                        match(TARGET);
                    }
                }

                setState(2174);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AND) {
                    {
                        setState(2172);
                        match(AND);
                        setState(2173);
                        ((NotMatchedClauseContext) _localctx).notMatchedCond = booleanExpression(0);
                    }
                }

                setState(2176);
                match(THEN);
                setState(2177);
                notMatchedAction();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NotMatchedBySourceClauseContext extends ParserRuleContext {
        public BooleanExpressionContext notMatchedBySourceCond;

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode SOURCE() {
            return getToken(SqlBaseParser.SOURCE, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public NotMatchedBySourceActionContext notMatchedBySourceAction() {
            return getRuleContext(NotMatchedBySourceActionContext.class, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public NotMatchedBySourceClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_notMatchedBySourceClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNotMatchedBySourceClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNotMatchedBySourceClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNotMatchedBySourceClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NotMatchedBySourceClauseContext notMatchedBySourceClause() throws RecognitionException {
        NotMatchedBySourceClauseContext _localctx = new NotMatchedBySourceClauseContext(_ctx, getState());
        enterRule(_localctx, 130, RULE_notMatchedBySourceClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2179);
                match(WHEN);
                setState(2180);
                match(NOT);
                setState(2181);
                match(MATCHED);
                setState(2182);
                match(BY);
                setState(2183);
                match(SOURCE);
                setState(2186);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AND) {
                    {
                        setState(2184);
                        match(AND);
                        setState(2185);
                        ((NotMatchedBySourceClauseContext) _localctx).notMatchedBySourceCond = booleanExpression(0);
                    }
                }

                setState(2188);
                match(THEN);
                setState(2189);
                notMatchedBySourceAction();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MatchedActionContext extends ParserRuleContext {
        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public AssignmentListContext assignmentList() {
            return getRuleContext(AssignmentListContext.class, 0);
        }

        public MatchedActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_matchedAction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterMatchedAction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitMatchedAction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMatchedAction(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MatchedActionContext matchedAction() throws RecognitionException {
        MatchedActionContext _localctx = new MatchedActionContext(_ctx, getState());
        enterRule(_localctx, 132, RULE_matchedAction);
        try {
            setState(2198);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 261, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2191);
                    match(DELETE);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2192);
                    match(UPDATE);
                    setState(2193);
                    match(SET);
                    setState(2194);
                    match(ASTERISK);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2195);
                    match(UPDATE);
                    setState(2196);
                    match(SET);
                    setState(2197);
                    assignmentList();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NotMatchedActionContext extends ParserRuleContext {
        public MultipartIdentifierListContext columns;

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode VALUES() {
            return getToken(SqlBaseParser.VALUES, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public MultipartIdentifierListContext multipartIdentifierList() {
            return getRuleContext(MultipartIdentifierListContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public NotMatchedActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_notMatchedAction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNotMatchedAction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNotMatchedAction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNotMatchedAction(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NotMatchedActionContext notMatchedAction() throws RecognitionException {
        NotMatchedActionContext _localctx = new NotMatchedActionContext(_ctx, getState());
        enterRule(_localctx, 134, RULE_notMatchedAction);
        int _la;
        try {
            setState(2218);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 263, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2200);
                    match(INSERT);
                    setState(2201);
                    match(ASTERISK);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2202);
                    match(INSERT);
                    setState(2203);
                    match(LEFT_PAREN);
                    setState(2204);
                    ((NotMatchedActionContext) _localctx).columns = multipartIdentifierList();
                    setState(2205);
                    match(RIGHT_PAREN);
                    setState(2206);
                    match(VALUES);
                    setState(2207);
                    match(LEFT_PAREN);
                    setState(2208);
                    expression();
                    setState(2213);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2209);
                                match(COMMA);
                                setState(2210);
                                expression();
                            }
                        }
                        setState(2215);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2216);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NotMatchedBySourceActionContext extends ParserRuleContext {
        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public AssignmentListContext assignmentList() {
            return getRuleContext(AssignmentListContext.class, 0);
        }

        public NotMatchedBySourceActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_notMatchedBySourceAction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNotMatchedBySourceAction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNotMatchedBySourceAction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNotMatchedBySourceAction(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NotMatchedBySourceActionContext notMatchedBySourceAction() throws RecognitionException {
        NotMatchedBySourceActionContext _localctx = new NotMatchedBySourceActionContext(_ctx, getState());
        enterRule(_localctx, 136, RULE_notMatchedBySourceAction);
        try {
            setState(2224);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case DELETE:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2220);
                    match(DELETE);
                }
                break;
                case UPDATE:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2221);
                    match(UPDATE);
                    setState(2222);
                    match(SET);
                    setState(2223);
                    assignmentList();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExceptClauseContext extends ParserRuleContext {
        public MultipartIdentifierListContext exceptCols;

        public TerminalNode EXCEPT() {
            return getToken(SqlBaseParser.EXCEPT, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public MultipartIdentifierListContext multipartIdentifierList() {
            return getRuleContext(MultipartIdentifierListContext.class, 0);
        }

        public ExceptClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_exceptClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExceptClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExceptClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExceptClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExceptClauseContext exceptClause() throws RecognitionException {
        ExceptClauseContext _localctx = new ExceptClauseContext(_ctx, getState());
        enterRule(_localctx, 138, RULE_exceptClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2226);
                match(EXCEPT);
                setState(2227);
                match(LEFT_PAREN);
                setState(2228);
                ((ExceptClauseContext) _localctx).exceptCols = multipartIdentifierList();
                setState(2229);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AssignmentListContext extends ParserRuleContext {
        public List<AssignmentContext> assignment() {
            return getRuleContexts(AssignmentContext.class);
        }

        public AssignmentContext assignment(int i) {
            return getRuleContext(AssignmentContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public AssignmentListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignmentList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAssignmentList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAssignmentList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAssignmentList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AssignmentListContext assignmentList() throws RecognitionException {
        AssignmentListContext _localctx = new AssignmentListContext(_ctx, getState());
        enterRule(_localctx, 140, RULE_assignmentList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2231);
                assignment();
                setState(2236);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2232);
                            match(COMMA);
                            setState(2233);
                            assignment();
                        }
                    }
                    setState(2238);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AssignmentContext extends ParserRuleContext {
        public MultipartIdentifierContext key;
        public ExpressionContext value;

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public AssignmentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAssignment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAssignment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAssignment(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AssignmentContext assignment() throws RecognitionException {
        AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
        enterRule(_localctx, 142, RULE_assignment);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2239);
                ((AssignmentContext) _localctx).key = multipartIdentifier();
                setState(2240);
                match(EQ);
                setState(2241);
                ((AssignmentContext) _localctx).value = expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WhereClauseContext extends ParserRuleContext {
        public TerminalNode WHERE() {
            return getToken(SqlBaseParser.WHERE, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public WhereClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whereClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWhereClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWhereClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWhereClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WhereClauseContext whereClause() throws RecognitionException {
        WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
        enterRule(_localctx, 144, RULE_whereClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2243);
                match(WHERE);
                setState(2244);
                booleanExpression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HavingClauseContext extends ParserRuleContext {
        public TerminalNode HAVING() {
            return getToken(SqlBaseParser.HAVING, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public HavingClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_havingClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterHavingClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitHavingClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHavingClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final HavingClauseContext havingClause() throws RecognitionException {
        HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
        enterRule(_localctx, 146, RULE_havingClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2246);
                match(HAVING);
                setState(2247);
                booleanExpression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HintContext extends ParserRuleContext {
        public HintStatementContext hintStatement;
        public List<HintStatementContext> hintStatements = new ArrayList<HintStatementContext>();

        public TerminalNode HENT_START() {
            return getToken(SqlBaseParser.HENT_START, 0);
        }

        public TerminalNode HENT_END() {
            return getToken(SqlBaseParser.HENT_END, 0);
        }

        public List<HintStatementContext> hintStatement() {
            return getRuleContexts(HintStatementContext.class);
        }

        public HintStatementContext hintStatement(int i) {
            return getRuleContext(HintStatementContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public HintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_hint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterHint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitHint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final HintContext hint() throws RecognitionException {
        HintContext _localctx = new HintContext(_ctx, getState());
        enterRule(_localctx, 148, RULE_hint);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2249);
                match(HENT_START);
                setState(2250);
                ((HintContext) _localctx).hintStatement = hintStatement();
                ((HintContext) _localctx).hintStatements.add(((HintContext) _localctx).hintStatement);
                setState(2257);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 267, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2252);
                                _errHandler.sync(this);
                                switch (getInterpreter().adaptivePredict(_input, 266, _ctx)) {
                                    case 1: {
                                        setState(2251);
                                        match(COMMA);
                                    }
                                    break;
                                }
                                setState(2254);
                                ((HintContext) _localctx).hintStatement = hintStatement();
                                ((HintContext) _localctx).hintStatements.add(((HintContext) _localctx).hintStatement);
                            }
                        }
                    }
                    setState(2259);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 267, _ctx);
                }
                setState(2260);
                match(HENT_END);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HintStatementContext extends ParserRuleContext {
        public IdentifierContext hintName;
        public PrimaryExpressionContext primaryExpression;
        public List<PrimaryExpressionContext> parameters = new ArrayList<PrimaryExpressionContext>();

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<PrimaryExpressionContext> primaryExpression() {
            return getRuleContexts(PrimaryExpressionContext.class);
        }

        public PrimaryExpressionContext primaryExpression(int i) {
            return getRuleContext(PrimaryExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public HintStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_hintStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterHintStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitHintStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHintStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final HintStatementContext hintStatement() throws RecognitionException {
        HintStatementContext _localctx = new HintStatementContext(_ctx, getState());
        enterRule(_localctx, 150, RULE_hintStatement);
        int _la;
        try {
            setState(2275);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 269, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2262);
                    ((HintStatementContext) _localctx).hintName = identifier();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2263);
                    ((HintStatementContext) _localctx).hintName = identifier();
                    setState(2264);
                    match(LEFT_PAREN);
                    setState(2265);
                    ((HintStatementContext) _localctx).primaryExpression = primaryExpression(0);
                    ((HintStatementContext) _localctx).parameters.add(((HintStatementContext) _localctx).primaryExpression);
                    setState(2270);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2266);
                                match(COMMA);
                                setState(2267);
                                ((HintStatementContext) _localctx).primaryExpression = primaryExpression(0);
                                ((HintStatementContext) _localctx).parameters.add(((HintStatementContext) _localctx).primaryExpression);
                            }
                        }
                        setState(2272);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2273);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FromClauseContext extends ParserRuleContext {
        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public List<RelationContext> relation() {
            return getRuleContexts(RelationContext.class);
        }

        public RelationContext relation(int i) {
            return getRuleContext(RelationContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public PivotClauseContext pivotClause() {
            return getRuleContext(PivotClauseContext.class, 0);
        }

        public UnpivotClauseContext unpivotClause() {
            return getRuleContext(UnpivotClauseContext.class, 0);
        }

        public FromClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFromClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFromClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFromClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FromClauseContext fromClause() throws RecognitionException {
        FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
        enterRule(_localctx, 152, RULE_fromClause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2277);
                match(FROM);
                setState(2278);
                relation();
                setState(2283);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 270, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2279);
                                match(COMMA);
                                setState(2280);
                                relation();
                            }
                        }
                    }
                    setState(2285);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 270, _ctx);
                }
                setState(2289);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 271, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2286);
                                lateralView();
                            }
                        }
                    }
                    setState(2291);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 271, _ctx);
                }
                setState(2293);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 272, _ctx)) {
                    case 1: {
                        setState(2292);
                        pivotClause();
                    }
                    break;
                }
                setState(2296);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 273, _ctx)) {
                    case 1: {
                        setState(2295);
                        unpivotClause();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TemporalClauseContext extends ParserRuleContext {
        public ValueExpressionContext timestamp;

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode OF() {
            return getToken(SqlBaseParser.OF, 0);
        }

        public VersionContext version() {
            return getRuleContext(VersionContext.class, 0);
        }

        public TerminalNode SYSTEM_VERSION() {
            return getToken(SqlBaseParser.SYSTEM_VERSION, 0);
        }

        public TerminalNode VERSION() {
            return getToken(SqlBaseParser.VERSION, 0);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public TerminalNode SYSTEM_TIME() {
            return getToken(SqlBaseParser.SYSTEM_TIME, 0);
        }

        public TerminalNode TIMESTAMP() {
            return getToken(SqlBaseParser.TIMESTAMP, 0);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public TemporalClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_temporalClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTemporalClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTemporalClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTemporalClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TemporalClauseContext temporalClause() throws RecognitionException {
        TemporalClauseContext _localctx = new TemporalClauseContext(_ctx, getState());
        enterRule(_localctx, 154, RULE_temporalClause);
        int _la;
        try {
            setState(2312);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 276, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2299);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FOR) {
                        {
                            setState(2298);
                            match(FOR);
                        }
                    }

                    setState(2301);
                    _la = _input.LA(1);
                    if (!(_la == SYSTEM_VERSION || _la == VERSION)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2302);
                    match(AS);
                    setState(2303);
                    match(OF);
                    setState(2304);
                    version();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2306);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FOR) {
                        {
                            setState(2305);
                            match(FOR);
                        }
                    }

                    setState(2308);
                    _la = _input.LA(1);
                    if (!(_la == SYSTEM_TIME || _la == TIMESTAMP)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2309);
                    match(AS);
                    setState(2310);
                    match(OF);
                    setState(2311);
                    ((TemporalClauseContext) _localctx).timestamp = valueExpression(0);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AggregationClauseContext extends ParserRuleContext {
        public GroupByClauseContext groupByClause;
        public List<GroupByClauseContext> groupingExpressionsWithGroupingAnalytics = new ArrayList<GroupByClauseContext>();
        public ExpressionContext expression;
        public List<ExpressionContext> groupingExpressions = new ArrayList<ExpressionContext>();
        public Token kind;

        public TerminalNode GROUP() {
            return getToken(SqlBaseParser.GROUP, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public List<GroupByClauseContext> groupByClause() {
            return getRuleContexts(GroupByClauseContext.class);
        }

        public GroupByClauseContext groupByClause(int i) {
            return getRuleContext(GroupByClauseContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SETS() {
            return getToken(SqlBaseParser.SETS, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<GroupingSetContext> groupingSet() {
            return getRuleContexts(GroupingSetContext.class);
        }

        public GroupingSetContext groupingSet(int i) {
            return getRuleContext(GroupingSetContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode ROLLUP() {
            return getToken(SqlBaseParser.ROLLUP, 0);
        }

        public TerminalNode CUBE() {
            return getToken(SqlBaseParser.CUBE, 0);
        }

        public TerminalNode GROUPING() {
            return getToken(SqlBaseParser.GROUPING, 0);
        }

        public AggregationClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_aggregationClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAggregationClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitAggregationClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAggregationClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AggregationClauseContext aggregationClause() throws RecognitionException {
        AggregationClauseContext _localctx = new AggregationClauseContext(_ctx, getState());
        enterRule(_localctx, 156, RULE_aggregationClause);
        int _la;
        try {
            int _alt;
            setState(2353);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 281, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2314);
                    match(GROUP);
                    setState(2315);
                    match(BY);
                    setState(2316);
                    ((AggregationClauseContext) _localctx).groupByClause = groupByClause();
                    ((AggregationClauseContext) _localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext) _localctx).groupByClause);
                    setState(2321);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 277, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(2317);
                                    match(COMMA);
                                    setState(2318);
                                    ((AggregationClauseContext) _localctx).groupByClause = groupByClause();
                                    ((AggregationClauseContext) _localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext) _localctx).groupByClause);
                                }
                            }
                        }
                        setState(2323);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 277, _ctx);
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2324);
                    match(GROUP);
                    setState(2325);
                    match(BY);
                    setState(2326);
                    ((AggregationClauseContext) _localctx).expression = expression();
                    ((AggregationClauseContext) _localctx).groupingExpressions.add(((AggregationClauseContext) _localctx).expression);
                    setState(2331);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 278, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(2327);
                                    match(COMMA);
                                    setState(2328);
                                    ((AggregationClauseContext) _localctx).expression = expression();
                                    ((AggregationClauseContext) _localctx).groupingExpressions.add(((AggregationClauseContext) _localctx).expression);
                                }
                            }
                        }
                        setState(2333);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 278, _ctx);
                    }
                    setState(2351);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 280, _ctx)) {
                        case 1: {
                            setState(2334);
                            match(WITH);
                            setState(2335);
                            ((AggregationClauseContext) _localctx).kind = match(ROLLUP);
                        }
                        break;
                        case 2: {
                            setState(2336);
                            match(WITH);
                            setState(2337);
                            ((AggregationClauseContext) _localctx).kind = match(CUBE);
                        }
                        break;
                        case 3: {
                            setState(2338);
                            ((AggregationClauseContext) _localctx).kind = match(GROUPING);
                            setState(2339);
                            match(SETS);
                            setState(2340);
                            match(LEFT_PAREN);
                            setState(2341);
                            groupingSet();
                            setState(2346);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(2342);
                                        match(COMMA);
                                        setState(2343);
                                        groupingSet();
                                    }
                                }
                                setState(2348);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                            setState(2349);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupByClauseContext extends ParserRuleContext {
        public GroupingAnalyticsContext groupingAnalytics() {
            return getRuleContext(GroupingAnalyticsContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupByClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterGroupByClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitGroupByClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGroupByClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupByClauseContext groupByClause() throws RecognitionException {
        GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
        enterRule(_localctx, 158, RULE_groupByClause);
        try {
            setState(2357);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 282, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2355);
                    groupingAnalytics();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2356);
                    expression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupingAnalyticsContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<GroupingSetContext> groupingSet() {
            return getRuleContexts(GroupingSetContext.class);
        }

        public GroupingSetContext groupingSet(int i) {
            return getRuleContext(GroupingSetContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode ROLLUP() {
            return getToken(SqlBaseParser.ROLLUP, 0);
        }

        public TerminalNode CUBE() {
            return getToken(SqlBaseParser.CUBE, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode GROUPING() {
            return getToken(SqlBaseParser.GROUPING, 0);
        }

        public TerminalNode SETS() {
            return getToken(SqlBaseParser.SETS, 0);
        }

        public List<GroupingElementContext> groupingElement() {
            return getRuleContexts(GroupingElementContext.class);
        }

        public GroupingElementContext groupingElement(int i) {
            return getRuleContext(GroupingElementContext.class, i);
        }

        public GroupingAnalyticsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingAnalytics;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterGroupingAnalytics(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitGroupingAnalytics(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGroupingAnalytics(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupingAnalyticsContext groupingAnalytics() throws RecognitionException {
        GroupingAnalyticsContext _localctx = new GroupingAnalyticsContext(_ctx, getState());
        enterRule(_localctx, 160, RULE_groupingAnalytics);
        int _la;
        try {
            setState(2384);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case CUBE:
                case ROLLUP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2359);
                    _la = _input.LA(1);
                    if (!(_la == CUBE || _la == ROLLUP)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2360);
                    match(LEFT_PAREN);
                    setState(2361);
                    groupingSet();
                    setState(2366);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2362);
                                match(COMMA);
                                setState(2363);
                                groupingSet();
                            }
                        }
                        setState(2368);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2369);
                    match(RIGHT_PAREN);
                }
                break;
                case GROUPING:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2371);
                    match(GROUPING);
                    setState(2372);
                    match(SETS);
                    setState(2373);
                    match(LEFT_PAREN);
                    setState(2374);
                    groupingElement();
                    setState(2379);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2375);
                                match(COMMA);
                                setState(2376);
                                groupingElement();
                            }
                        }
                        setState(2381);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2382);
                    match(RIGHT_PAREN);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupingElementContext extends ParserRuleContext {
        public GroupingAnalyticsContext groupingAnalytics() {
            return getRuleContext(GroupingAnalyticsContext.class, 0);
        }

        public GroupingSetContext groupingSet() {
            return getRuleContext(GroupingSetContext.class, 0);
        }

        public GroupingElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingElement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterGroupingElement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitGroupingElement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGroupingElement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupingElementContext groupingElement() throws RecognitionException {
        GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
        enterRule(_localctx, 162, RULE_groupingElement);
        try {
            setState(2388);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 286, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2386);
                    groupingAnalytics();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2387);
                    groupingSet();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupingSetContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public GroupingSetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingSet;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterGroupingSet(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitGroupingSet(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGroupingSet(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupingSetContext groupingSet() throws RecognitionException {
        GroupingSetContext _localctx = new GroupingSetContext(_ctx, getState());
        enterRule(_localctx, 164, RULE_groupingSet);
        int _la;
        try {
            setState(2403);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 289, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2390);
                    match(LEFT_PAREN);
                    setState(2399);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 288, _ctx)) {
                        case 1: {
                            setState(2391);
                            expression();
                            setState(2396);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(2392);
                                        match(COMMA);
                                        setState(2393);
                                        expression();
                                    }
                                }
                                setState(2398);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                        }
                        break;
                    }
                    setState(2401);
                    match(RIGHT_PAREN);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2402);
                    expression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PivotClauseContext extends ParserRuleContext {
        public NamedExpressionSeqContext aggregates;
        public PivotValueContext pivotValue;
        public List<PivotValueContext> pivotValues = new ArrayList<PivotValueContext>();

        public TerminalNode PIVOT() {
            return getToken(SqlBaseParser.PIVOT, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public PivotColumnContext pivotColumn() {
            return getRuleContext(PivotColumnContext.class, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public NamedExpressionSeqContext namedExpressionSeq() {
            return getRuleContext(NamedExpressionSeqContext.class, 0);
        }

        public List<PivotValueContext> pivotValue() {
            return getRuleContexts(PivotValueContext.class);
        }

        public PivotValueContext pivotValue(int i) {
            return getRuleContext(PivotValueContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public PivotClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_pivotClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPivotClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPivotClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPivotClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PivotClauseContext pivotClause() throws RecognitionException {
        PivotClauseContext _localctx = new PivotClauseContext(_ctx, getState());
        enterRule(_localctx, 166, RULE_pivotClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2405);
                match(PIVOT);
                setState(2406);
                match(LEFT_PAREN);
                setState(2407);
                ((PivotClauseContext) _localctx).aggregates = namedExpressionSeq();
                setState(2408);
                match(FOR);
                setState(2409);
                pivotColumn();
                setState(2410);
                match(IN);
                setState(2411);
                match(LEFT_PAREN);
                setState(2412);
                ((PivotClauseContext) _localctx).pivotValue = pivotValue();
                ((PivotClauseContext) _localctx).pivotValues.add(((PivotClauseContext) _localctx).pivotValue);
                setState(2417);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2413);
                            match(COMMA);
                            setState(2414);
                            ((PivotClauseContext) _localctx).pivotValue = pivotValue();
                            ((PivotClauseContext) _localctx).pivotValues.add(((PivotClauseContext) _localctx).pivotValue);
                        }
                    }
                    setState(2419);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2420);
                match(RIGHT_PAREN);
                setState(2421);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PivotColumnContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext errorCapturingIdentifier;
        public List<ErrorCapturingIdentifierContext> identifiers = new ArrayList<ErrorCapturingIdentifierContext>();

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public PivotColumnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_pivotColumn;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPivotColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPivotColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPivotColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PivotColumnContext pivotColumn() throws RecognitionException {
        PivotColumnContext _localctx = new PivotColumnContext(_ctx, getState());
        enterRule(_localctx, 168, RULE_pivotColumn);
        int _la;
        try {
            setState(2435);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 292, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2423);
                    ((PivotColumnContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                    ((PivotColumnContext) _localctx).identifiers.add(((PivotColumnContext) _localctx).errorCapturingIdentifier);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2424);
                    match(LEFT_PAREN);
                    setState(2425);
                    ((PivotColumnContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                    ((PivotColumnContext) _localctx).identifiers.add(((PivotColumnContext) _localctx).errorCapturingIdentifier);
                    setState(2430);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2426);
                                match(COMMA);
                                setState(2427);
                                ((PivotColumnContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                                ((PivotColumnContext) _localctx).identifiers.add(((PivotColumnContext) _localctx).errorCapturingIdentifier);
                            }
                        }
                        setState(2432);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2433);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PivotValueContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public PivotValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_pivotValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPivotValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPivotValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPivotValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PivotValueContext pivotValue() throws RecognitionException {
        PivotValueContext _localctx = new PivotValueContext(_ctx, getState());
        enterRule(_localctx, 170, RULE_pivotValue);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2437);
                expression();
                setState(2442);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 294, _ctx)) {
                    case 1: {
                        setState(2439);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 293, _ctx)) {
                            case 1: {
                                setState(2438);
                                match(AS);
                            }
                            break;
                        }
                        setState(2441);
                        errorCapturingIdentifier();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotClauseContext extends ParserRuleContext {
        public UnpivotNullClauseContext nullOperator;
        public UnpivotOperatorContext operator;

        public TerminalNode UNPIVOT() {
            return getToken(SqlBaseParser.UNPIVOT, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public UnpivotOperatorContext unpivotOperator() {
            return getRuleContext(UnpivotOperatorContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public UnpivotNullClauseContext unpivotNullClause() {
            return getRuleContext(UnpivotNullClauseContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public UnpivotClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUnpivotClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUnpivotClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotClauseContext unpivotClause() throws RecognitionException {
        UnpivotClauseContext _localctx = new UnpivotClauseContext(_ctx, getState());
        enterRule(_localctx, 172, RULE_unpivotClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2444);
                match(UNPIVOT);
                setState(2446);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == EXCLUDE || _la == INCLUDE) {
                    {
                        setState(2445);
                        ((UnpivotClauseContext) _localctx).nullOperator = unpivotNullClause();
                    }
                }

                setState(2448);
                match(LEFT_PAREN);
                setState(2449);
                ((UnpivotClauseContext) _localctx).operator = unpivotOperator();
                setState(2450);
                match(RIGHT_PAREN);
                setState(2455);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 297, _ctx)) {
                    case 1: {
                        setState(2452);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 296, _ctx)) {
                            case 1: {
                                setState(2451);
                                match(AS);
                            }
                            break;
                        }
                        setState(2454);
                        errorCapturingIdentifier();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotNullClauseContext extends ParserRuleContext {
        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode INCLUDE() {
            return getToken(SqlBaseParser.INCLUDE, 0);
        }

        public TerminalNode EXCLUDE() {
            return getToken(SqlBaseParser.EXCLUDE, 0);
        }

        public UnpivotNullClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotNullClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnpivotNullClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnpivotNullClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotNullClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotNullClauseContext unpivotNullClause() throws RecognitionException {
        UnpivotNullClauseContext _localctx = new UnpivotNullClauseContext(_ctx, getState());
        enterRule(_localctx, 174, RULE_unpivotNullClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2457);
                _la = _input.LA(1);
                if (!(_la == EXCLUDE || _la == INCLUDE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(2458);
                match(NULLS);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotOperatorContext extends ParserRuleContext {
        public UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() {
            return getRuleContext(UnpivotSingleValueColumnClauseContext.class, 0);
        }

        public UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() {
            return getRuleContext(UnpivotMultiValueColumnClauseContext.class, 0);
        }

        public UnpivotOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnpivotOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUnpivotOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotOperatorContext unpivotOperator() throws RecognitionException {
        UnpivotOperatorContext _localctx = new UnpivotOperatorContext(_ctx, getState());
        enterRule(_localctx, 176, RULE_unpivotOperator);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2462);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 298, _ctx)) {
                    case 1: {
                        setState(2460);
                        unpivotSingleValueColumnClause();
                    }
                    break;
                    case 2: {
                        setState(2461);
                        unpivotMultiValueColumnClause();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotSingleValueColumnClauseContext extends ParserRuleContext {
        public UnpivotColumnAndAliasContext unpivotColumnAndAlias;
        public List<UnpivotColumnAndAliasContext> unpivotColumns = new ArrayList<UnpivotColumnAndAliasContext>();

        public UnpivotValueColumnContext unpivotValueColumn() {
            return getRuleContext(UnpivotValueColumnContext.class, 0);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public UnpivotNameColumnContext unpivotNameColumn() {
            return getRuleContext(UnpivotNameColumnContext.class, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<UnpivotColumnAndAliasContext> unpivotColumnAndAlias() {
            return getRuleContexts(UnpivotColumnAndAliasContext.class);
        }

        public UnpivotColumnAndAliasContext unpivotColumnAndAlias(int i) {
            return getRuleContext(UnpivotColumnAndAliasContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public UnpivotSingleValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotSingleValueColumnClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnpivotSingleValueColumnClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnpivotSingleValueColumnClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotSingleValueColumnClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() throws RecognitionException {
        UnpivotSingleValueColumnClauseContext _localctx = new UnpivotSingleValueColumnClauseContext(_ctx, getState());
        enterRule(_localctx, 178, RULE_unpivotSingleValueColumnClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2464);
                unpivotValueColumn();
                setState(2465);
                match(FOR);
                setState(2466);
                unpivotNameColumn();
                setState(2467);
                match(IN);
                setState(2468);
                match(LEFT_PAREN);
                setState(2469);
                ((UnpivotSingleValueColumnClauseContext) _localctx).unpivotColumnAndAlias = unpivotColumnAndAlias();
                ((UnpivotSingleValueColumnClauseContext) _localctx).unpivotColumns.add(((UnpivotSingleValueColumnClauseContext) _localctx).unpivotColumnAndAlias);
                setState(2474);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2470);
                            match(COMMA);
                            setState(2471);
                            ((UnpivotSingleValueColumnClauseContext) _localctx).unpivotColumnAndAlias = unpivotColumnAndAlias();
                            ((UnpivotSingleValueColumnClauseContext) _localctx).unpivotColumns.add(((UnpivotSingleValueColumnClauseContext) _localctx).unpivotColumnAndAlias);
                        }
                    }
                    setState(2476);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2477);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotMultiValueColumnClauseContext extends ParserRuleContext {
        public UnpivotValueColumnContext unpivotValueColumn;
        public List<UnpivotValueColumnContext> unpivotValueColumns = new ArrayList<UnpivotValueColumnContext>();
        public UnpivotColumnSetContext unpivotColumnSet;
        public List<UnpivotColumnSetContext> unpivotColumnSets = new ArrayList<UnpivotColumnSetContext>();

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public UnpivotNameColumnContext unpivotNameColumn() {
            return getRuleContext(UnpivotNameColumnContext.class, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public List<UnpivotValueColumnContext> unpivotValueColumn() {
            return getRuleContexts(UnpivotValueColumnContext.class);
        }

        public UnpivotValueColumnContext unpivotValueColumn(int i) {
            return getRuleContext(UnpivotValueColumnContext.class, i);
        }

        public List<UnpivotColumnSetContext> unpivotColumnSet() {
            return getRuleContexts(UnpivotColumnSetContext.class);
        }

        public UnpivotColumnSetContext unpivotColumnSet(int i) {
            return getRuleContext(UnpivotColumnSetContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public UnpivotMultiValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotMultiValueColumnClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnpivotMultiValueColumnClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnpivotMultiValueColumnClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotMultiValueColumnClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() throws RecognitionException {
        UnpivotMultiValueColumnClauseContext _localctx = new UnpivotMultiValueColumnClauseContext(_ctx, getState());
        enterRule(_localctx, 180, RULE_unpivotMultiValueColumnClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2479);
                match(LEFT_PAREN);
                setState(2480);
                ((UnpivotMultiValueColumnClauseContext) _localctx).unpivotValueColumn = unpivotValueColumn();
                ((UnpivotMultiValueColumnClauseContext) _localctx).unpivotValueColumns.add(((UnpivotMultiValueColumnClauseContext) _localctx).unpivotValueColumn);
                setState(2485);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2481);
                            match(COMMA);
                            setState(2482);
                            ((UnpivotMultiValueColumnClauseContext) _localctx).unpivotValueColumn = unpivotValueColumn();
                            ((UnpivotMultiValueColumnClauseContext) _localctx).unpivotValueColumns.add(((UnpivotMultiValueColumnClauseContext) _localctx).unpivotValueColumn);
                        }
                    }
                    setState(2487);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2488);
                match(RIGHT_PAREN);
                setState(2489);
                match(FOR);
                setState(2490);
                unpivotNameColumn();
                setState(2491);
                match(IN);
                setState(2492);
                match(LEFT_PAREN);
                setState(2493);
                ((UnpivotMultiValueColumnClauseContext) _localctx).unpivotColumnSet = unpivotColumnSet();
                ((UnpivotMultiValueColumnClauseContext) _localctx).unpivotColumnSets.add(((UnpivotMultiValueColumnClauseContext) _localctx).unpivotColumnSet);
                setState(2498);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2494);
                            match(COMMA);
                            setState(2495);
                            ((UnpivotMultiValueColumnClauseContext) _localctx).unpivotColumnSet = unpivotColumnSet();
                            ((UnpivotMultiValueColumnClauseContext) _localctx).unpivotColumnSets.add(((UnpivotMultiValueColumnClauseContext) _localctx).unpivotColumnSet);
                        }
                    }
                    setState(2500);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2501);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotColumnSetContext extends ParserRuleContext {
        public UnpivotColumnContext unpivotColumn;
        public List<UnpivotColumnContext> unpivotColumns = new ArrayList<UnpivotColumnContext>();

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<UnpivotColumnContext> unpivotColumn() {
            return getRuleContexts(UnpivotColumnContext.class);
        }

        public UnpivotColumnContext unpivotColumn(int i) {
            return getRuleContext(UnpivotColumnContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public UnpivotAliasContext unpivotAlias() {
            return getRuleContext(UnpivotAliasContext.class, 0);
        }

        public UnpivotColumnSetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotColumnSet;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnpivotColumnSet(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnpivotColumnSet(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotColumnSet(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotColumnSetContext unpivotColumnSet() throws RecognitionException {
        UnpivotColumnSetContext _localctx = new UnpivotColumnSetContext(_ctx, getState());
        enterRule(_localctx, 182, RULE_unpivotColumnSet);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2503);
                match(LEFT_PAREN);
                setState(2504);
                ((UnpivotColumnSetContext) _localctx).unpivotColumn = unpivotColumn();
                ((UnpivotColumnSetContext) _localctx).unpivotColumns.add(((UnpivotColumnSetContext) _localctx).unpivotColumn);
                setState(2509);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2505);
                            match(COMMA);
                            setState(2506);
                            ((UnpivotColumnSetContext) _localctx).unpivotColumn = unpivotColumn();
                            ((UnpivotColumnSetContext) _localctx).unpivotColumns.add(((UnpivotColumnSetContext) _localctx).unpivotColumn);
                        }
                    }
                    setState(2511);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2512);
                match(RIGHT_PAREN);
                setState(2514);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 303, _ctx)) {
                    case 1: {
                        setState(2513);
                        unpivotAlias();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotValueColumnContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public UnpivotValueColumnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotValueColumn;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnpivotValueColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnpivotValueColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotValueColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotValueColumnContext unpivotValueColumn() throws RecognitionException {
        UnpivotValueColumnContext _localctx = new UnpivotValueColumnContext(_ctx, getState());
        enterRule(_localctx, 184, RULE_unpivotValueColumn);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2516);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotNameColumnContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public UnpivotNameColumnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotNameColumn;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnpivotNameColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnpivotNameColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotNameColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotNameColumnContext unpivotNameColumn() throws RecognitionException {
        UnpivotNameColumnContext _localctx = new UnpivotNameColumnContext(_ctx, getState());
        enterRule(_localctx, 186, RULE_unpivotNameColumn);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2518);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotColumnAndAliasContext extends ParserRuleContext {
        public UnpivotColumnContext unpivotColumn() {
            return getRuleContext(UnpivotColumnContext.class, 0);
        }

        public UnpivotAliasContext unpivotAlias() {
            return getRuleContext(UnpivotAliasContext.class, 0);
        }

        public UnpivotColumnAndAliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotColumnAndAlias;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnpivotColumnAndAlias(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnpivotColumnAndAlias(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotColumnAndAlias(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotColumnAndAliasContext unpivotColumnAndAlias() throws RecognitionException {
        UnpivotColumnAndAliasContext _localctx = new UnpivotColumnAndAliasContext(_ctx, getState());
        enterRule(_localctx, 188, RULE_unpivotColumnAndAlias);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2520);
                unpivotColumn();
                setState(2522);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 304, _ctx)) {
                    case 1: {
                        setState(2521);
                        unpivotAlias();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotColumnContext extends ParserRuleContext {
        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public UnpivotColumnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotColumn;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUnpivotColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUnpivotColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotColumnContext unpivotColumn() throws RecognitionException {
        UnpivotColumnContext _localctx = new UnpivotColumnContext(_ctx, getState());
        enterRule(_localctx, 190, RULE_unpivotColumn);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2524);
                multipartIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnpivotAliasContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public UnpivotAliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unpivotAlias;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUnpivotAlias(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUnpivotAlias(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnpivotAlias(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnpivotAliasContext unpivotAlias() throws RecognitionException {
        UnpivotAliasContext _localctx = new UnpivotAliasContext(_ctx, getState());
        enterRule(_localctx, 192, RULE_unpivotAlias);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2527);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 305, _ctx)) {
                    case 1: {
                        setState(2526);
                        match(AS);
                    }
                    break;
                }
                setState(2529);
                errorCapturingIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LateralViewContext extends ParserRuleContext {
        public IdentifierContext tblName;
        public IdentifierContext identifier;
        public List<IdentifierContext> colName = new ArrayList<IdentifierContext>();

        public TerminalNode LATERAL() {
            return getToken(SqlBaseParser.LATERAL, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode OUTER() {
            return getToken(SqlBaseParser.OUTER, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public LateralViewContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_lateralView;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLateralView(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLateralView(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLateralView(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LateralViewContext lateralView() throws RecognitionException {
        LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
        enterRule(_localctx, 194, RULE_lateralView);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2531);
                match(LATERAL);
                setState(2532);
                match(VIEW);
                setState(2534);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 306, _ctx)) {
                    case 1: {
                        setState(2533);
                        match(OUTER);
                    }
                    break;
                }
                setState(2536);
                qualifiedName();
                setState(2537);
                match(LEFT_PAREN);
                setState(2546);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 308, _ctx)) {
                    case 1: {
                        setState(2538);
                        expression();
                        setState(2543);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(2539);
                                    match(COMMA);
                                    setState(2540);
                                    expression();
                                }
                            }
                            setState(2545);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                }
                setState(2548);
                match(RIGHT_PAREN);
                setState(2549);
                ((LateralViewContext) _localctx).tblName = identifier();
                setState(2561);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 311, _ctx)) {
                    case 1: {
                        setState(2551);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 309, _ctx)) {
                            case 1: {
                                setState(2550);
                                match(AS);
                            }
                            break;
                        }
                        setState(2553);
                        ((LateralViewContext) _localctx).identifier = identifier();
                        ((LateralViewContext) _localctx).colName.add(((LateralViewContext) _localctx).identifier);
                        setState(2558);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 310, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(2554);
                                        match(COMMA);
                                        setState(2555);
                                        ((LateralViewContext) _localctx).identifier = identifier();
                                        ((LateralViewContext) _localctx).colName.add(((LateralViewContext) _localctx).identifier);
                                    }
                                }
                            }
                            setState(2560);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 310, _ctx);
                        }
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetQuantifierContext extends ParserRuleContext {
        public TerminalNode DISTINCT() {
            return getToken(SqlBaseParser.DISTINCT, 0);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setQuantifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetQuantifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetQuantifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetQuantifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SetQuantifierContext setQuantifier() throws RecognitionException {
        SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
        enterRule(_localctx, 196, RULE_setQuantifier);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2563);
                _la = _input.LA(1);
                if (!(_la == ALL || _la == DISTINCT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RelationContext extends ParserRuleContext {
        public RelationPrimaryContext relationPrimary() {
            return getRuleContext(RelationPrimaryContext.class, 0);
        }

        public TerminalNode LATERAL() {
            return getToken(SqlBaseParser.LATERAL, 0);
        }

        public List<RelationExtensionContext> relationExtension() {
            return getRuleContexts(RelationExtensionContext.class);
        }

        public RelationExtensionContext relationExtension(int i) {
            return getRuleContext(RelationExtensionContext.class, i);
        }

        public RelationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRelation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRelation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRelation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RelationContext relation() throws RecognitionException {
        RelationContext _localctx = new RelationContext(_ctx, getState());
        enterRule(_localctx, 198, RULE_relation);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2566);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 312, _ctx)) {
                    case 1: {
                        setState(2565);
                        match(LATERAL);
                    }
                    break;
                }
                setState(2568);
                relationPrimary();
                setState(2572);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 313, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2569);
                                relationExtension();
                            }
                        }
                    }
                    setState(2574);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 313, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RelationExtensionContext extends ParserRuleContext {
        public JoinRelationContext joinRelation() {
            return getRuleContext(JoinRelationContext.class, 0);
        }

        public PivotClauseContext pivotClause() {
            return getRuleContext(PivotClauseContext.class, 0);
        }

        public UnpivotClauseContext unpivotClause() {
            return getRuleContext(UnpivotClauseContext.class, 0);
        }

        public RelationExtensionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relationExtension;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRelationExtension(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRelationExtension(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRelationExtension(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RelationExtensionContext relationExtension() throws RecognitionException {
        RelationExtensionContext _localctx = new RelationExtensionContext(_ctx, getState());
        enterRule(_localctx, 200, RULE_relationExtension);
        try {
            setState(2578);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case ANTI:
                case CROSS:
                case FULL:
                case INNER:
                case JOIN:
                case LEFT:
                case NATURAL:
                case RIGHT:
                case SEMI:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2575);
                    joinRelation();
                }
                break;
                case PIVOT:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2576);
                    pivotClause();
                }
                break;
                case UNPIVOT:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2577);
                    unpivotClause();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class JoinRelationContext extends ParserRuleContext {
        public RelationPrimaryContext right;

        public TerminalNode JOIN() {
            return getToken(SqlBaseParser.JOIN, 0);
        }

        public RelationPrimaryContext relationPrimary() {
            return getRuleContext(RelationPrimaryContext.class, 0);
        }

        public JoinTypeContext joinType() {
            return getRuleContext(JoinTypeContext.class, 0);
        }

        public TerminalNode LATERAL() {
            return getToken(SqlBaseParser.LATERAL, 0);
        }

        public JoinCriteriaContext joinCriteria() {
            return getRuleContext(JoinCriteriaContext.class, 0);
        }

        public TerminalNode NATURAL() {
            return getToken(SqlBaseParser.NATURAL, 0);
        }

        public JoinRelationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinRelation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterJoinRelation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitJoinRelation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitJoinRelation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final JoinRelationContext joinRelation() throws RecognitionException {
        JoinRelationContext _localctx = new JoinRelationContext(_ctx, getState());
        enterRule(_localctx, 202, RULE_joinRelation);
        try {
            setState(2597);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case ANTI:
                case CROSS:
                case FULL:
                case INNER:
                case JOIN:
                case LEFT:
                case RIGHT:
                case SEMI:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(2580);
                        joinType();
                    }
                    setState(2581);
                    match(JOIN);
                    setState(2583);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 315, _ctx)) {
                        case 1: {
                            setState(2582);
                            match(LATERAL);
                        }
                        break;
                    }
                    setState(2585);
                    ((JoinRelationContext) _localctx).right = relationPrimary();
                    setState(2587);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 316, _ctx)) {
                        case 1: {
                            setState(2586);
                            joinCriteria();
                        }
                        break;
                    }
                }
                break;
                case NATURAL:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2589);
                    match(NATURAL);
                    setState(2590);
                    joinType();
                    setState(2591);
                    match(JOIN);
                    setState(2593);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 317, _ctx)) {
                        case 1: {
                            setState(2592);
                            match(LATERAL);
                        }
                        break;
                    }
                    setState(2595);
                    ((JoinRelationContext) _localctx).right = relationPrimary();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class JoinTypeContext extends ParserRuleContext {
        public TerminalNode INNER() {
            return getToken(SqlBaseParser.INNER, 0);
        }

        public TerminalNode CROSS() {
            return getToken(SqlBaseParser.CROSS, 0);
        }

        public TerminalNode LEFT() {
            return getToken(SqlBaseParser.LEFT, 0);
        }

        public TerminalNode OUTER() {
            return getToken(SqlBaseParser.OUTER, 0);
        }

        public TerminalNode SEMI() {
            return getToken(SqlBaseParser.SEMI, 0);
        }

        public TerminalNode RIGHT() {
            return getToken(SqlBaseParser.RIGHT, 0);
        }

        public TerminalNode FULL() {
            return getToken(SqlBaseParser.FULL, 0);
        }

        public TerminalNode ANTI() {
            return getToken(SqlBaseParser.ANTI, 0);
        }

        public JoinTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterJoinType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitJoinType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitJoinType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final JoinTypeContext joinType() throws RecognitionException {
        JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
        enterRule(_localctx, 204, RULE_joinType);
        int _la;
        try {
            setState(2623);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 325, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2600);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == INNER) {
                        {
                            setState(2599);
                            match(INNER);
                        }
                    }

                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2602);
                    match(CROSS);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2603);
                    match(LEFT);
                    setState(2605);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OUTER) {
                        {
                            setState(2604);
                            match(OUTER);
                        }
                    }

                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2608);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT) {
                        {
                            setState(2607);
                            match(LEFT);
                        }
                    }

                    setState(2610);
                    match(SEMI);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2611);
                    match(RIGHT);
                    setState(2613);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OUTER) {
                        {
                            setState(2612);
                            match(OUTER);
                        }
                    }

                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(2615);
                    match(FULL);
                    setState(2617);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OUTER) {
                        {
                            setState(2616);
                            match(OUTER);
                        }
                    }

                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(2620);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT) {
                        {
                            setState(2619);
                            match(LEFT);
                        }
                    }

                    setState(2622);
                    match(ANTI);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class JoinCriteriaContext extends ParserRuleContext {
        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public JoinCriteriaContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinCriteria;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterJoinCriteria(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitJoinCriteria(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitJoinCriteria(this);
            else return visitor.visitChildren(this);
        }
    }

    public final JoinCriteriaContext joinCriteria() throws RecognitionException {
        JoinCriteriaContext _localctx = new JoinCriteriaContext(_ctx, getState());
        enterRule(_localctx, 206, RULE_joinCriteria);
        try {
            setState(2629);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case ON:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2625);
                    match(ON);
                    setState(2626);
                    booleanExpression(0);
                }
                break;
                case USING:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2627);
                    match(USING);
                    setState(2628);
                    identifierList();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SampleContext extends ParserRuleContext {
        public Token seed;

        public TerminalNode TABLESAMPLE() {
            return getToken(SqlBaseParser.TABLESAMPLE, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public SampleMethodContext sampleMethod() {
            return getRuleContext(SampleMethodContext.class, 0);
        }

        public TerminalNode REPEATABLE() {
            return getToken(SqlBaseParser.REPEATABLE, 0);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public SampleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sample;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSample(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSample(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSample(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SampleContext sample() throws RecognitionException {
        SampleContext _localctx = new SampleContext(_ctx, getState());
        enterRule(_localctx, 208, RULE_sample);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2631);
                match(TABLESAMPLE);
                setState(2632);
                match(LEFT_PAREN);
                setState(2634);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 327, _ctx)) {
                    case 1: {
                        setState(2633);
                        sampleMethod();
                    }
                    break;
                }
                setState(2636);
                match(RIGHT_PAREN);
                setState(2641);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 328, _ctx)) {
                    case 1: {
                        setState(2637);
                        match(REPEATABLE);
                        setState(2638);
                        match(LEFT_PAREN);
                        setState(2639);
                        ((SampleContext) _localctx).seed = match(INTEGER_VALUE);
                        setState(2640);
                        match(RIGHT_PAREN);
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SampleMethodContext extends ParserRuleContext {
        public SampleMethodContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sampleMethod;
        }

        public SampleMethodContext() {
        }

        public void copyFrom(SampleMethodContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SampleByRowsContext extends SampleMethodContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode ROWS() {
            return getToken(SqlBaseParser.ROWS, 0);
        }

        public SampleByRowsContext(SampleMethodContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSampleByRows(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSampleByRows(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSampleByRows(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SampleByPercentileContext extends SampleMethodContext {
        public Token negativeSign;
        public Token percentage;

        public TerminalNode PERCENTLIT() {
            return getToken(SqlBaseParser.PERCENTLIT, 0);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public SampleByPercentileContext(SampleMethodContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSampleByPercentile(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSampleByPercentile(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSampleByPercentile(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SampleByBucketContext extends SampleMethodContext {
        public Token sampleType;
        public Token numerator;
        public Token denominator;

        public TerminalNode OUT() {
            return getToken(SqlBaseParser.OUT, 0);
        }

        public TerminalNode OF() {
            return getToken(SqlBaseParser.OF, 0);
        }

        public TerminalNode BUCKET() {
            return getToken(SqlBaseParser.BUCKET, 0);
        }

        public List<TerminalNode> INTEGER_VALUE() {
            return getTokens(SqlBaseParser.INTEGER_VALUE);
        }

        public TerminalNode INTEGER_VALUE(int i) {
            return getToken(SqlBaseParser.INTEGER_VALUE, i);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public SampleByBucketContext(SampleMethodContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSampleByBucket(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSampleByBucket(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSampleByBucket(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SampleByBytesContext extends SampleMethodContext {
        public ExpressionContext bytes;

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public SampleByBytesContext(SampleMethodContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSampleByBytes(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSampleByBytes(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSampleByBytes(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SampleMethodContext sampleMethod() throws RecognitionException {
        SampleMethodContext _localctx = new SampleMethodContext(_ctx, getState());
        enterRule(_localctx, 210, RULE_sampleMethod);
        int _la;
        try {
            setState(2667);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 332, _ctx)) {
                case 1:
                    _localctx = new SampleByPercentileContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2644);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(2643);
                            ((SampleByPercentileContext) _localctx).negativeSign = match(MINUS);
                        }
                    }

                    setState(2646);
                    ((SampleByPercentileContext) _localctx).percentage = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == INTEGER_VALUE || _la == DECIMAL_VALUE)) {
                        ((SampleByPercentileContext) _localctx).percentage = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2647);
                    match(PERCENTLIT);
                }
                break;
                case 2:
                    _localctx = new SampleByRowsContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2648);
                    expression();
                    setState(2649);
                    match(ROWS);
                }
                break;
                case 3:
                    _localctx = new SampleByBucketContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2651);
                    ((SampleByBucketContext) _localctx).sampleType = match(BUCKET);
                    setState(2652);
                    ((SampleByBucketContext) _localctx).numerator = match(INTEGER_VALUE);
                    setState(2653);
                    match(OUT);
                    setState(2654);
                    match(OF);
                    setState(2655);
                    ((SampleByBucketContext) _localctx).denominator = match(INTEGER_VALUE);
                    setState(2664);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == ON) {
                        {
                            setState(2656);
                            match(ON);
                            setState(2662);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 330, _ctx)) {
                                case 1: {
                                    setState(2657);
                                    identifier();
                                }
                                break;
                                case 2: {
                                    setState(2658);
                                    qualifiedName();
                                    setState(2659);
                                    match(LEFT_PAREN);
                                    setState(2660);
                                    match(RIGHT_PAREN);
                                }
                                break;
                            }
                        }
                    }

                }
                break;
                case 4:
                    _localctx = new SampleByBytesContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2666);
                    ((SampleByBytesContext) _localctx).bytes = expression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentifierListContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public IdentifierSeqContext identifierSeq() {
            return getRuleContext(IdentifierSeqContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public IdentifierListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIdentifierList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIdentifierList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdentifierListContext identifierList() throws RecognitionException {
        IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
        enterRule(_localctx, 212, RULE_identifierList);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2669);
                match(LEFT_PAREN);
                setState(2670);
                identifierSeq();
                setState(2671);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentifierSeqContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext errorCapturingIdentifier;
        public List<ErrorCapturingIdentifierContext> ident = new ArrayList<ErrorCapturingIdentifierContext>();

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public IdentifierSeqContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierSeq;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIdentifierSeq(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIdentifierSeq(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierSeq(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdentifierSeqContext identifierSeq() throws RecognitionException {
        IdentifierSeqContext _localctx = new IdentifierSeqContext(_ctx, getState());
        enterRule(_localctx, 214, RULE_identifierSeq);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2673);
                ((IdentifierSeqContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                ((IdentifierSeqContext) _localctx).ident.add(((IdentifierSeqContext) _localctx).errorCapturingIdentifier);
                setState(2678);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 333, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2674);
                                match(COMMA);
                                setState(2675);
                                ((IdentifierSeqContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                                ((IdentifierSeqContext) _localctx).ident.add(((IdentifierSeqContext) _localctx).errorCapturingIdentifier);
                            }
                        }
                    }
                    setState(2680);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 333, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class OrderedIdentifierListContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<OrderedIdentifierContext> orderedIdentifier() {
            return getRuleContexts(OrderedIdentifierContext.class);
        }

        public OrderedIdentifierContext orderedIdentifier(int i) {
            return getRuleContext(OrderedIdentifierContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public OrderedIdentifierListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_orderedIdentifierList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterOrderedIdentifierList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitOrderedIdentifierList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitOrderedIdentifierList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final OrderedIdentifierListContext orderedIdentifierList() throws RecognitionException {
        OrderedIdentifierListContext _localctx = new OrderedIdentifierListContext(_ctx, getState());
        enterRule(_localctx, 216, RULE_orderedIdentifierList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2681);
                match(LEFT_PAREN);
                setState(2682);
                orderedIdentifier();
                setState(2687);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2683);
                            match(COMMA);
                            setState(2684);
                            orderedIdentifier();
                        }
                    }
                    setState(2689);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2690);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class OrderedIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext ident;
        public Token ordering;

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode ASC() {
            return getToken(SqlBaseParser.ASC, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public OrderedIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_orderedIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterOrderedIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitOrderedIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitOrderedIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final OrderedIdentifierContext orderedIdentifier() throws RecognitionException {
        OrderedIdentifierContext _localctx = new OrderedIdentifierContext(_ctx, getState());
        enterRule(_localctx, 218, RULE_orderedIdentifier);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2692);
                ((OrderedIdentifierContext) _localctx).ident = errorCapturingIdentifier();
                setState(2694);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == ASC || _la == DESC) {
                    {
                        setState(2693);
                        ((OrderedIdentifierContext) _localctx).ordering = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == ASC || _la == DESC)) {
                            ((OrderedIdentifierContext) _localctx).ordering = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentifierCommentListContext extends ParserRuleContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<IdentifierCommentContext> identifierComment() {
            return getRuleContexts(IdentifierCommentContext.class);
        }

        public IdentifierCommentContext identifierComment(int i) {
            return getRuleContext(IdentifierCommentContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public IdentifierCommentListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierCommentList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIdentifierCommentList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitIdentifierCommentList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierCommentList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdentifierCommentListContext identifierCommentList() throws RecognitionException {
        IdentifierCommentListContext _localctx = new IdentifierCommentListContext(_ctx, getState());
        enterRule(_localctx, 220, RULE_identifierCommentList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2696);
                match(LEFT_PAREN);
                setState(2697);
                identifierComment();
                setState(2702);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2698);
                            match(COMMA);
                            setState(2699);
                            identifierComment();
                        }
                    }
                    setState(2704);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2705);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentifierCommentContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        public IdentifierCommentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierComment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIdentifierComment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitIdentifierComment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierComment(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdentifierCommentContext identifierComment() throws RecognitionException {
        IdentifierCommentContext _localctx = new IdentifierCommentContext(_ctx, getState());
        enterRule(_localctx, 222, RULE_identifierComment);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2707);
                identifier();
                setState(2709);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMENT) {
                    {
                        setState(2708);
                        commentSpec();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RelationPrimaryContext extends ParserRuleContext {
        public RelationPrimaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relationPrimary;
        }

        public RelationPrimaryContext() {
        }

        public void copyFrom(RelationPrimaryContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableValuedFunctionContext extends RelationPrimaryContext {
        public FunctionTableContext functionTable() {
            return getRuleContext(FunctionTableContext.class, 0);
        }

        public TableValuedFunctionContext(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTableValuedFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitTableValuedFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableValuedFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InlineTableDefault2Context extends RelationPrimaryContext {
        public InlineTableContext inlineTable() {
            return getRuleContext(InlineTableContext.class, 0);
        }

        public InlineTableDefault2Context(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInlineTableDefault2(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInlineTableDefault2(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInlineTableDefault2(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AliasedRelationContext extends RelationPrimaryContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public RelationContext relation() {
            return getRuleContext(RelationContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public SampleContext sample() {
            return getRuleContext(SampleContext.class, 0);
        }

        public AliasedRelationContext(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAliasedRelation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAliasedRelation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAliasedRelation(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AliasedQueryContext extends RelationPrimaryContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public SampleContext sample() {
            return getRuleContext(SampleContext.class, 0);
        }

        public AliasedQueryContext(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAliasedQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAliasedQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAliasedQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableNameContext extends RelationPrimaryContext {
        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public TemporalClauseContext temporalClause() {
            return getRuleContext(TemporalClauseContext.class, 0);
        }

        public SampleContext sample() {
            return getRuleContext(SampleContext.class, 0);
        }

        public TableNameContext(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTableName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RelationPrimaryContext relationPrimary() throws RecognitionException {
        RelationPrimaryContext _localctx = new RelationPrimaryContext(_ctx, getState());
        enterRule(_localctx, 224, RULE_relationPrimary);
        try {
            setState(2738);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 342, _ctx)) {
                case 1:
                    _localctx = new TableNameContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2711);
                    identifierReference();
                    setState(2713);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 338, _ctx)) {
                        case 1: {
                            setState(2712);
                            temporalClause();
                        }
                        break;
                    }
                    setState(2716);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 339, _ctx)) {
                        case 1: {
                            setState(2715);
                            sample();
                        }
                        break;
                    }
                    setState(2718);
                    tableAlias();
                }
                break;
                case 2:
                    _localctx = new AliasedQueryContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2720);
                    match(LEFT_PAREN);
                    setState(2721);
                    query();
                    setState(2722);
                    match(RIGHT_PAREN);
                    setState(2724);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 340, _ctx)) {
                        case 1: {
                            setState(2723);
                            sample();
                        }
                        break;
                    }
                    setState(2726);
                    tableAlias();
                }
                break;
                case 3:
                    _localctx = new AliasedRelationContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2728);
                    match(LEFT_PAREN);
                    setState(2729);
                    relation();
                    setState(2730);
                    match(RIGHT_PAREN);
                    setState(2732);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 341, _ctx)) {
                        case 1: {
                            setState(2731);
                            sample();
                        }
                        break;
                    }
                    setState(2734);
                    tableAlias();
                }
                break;
                case 4:
                    _localctx = new InlineTableDefault2Context(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2736);
                    inlineTable();
                }
                break;
                case 5:
                    _localctx = new TableValuedFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2737);
                    functionTable();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InlineTableContext extends ParserRuleContext {
        public TerminalNode VALUES() {
            return getToken(SqlBaseParser.VALUES, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public InlineTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_inlineTable;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterInlineTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitInlineTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInlineTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public final InlineTableContext inlineTable() throws RecognitionException {
        InlineTableContext _localctx = new InlineTableContext(_ctx, getState());
        enterRule(_localctx, 226, RULE_inlineTable);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2740);
                match(VALUES);
                setState(2741);
                expression();
                setState(2746);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 343, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2742);
                                match(COMMA);
                                setState(2743);
                                expression();
                            }
                        }
                    }
                    setState(2748);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 343, _ctx);
                }
                setState(2749);
                tableAlias();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionTableSubqueryArgumentContext extends ParserRuleContext {
        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public IdentifierReferenceContext identifierReference() {
            return getRuleContext(IdentifierReferenceContext.class, 0);
        }

        public TableArgumentPartitioningContext tableArgumentPartitioning() {
            return getRuleContext(TableArgumentPartitioningContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public FunctionTableSubqueryArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionTableSubqueryArgument;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFunctionTableSubqueryArgument(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFunctionTableSubqueryArgument(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionTableSubqueryArgument(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() throws RecognitionException {
        FunctionTableSubqueryArgumentContext _localctx = new FunctionTableSubqueryArgumentContext(_ctx, getState());
        enterRule(_localctx, 228, RULE_functionTableSubqueryArgument);
        int _la;
        try {
            setState(2770);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 347, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2751);
                    match(TABLE);
                    setState(2752);
                    identifierReference();
                    setState(2754);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == DISTRIBUTE || _la == PARTITION || _la == WITH) {
                        {
                            setState(2753);
                            tableArgumentPartitioning();
                        }
                    }

                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2756);
                    match(TABLE);
                    setState(2757);
                    match(LEFT_PAREN);
                    setState(2758);
                    identifierReference();
                    setState(2759);
                    match(RIGHT_PAREN);
                    setState(2761);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == DISTRIBUTE || _la == PARTITION || _la == WITH) {
                        {
                            setState(2760);
                            tableArgumentPartitioning();
                        }
                    }

                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2763);
                    match(TABLE);
                    setState(2764);
                    match(LEFT_PAREN);
                    setState(2765);
                    query();
                    setState(2766);
                    match(RIGHT_PAREN);
                    setState(2768);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == DISTRIBUTE || _la == PARTITION || _la == WITH) {
                        {
                            setState(2767);
                            tableArgumentPartitioning();
                        }
                    }

                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableArgumentPartitioningContext extends ParserRuleContext {
        public ExpressionContext expression;
        public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SINGLE() {
            return getToken(SqlBaseParser.SINGLE, 0);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<SortItemContext> sortItem() {
            return getRuleContexts(SortItemContext.class);
        }

        public SortItemContext sortItem(int i) {
            return getRuleContext(SortItemContext.class, i);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TableArgumentPartitioningContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableArgumentPartitioning;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTableArgumentPartitioning(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitTableArgumentPartitioning(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableArgumentPartitioning(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableArgumentPartitioningContext tableArgumentPartitioning() throws RecognitionException {
        TableArgumentPartitioningContext _localctx = new TableArgumentPartitioningContext(_ctx, getState());
        enterRule(_localctx, 230, RULE_tableArgumentPartitioning);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2791);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case WITH: {
                        {
                            setState(2772);
                            match(WITH);
                            setState(2773);
                            match(SINGLE);
                            setState(2774);
                            match(PARTITION);
                        }
                    }
                    break;
                    case DISTRIBUTE:
                    case PARTITION: {
                        {
                            setState(2775);
                            _la = _input.LA(1);
                            if (!(_la == DISTRIBUTE || _la == PARTITION)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(2776);
                            match(BY);
                            setState(2789);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 349, _ctx)) {
                                case 1: {
                                    {
                                        {
                                            setState(2777);
                                            match(LEFT_PAREN);
                                            setState(2778);
                                            ((TableArgumentPartitioningContext) _localctx).expression = expression();
                                            ((TableArgumentPartitioningContext) _localctx).partition.add(((TableArgumentPartitioningContext) _localctx).expression);
                                            setState(2783);
                                            _errHandler.sync(this);
                                            _la = _input.LA(1);
                                            while (_la == COMMA) {
                                                {
                                                    {
                                                        setState(2779);
                                                        match(COMMA);
                                                        setState(2780);
                                                        ((TableArgumentPartitioningContext) _localctx).expression = expression();
                                                        ((TableArgumentPartitioningContext) _localctx).partition.add(((TableArgumentPartitioningContext) _localctx).expression);
                                                    }
                                                }
                                                setState(2785);
                                                _errHandler.sync(this);
                                                _la = _input.LA(1);
                                            }
                                            setState(2786);
                                            match(RIGHT_PAREN);
                                        }
                                    }
                                }
                                break;
                                case 2: {
                                    setState(2788);
                                    ((TableArgumentPartitioningContext) _localctx).expression = expression();
                                    ((TableArgumentPartitioningContext) _localctx).partition.add(((TableArgumentPartitioningContext) _localctx).expression);
                                }
                                break;
                            }
                        }
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2809);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == ORDER || _la == SORT) {
                    {
                        setState(2793);
                        _la = _input.LA(1);
                        if (!(_la == ORDER || _la == SORT)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2794);
                        match(BY);
                        {
                            setState(2807);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 352, _ctx)) {
                                case 1: {
                                    {
                                        setState(2795);
                                        match(LEFT_PAREN);
                                        setState(2796);
                                        sortItem();
                                        setState(2801);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        while (_la == COMMA) {
                                            {
                                                {
                                                    setState(2797);
                                                    match(COMMA);
                                                    setState(2798);
                                                    sortItem();
                                                }
                                            }
                                            setState(2803);
                                            _errHandler.sync(this);
                                            _la = _input.LA(1);
                                        }
                                        setState(2804);
                                        match(RIGHT_PAREN);
                                    }
                                }
                                break;
                                case 2: {
                                    setState(2806);
                                    sortItem();
                                }
                                break;
                            }
                        }
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionTableNamedArgumentExpressionContext extends ParserRuleContext {
        public IdentifierContext key;
        public FunctionTableSubqueryArgumentContext table;

        public TerminalNode FAT_ARROW() {
            return getToken(SqlBaseParser.FAT_ARROW, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() {
            return getRuleContext(FunctionTableSubqueryArgumentContext.class, 0);
        }

        public FunctionTableNamedArgumentExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionTableNamedArgumentExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFunctionTableNamedArgumentExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFunctionTableNamedArgumentExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionTableNamedArgumentExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionTableNamedArgumentExpressionContext functionTableNamedArgumentExpression() throws RecognitionException {
        FunctionTableNamedArgumentExpressionContext _localctx = new FunctionTableNamedArgumentExpressionContext(_ctx, getState());
        enterRule(_localctx, 232, RULE_functionTableNamedArgumentExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2811);
                ((FunctionTableNamedArgumentExpressionContext) _localctx).key = identifier();
                setState(2812);
                match(FAT_ARROW);
                setState(2813);
                ((FunctionTableNamedArgumentExpressionContext) _localctx).table = functionTableSubqueryArgument();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionTableReferenceArgumentContext extends ParserRuleContext {
        public FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() {
            return getRuleContext(FunctionTableSubqueryArgumentContext.class, 0);
        }

        public FunctionTableNamedArgumentExpressionContext functionTableNamedArgumentExpression() {
            return getRuleContext(FunctionTableNamedArgumentExpressionContext.class, 0);
        }

        public FunctionTableReferenceArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionTableReferenceArgument;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFunctionTableReferenceArgument(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFunctionTableReferenceArgument(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionTableReferenceArgument(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionTableReferenceArgumentContext functionTableReferenceArgument() throws RecognitionException {
        FunctionTableReferenceArgumentContext _localctx = new FunctionTableReferenceArgumentContext(_ctx, getState());
        enterRule(_localctx, 234, RULE_functionTableReferenceArgument);
        try {
            setState(2817);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 354, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2815);
                    functionTableSubqueryArgument();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2816);
                    functionTableNamedArgumentExpression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionTableArgumentContext extends ParserRuleContext {
        public FunctionTableReferenceArgumentContext functionTableReferenceArgument() {
            return getRuleContext(FunctionTableReferenceArgumentContext.class, 0);
        }

        public FunctionArgumentContext functionArgument() {
            return getRuleContext(FunctionArgumentContext.class, 0);
        }

        public FunctionTableArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionTableArgument;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFunctionTableArgument(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFunctionTableArgument(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionTableArgument(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionTableArgumentContext functionTableArgument() throws RecognitionException {
        FunctionTableArgumentContext _localctx = new FunctionTableArgumentContext(_ctx, getState());
        enterRule(_localctx, 236, RULE_functionTableArgument);
        try {
            setState(2821);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 355, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2819);
                    functionTableReferenceArgument();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2820);
                    functionArgument();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionTableContext extends ParserRuleContext {
        public FunctionNameContext funcName;

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public FunctionNameContext functionName() {
            return getRuleContext(FunctionNameContext.class, 0);
        }

        public List<FunctionTableArgumentContext> functionTableArgument() {
            return getRuleContexts(FunctionTableArgumentContext.class);
        }

        public FunctionTableArgumentContext functionTableArgument(int i) {
            return getRuleContext(FunctionTableArgumentContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public FunctionTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionTable;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFunctionTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFunctionTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionTableContext functionTable() throws RecognitionException {
        FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
        enterRule(_localctx, 238, RULE_functionTable);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2823);
                ((FunctionTableContext) _localctx).funcName = functionName();
                setState(2824);
                match(LEFT_PAREN);
                setState(2833);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 357, _ctx)) {
                    case 1: {
                        setState(2825);
                        functionTableArgument();
                        setState(2830);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(2826);
                                    match(COMMA);
                                    setState(2827);
                                    functionTableArgument();
                                }
                            }
                            setState(2832);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                }
                setState(2835);
                match(RIGHT_PAREN);
                setState(2836);
                tableAlias();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableAliasContext extends ParserRuleContext {
        public StrictIdentifierContext strictIdentifier() {
            return getRuleContext(StrictIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TableAliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableAlias;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTableAlias(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableAlias(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableAlias(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableAliasContext tableAlias() throws RecognitionException {
        TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
        enterRule(_localctx, 240, RULE_tableAlias);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2845);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 360, _ctx)) {
                    case 1: {
                        setState(2839);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 358, _ctx)) {
                            case 1: {
                                setState(2838);
                                match(AS);
                            }
                            break;
                        }
                        setState(2841);
                        strictIdentifier();
                        setState(2843);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 359, _ctx)) {
                            case 1: {
                                setState(2842);
                                identifierList();
                            }
                            break;
                        }
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RowFormatContext extends ParserRuleContext {
        public RowFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rowFormat;
        }

        public RowFormatContext() {
        }

        public void copyFrom(RowFormatContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RowFormatSerdeContext extends RowFormatContext {
        public StringLitContext name;
        public PropertyListContext props;

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode FORMAT() {
            return getToken(SqlBaseParser.FORMAT, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public RowFormatSerdeContext(RowFormatContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRowFormatSerde(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRowFormatSerde(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRowFormatSerde(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RowFormatDelimitedContext extends RowFormatContext {
        public StringLitContext fieldsTerminatedBy;
        public StringLitContext escapedBy;
        public StringLitContext collectionItemsTerminatedBy;
        public StringLitContext keysTerminatedBy;
        public StringLitContext linesSeparatedBy;
        public StringLitContext nullDefinedAs;

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode FORMAT() {
            return getToken(SqlBaseParser.FORMAT, 0);
        }

        public TerminalNode DELIMITED() {
            return getToken(SqlBaseParser.DELIMITED, 0);
        }

        public TerminalNode FIELDS() {
            return getToken(SqlBaseParser.FIELDS, 0);
        }

        public List<TerminalNode> TERMINATED() {
            return getTokens(SqlBaseParser.TERMINATED);
        }

        public TerminalNode TERMINATED(int i) {
            return getToken(SqlBaseParser.TERMINATED, i);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public TerminalNode COLLECTION() {
            return getToken(SqlBaseParser.COLLECTION, 0);
        }

        public TerminalNode ITEMS() {
            return getToken(SqlBaseParser.ITEMS, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode KEYS() {
            return getToken(SqlBaseParser.KEYS, 0);
        }

        public TerminalNode LINES() {
            return getToken(SqlBaseParser.LINES, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public TerminalNode DEFINED() {
            return getToken(SqlBaseParser.DEFINED, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public List<StringLitContext> stringLit() {
            return getRuleContexts(StringLitContext.class);
        }

        public StringLitContext stringLit(int i) {
            return getRuleContext(StringLitContext.class, i);
        }

        public TerminalNode ESCAPED() {
            return getToken(SqlBaseParser.ESCAPED, 0);
        }

        public RowFormatDelimitedContext(RowFormatContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRowFormatDelimited(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRowFormatDelimited(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRowFormatDelimited(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RowFormatContext rowFormat() throws RecognitionException {
        RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
        enterRule(_localctx, 242, RULE_rowFormat);
        try {
            setState(2896);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 368, _ctx)) {
                case 1:
                    _localctx = new RowFormatSerdeContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2847);
                    match(ROW);
                    setState(2848);
                    match(FORMAT);
                    setState(2849);
                    match(SERDE);
                    setState(2850);
                    ((RowFormatSerdeContext) _localctx).name = stringLit();
                    setState(2854);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 361, _ctx)) {
                        case 1: {
                            setState(2851);
                            match(WITH);
                            setState(2852);
                            match(SERDEPROPERTIES);
                            setState(2853);
                            ((RowFormatSerdeContext) _localctx).props = propertyList();
                        }
                        break;
                    }
                }
                break;
                case 2:
                    _localctx = new RowFormatDelimitedContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2856);
                    match(ROW);
                    setState(2857);
                    match(FORMAT);
                    setState(2858);
                    match(DELIMITED);
                    setState(2868);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 363, _ctx)) {
                        case 1: {
                            setState(2859);
                            match(FIELDS);
                            setState(2860);
                            match(TERMINATED);
                            setState(2861);
                            match(BY);
                            setState(2862);
                            ((RowFormatDelimitedContext) _localctx).fieldsTerminatedBy = stringLit();
                            setState(2866);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 362, _ctx)) {
                                case 1: {
                                    setState(2863);
                                    match(ESCAPED);
                                    setState(2864);
                                    match(BY);
                                    setState(2865);
                                    ((RowFormatDelimitedContext) _localctx).escapedBy = stringLit();
                                }
                                break;
                            }
                        }
                        break;
                    }
                    setState(2875);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 364, _ctx)) {
                        case 1: {
                            setState(2870);
                            match(COLLECTION);
                            setState(2871);
                            match(ITEMS);
                            setState(2872);
                            match(TERMINATED);
                            setState(2873);
                            match(BY);
                            setState(2874);
                            ((RowFormatDelimitedContext) _localctx).collectionItemsTerminatedBy = stringLit();
                        }
                        break;
                    }
                    setState(2882);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 365, _ctx)) {
                        case 1: {
                            setState(2877);
                            match(MAP);
                            setState(2878);
                            match(KEYS);
                            setState(2879);
                            match(TERMINATED);
                            setState(2880);
                            match(BY);
                            setState(2881);
                            ((RowFormatDelimitedContext) _localctx).keysTerminatedBy = stringLit();
                        }
                        break;
                    }
                    setState(2888);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 366, _ctx)) {
                        case 1: {
                            setState(2884);
                            match(LINES);
                            setState(2885);
                            match(TERMINATED);
                            setState(2886);
                            match(BY);
                            setState(2887);
                            ((RowFormatDelimitedContext) _localctx).linesSeparatedBy = stringLit();
                        }
                        break;
                    }
                    setState(2894);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 367, _ctx)) {
                        case 1: {
                            setState(2890);
                            match(NULL);
                            setState(2891);
                            match(DEFINED);
                            setState(2892);
                            match(AS);
                            setState(2893);
                            ((RowFormatDelimitedContext) _localctx).nullDefinedAs = stringLit();
                        }
                        break;
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MultipartIdentifierListContext extends ParserRuleContext {
        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public MultipartIdentifierListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multipartIdentifierList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultipartIdentifierList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultipartIdentifierList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultipartIdentifierList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MultipartIdentifierListContext multipartIdentifierList() throws RecognitionException {
        MultipartIdentifierListContext _localctx = new MultipartIdentifierListContext(_ctx, getState());
        enterRule(_localctx, 244, RULE_multipartIdentifierList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2898);
                multipartIdentifier();
                setState(2903);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2899);
                            match(COMMA);
                            setState(2900);
                            multipartIdentifier();
                        }
                    }
                    setState(2905);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MultipartIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext errorCapturingIdentifier;
        public List<ErrorCapturingIdentifierContext> parts = new ArrayList<ErrorCapturingIdentifierContext>();

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(SqlBaseParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(SqlBaseParser.DOT, i);
        }

        public MultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multipartIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultipartIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultipartIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultipartIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MultipartIdentifierContext multipartIdentifier() throws RecognitionException {
        MultipartIdentifierContext _localctx = new MultipartIdentifierContext(_ctx, getState());
        enterRule(_localctx, 246, RULE_multipartIdentifier);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2906);
                ((MultipartIdentifierContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                ((MultipartIdentifierContext) _localctx).parts.add(((MultipartIdentifierContext) _localctx).errorCapturingIdentifier);
                setState(2911);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 370, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2907);
                                match(DOT);
                                setState(2908);
                                ((MultipartIdentifierContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                                ((MultipartIdentifierContext) _localctx).parts.add(((MultipartIdentifierContext) _localctx).errorCapturingIdentifier);
                            }
                        }
                    }
                    setState(2913);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 370, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MultipartIdentifierPropertyListContext extends ParserRuleContext {
        public List<MultipartIdentifierPropertyContext> multipartIdentifierProperty() {
            return getRuleContexts(MultipartIdentifierPropertyContext.class);
        }

        public MultipartIdentifierPropertyContext multipartIdentifierProperty(int i) {
            return getRuleContext(MultipartIdentifierPropertyContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public MultipartIdentifierPropertyListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multipartIdentifierPropertyList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultipartIdentifierPropertyList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultipartIdentifierPropertyList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultipartIdentifierPropertyList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() throws RecognitionException {
        MultipartIdentifierPropertyListContext _localctx = new MultipartIdentifierPropertyListContext(_ctx, getState());
        enterRule(_localctx, 248, RULE_multipartIdentifierPropertyList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2914);
                multipartIdentifierProperty();
                setState(2919);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2915);
                            match(COMMA);
                            setState(2916);
                            multipartIdentifierProperty();
                        }
                    }
                    setState(2921);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MultipartIdentifierPropertyContext extends ParserRuleContext {
        public PropertyListContext options;

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public MultipartIdentifierPropertyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multipartIdentifierProperty;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultipartIdentifierProperty(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultipartIdentifierProperty(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultipartIdentifierProperty(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MultipartIdentifierPropertyContext multipartIdentifierProperty() throws RecognitionException {
        MultipartIdentifierPropertyContext _localctx = new MultipartIdentifierPropertyContext(_ctx, getState());
        enterRule(_localctx, 250, RULE_multipartIdentifierProperty);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2922);
                multipartIdentifier();
                setState(2925);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == OPTIONS) {
                    {
                        setState(2923);
                        match(OPTIONS);
                        setState(2924);
                        ((MultipartIdentifierPropertyContext) _localctx).options = propertyList();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext db;
        public ErrorCapturingIdentifierContext table;

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(SqlBaseParser.DOT, 0);
        }

        public TableIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTableIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableIdentifierContext tableIdentifier() throws RecognitionException {
        TableIdentifierContext _localctx = new TableIdentifierContext(_ctx, getState());
        enterRule(_localctx, 252, RULE_tableIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2930);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 373, _ctx)) {
                    case 1: {
                        setState(2927);
                        ((TableIdentifierContext) _localctx).db = errorCapturingIdentifier();
                        setState(2928);
                        match(DOT);
                    }
                    break;
                }
                setState(2932);
                ((TableIdentifierContext) _localctx).table = errorCapturingIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext db;
        public ErrorCapturingIdentifierContext function;

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(SqlBaseParser.DOT, 0);
        }

        public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFunctionIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFunctionIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
        FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
        enterRule(_localctx, 254, RULE_functionIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2937);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 374, _ctx)) {
                    case 1: {
                        setState(2934);
                        ((FunctionIdentifierContext) _localctx).db = errorCapturingIdentifier();
                        setState(2935);
                        match(DOT);
                    }
                    break;
                }
                setState(2939);
                ((FunctionIdentifierContext) _localctx).function = errorCapturingIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NamedExpressionContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext name;

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public NamedExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNamedExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamedExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NamedExpressionContext namedExpression() throws RecognitionException {
        NamedExpressionContext _localctx = new NamedExpressionContext(_ctx, getState());
        enterRule(_localctx, 256, RULE_namedExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2941);
                expression();
                setState(2949);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 377, _ctx)) {
                    case 1: {
                        setState(2943);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 375, _ctx)) {
                            case 1: {
                                setState(2942);
                                match(AS);
                            }
                            break;
                        }
                        setState(2947);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 376, _ctx)) {
                            case 1: {
                                setState(2945);
                                ((NamedExpressionContext) _localctx).name = errorCapturingIdentifier();
                            }
                            break;
                            case 2: {
                                setState(2946);
                                identifierList();
                            }
                            break;
                        }
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NamedExpressionSeqContext extends ParserRuleContext {
        public List<NamedExpressionContext> namedExpression() {
            return getRuleContexts(NamedExpressionContext.class);
        }

        public NamedExpressionContext namedExpression(int i) {
            return getRuleContext(NamedExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public NamedExpressionSeqContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedExpressionSeq;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNamedExpressionSeq(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNamedExpressionSeq(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedExpressionSeq(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NamedExpressionSeqContext namedExpressionSeq() throws RecognitionException {
        NamedExpressionSeqContext _localctx = new NamedExpressionSeqContext(_ctx, getState());
        enterRule(_localctx, 258, RULE_namedExpressionSeq);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2951);
                namedExpression();
                setState(2956);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 378, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2952);
                                match(COMMA);
                                setState(2953);
                                namedExpression();
                            }
                        }
                    }
                    setState(2958);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 378, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionFieldListContext extends ParserRuleContext {
        public PartitionFieldContext partitionField;
        public List<PartitionFieldContext> fields = new ArrayList<PartitionFieldContext>();

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<PartitionFieldContext> partitionField() {
            return getRuleContexts(PartitionFieldContext.class);
        }

        public PartitionFieldContext partitionField(int i) {
            return getRuleContext(PartitionFieldContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public PartitionFieldListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionFieldList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPartitionFieldList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPartitionFieldList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionFieldList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionFieldListContext partitionFieldList() throws RecognitionException {
        PartitionFieldListContext _localctx = new PartitionFieldListContext(_ctx, getState());
        enterRule(_localctx, 260, RULE_partitionFieldList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2959);
                match(LEFT_PAREN);
                setState(2960);
                ((PartitionFieldListContext) _localctx).partitionField = partitionField();
                ((PartitionFieldListContext) _localctx).fields.add(((PartitionFieldListContext) _localctx).partitionField);
                setState(2965);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2961);
                            match(COMMA);
                            setState(2962);
                            ((PartitionFieldListContext) _localctx).partitionField = partitionField();
                            ((PartitionFieldListContext) _localctx).fields.add(((PartitionFieldListContext) _localctx).partitionField);
                        }
                    }
                    setState(2967);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2968);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionFieldContext extends ParserRuleContext {
        public PartitionFieldContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionField;
        }

        public PartitionFieldContext() {
        }

        public void copyFrom(PartitionFieldContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionColumnContext extends PartitionFieldContext {
        public ColTypeContext colType() {
            return getRuleContext(ColTypeContext.class, 0);
        }

        public PartitionColumnContext(PartitionFieldContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPartitionColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPartitionColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionTransformContext extends PartitionFieldContext {
        public TransformContext transform() {
            return getRuleContext(TransformContext.class, 0);
        }

        public PartitionTransformContext(PartitionFieldContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPartitionTransform(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPartitionTransform(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionTransform(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionFieldContext partitionField() throws RecognitionException {
        PartitionFieldContext _localctx = new PartitionFieldContext(_ctx, getState());
        enterRule(_localctx, 262, RULE_partitionField);
        try {
            setState(2972);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 380, _ctx)) {
                case 1:
                    _localctx = new PartitionTransformContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2970);
                    transform();
                }
                break;
                case 2:
                    _localctx = new PartitionColumnContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2971);
                    colType();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TransformContext extends ParserRuleContext {
        public TransformContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_transform;
        }

        public TransformContext() {
        }

        public void copyFrom(TransformContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentityTransformContext extends TransformContext {
        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public IdentityTransformContext(TransformContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIdentityTransform(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitIdentityTransform(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentityTransform(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ApplyTransformContext extends TransformContext {
        public IdentifierContext transformName;
        public TransformArgumentContext transformArgument;
        public List<TransformArgumentContext> argument = new ArrayList<TransformArgumentContext>();

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public List<TransformArgumentContext> transformArgument() {
            return getRuleContexts(TransformArgumentContext.class);
        }

        public TransformArgumentContext transformArgument(int i) {
            return getRuleContext(TransformArgumentContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public ApplyTransformContext(TransformContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterApplyTransform(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitApplyTransform(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitApplyTransform(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TransformContext transform() throws RecognitionException {
        TransformContext _localctx = new TransformContext(_ctx, getState());
        enterRule(_localctx, 264, RULE_transform);
        int _la;
        try {
            setState(2987);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 382, _ctx)) {
                case 1:
                    _localctx = new IdentityTransformContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2974);
                    qualifiedName();
                }
                break;
                case 2:
                    _localctx = new ApplyTransformContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2975);
                    ((ApplyTransformContext) _localctx).transformName = identifier();
                    setState(2976);
                    match(LEFT_PAREN);
                    setState(2977);
                    ((ApplyTransformContext) _localctx).transformArgument = transformArgument();
                    ((ApplyTransformContext) _localctx).argument.add(((ApplyTransformContext) _localctx).transformArgument);
                    setState(2982);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2978);
                                match(COMMA);
                                setState(2979);
                                ((ApplyTransformContext) _localctx).transformArgument = transformArgument();
                                ((ApplyTransformContext) _localctx).argument.add(((ApplyTransformContext) _localctx).transformArgument);
                            }
                        }
                        setState(2984);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2985);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TransformArgumentContext extends ParserRuleContext {
        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public TransformArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_transformArgument;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTransformArgument(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitTransformArgument(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTransformArgument(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TransformArgumentContext transformArgument() throws RecognitionException {
        TransformArgumentContext _localctx = new TransformArgumentContext(_ctx, getState());
        enterRule(_localctx, 266, RULE_transformArgument);
        try {
            setState(2991);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 383, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2989);
                    qualifiedName();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2990);
                    constant();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionContext extends ParserRuleContext {
        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public ExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionContext expression() throws RecognitionException {
        ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
        enterRule(_localctx, 268, RULE_expression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2993);
                booleanExpression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NamedArgumentExpressionContext extends ParserRuleContext {
        public IdentifierContext key;
        public ExpressionContext value;

        public TerminalNode FAT_ARROW() {
            return getToken(SqlBaseParser.FAT_ARROW, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public NamedArgumentExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedArgumentExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNamedArgumentExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNamedArgumentExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedArgumentExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NamedArgumentExpressionContext namedArgumentExpression() throws RecognitionException {
        NamedArgumentExpressionContext _localctx = new NamedArgumentExpressionContext(_ctx, getState());
        enterRule(_localctx, 270, RULE_namedArgumentExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2995);
                ((NamedArgumentExpressionContext) _localctx).key = identifier();
                setState(2996);
                match(FAT_ARROW);
                setState(2997);
                ((NamedArgumentExpressionContext) _localctx).value = expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionArgumentContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public NamedArgumentExpressionContext namedArgumentExpression() {
            return getRuleContext(NamedArgumentExpressionContext.class, 0);
        }

        public FunctionArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionArgument;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFunctionArgument(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFunctionArgument(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionArgument(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionArgumentContext functionArgument() throws RecognitionException {
        FunctionArgumentContext _localctx = new FunctionArgumentContext(_ctx, getState());
        enterRule(_localctx, 272, RULE_functionArgument);
        try {
            setState(3001);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 384, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2999);
                    expression();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3000);
                    namedArgumentExpression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionSeqContext extends ParserRuleContext {
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public ExpressionSeqContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressionSeq;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExpressionSeq(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExpressionSeq(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExpressionSeq(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionSeqContext expressionSeq() throws RecognitionException {
        ExpressionSeqContext _localctx = new ExpressionSeqContext(_ctx, getState());
        enterRule(_localctx, 274, RULE_expressionSeq);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3003);
                expression();
                setState(3008);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3004);
                            match(COMMA);
                            setState(3005);
                            expression();
                        }
                    }
                    setState(3010);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BooleanExpressionContext extends ParserRuleContext {
        public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_booleanExpression;
        }

        public BooleanExpressionContext() {
        }

        public void copyFrom(BooleanExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LogicalNotContext extends BooleanExpressionContext {
        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode BANG() {
            return getToken(SqlBaseParser.BANG, 0);
        }

        public LogicalNotContext(BooleanExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLogicalNot(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLogicalNot(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLogicalNot(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PredicatedContext extends BooleanExpressionContext {
        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public PredicateContext predicate() {
            return getRuleContext(PredicateContext.class, 0);
        }

        public PredicatedContext(BooleanExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPredicated(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPredicated(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPredicated(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExistsContext extends BooleanExpressionContext {
        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public ExistsContext(BooleanExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExists(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExists(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExists(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LogicalBinaryContext extends BooleanExpressionContext {
        public BooleanExpressionContext left;
        public Token operator;
        public BooleanExpressionContext right;

        public List<BooleanExpressionContext> booleanExpression() {
            return getRuleContexts(BooleanExpressionContext.class);
        }

        public BooleanExpressionContext booleanExpression(int i) {
            return getRuleContext(BooleanExpressionContext.class, i);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public LogicalBinaryContext(BooleanExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLogicalBinary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLogicalBinary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLogicalBinary(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BooleanExpressionContext booleanExpression() throws RecognitionException {
        return booleanExpression(0);
    }

    private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState);
        BooleanExpressionContext _prevctx = _localctx;
        int _startState = 276;
        enterRecursionRule(_localctx, 276, RULE_booleanExpression, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3023);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 387, _ctx)) {
                    case 1: {
                        _localctx = new LogicalNotContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;

                        setState(3012);
                        _la = _input.LA(1);
                        if (!(_la == BANG || _la == NOT)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(3013);
                        booleanExpression(5);
                    }
                    break;
                    case 2: {
                        _localctx = new ExistsContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3014);
                        match(EXISTS);
                        setState(3015);
                        match(LEFT_PAREN);
                        setState(3016);
                        query();
                        setState(3017);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 3: {
                        _localctx = new PredicatedContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3019);
                        valueExpression(0);
                        setState(3021);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 386, _ctx)) {
                            case 1: {
                                setState(3020);
                                predicate();
                            }
                            break;
                        }
                    }
                    break;
                }
                _ctx.stop = _input.LT(-1);
                setState(3033);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 389, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(3031);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 388, _ctx)) {
                                case 1: {
                                    _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                                    ((LogicalBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
                                    setState(3025);
                                    if (!(precpred(_ctx, 2)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                                    setState(3026);
                                    ((LogicalBinaryContext) _localctx).operator = match(AND);
                                    setState(3027);
                                    ((LogicalBinaryContext) _localctx).right = booleanExpression(3);
                                }
                                break;
                                case 2: {
                                    _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                                    ((LogicalBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
                                    setState(3028);
                                    if (!(precpred(_ctx, 1)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                                    setState(3029);
                                    ((LogicalBinaryContext) _localctx).operator = match(OR);
                                    setState(3030);
                                    ((LogicalBinaryContext) _localctx).right = booleanExpression(2);
                                }
                                break;
                            }
                        }
                    }
                    setState(3035);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 389, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FuzzinessExpressionContext extends ParserRuleContext {
        public TerminalNode AUTO() {
            return getToken(SqlBaseParser.AUTO, 0);
        }

        public TerminalNode SINGLE_DIGIT() {
            return getToken(SqlBaseParser.SINGLE_DIGIT, 0);
        }

        public FuzzinessExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fuzzinessExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFuzzinessExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFuzzinessExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFuzzinessExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FuzzinessExpressionContext fuzzinessExpression() throws RecognitionException {
        FuzzinessExpressionContext _localctx = new FuzzinessExpressionContext(_ctx, getState());
        enterRule(_localctx, 278, RULE_fuzzinessExpression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3036);
                _la = _input.LA(1);
                if (!(_la == AUTO || _la == SINGLE_DIGIT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PredicateContext extends ParserRuleContext {
        public Token kind;
        public ValueExpressionContext lower;
        public ValueExpressionContext upper;
        public ValueExpressionContext pattern;
        public Token quantifier;
        public StringLitContext escapeChar;
        public ValueExpressionContext right;

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public TerminalNode BETWEEN() {
            return getToken(SqlBaseParser.BETWEEN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RLIKE() {
            return getToken(SqlBaseParser.RLIKE, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public TerminalNode ILIKE() {
            return getToken(SqlBaseParser.ILIKE, 0);
        }

        public TerminalNode ANY() {
            return getToken(SqlBaseParser.ANY, 0);
        }

        public TerminalNode SOME() {
            return getToken(SqlBaseParser.SOME, 0);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        public TerminalNode ESCAPE() {
            return getToken(SqlBaseParser.ESCAPE, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode IS() {
            return getToken(SqlBaseParser.IS, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public TerminalNode TRUE() {
            return getToken(SqlBaseParser.TRUE, 0);
        }

        public TerminalNode FALSE() {
            return getToken(SqlBaseParser.FALSE, 0);
        }

        public TerminalNode UNKNOWN() {
            return getToken(SqlBaseParser.UNKNOWN, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode DISTINCT() {
            return getToken(SqlBaseParser.DISTINCT, 0);
        }

        public PredicateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_predicate;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPredicate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPredicate(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPredicate(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PredicateContext predicate() throws RecognitionException {
        PredicateContext _localctx = new PredicateContext(_ctx, getState());
        enterRule(_localctx, 280, RULE_predicate);
        int _la;
        try {
            setState(3120);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 403, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3039);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3038);
                            match(NOT);
                        }
                    }

                    setState(3041);
                    ((PredicateContext) _localctx).kind = match(BETWEEN);
                    setState(3042);
                    ((PredicateContext) _localctx).lower = valueExpression(0);
                    setState(3043);
                    match(AND);
                    setState(3044);
                    ((PredicateContext) _localctx).upper = valueExpression(0);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3047);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3046);
                            match(NOT);
                        }
                    }

                    setState(3049);
                    ((PredicateContext) _localctx).kind = match(IN);
                    setState(3050);
                    match(LEFT_PAREN);
                    setState(3051);
                    expression();
                    setState(3056);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(3052);
                                match(COMMA);
                                setState(3053);
                                expression();
                            }
                        }
                        setState(3058);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(3059);
                    match(RIGHT_PAREN);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3062);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3061);
                            match(NOT);
                        }
                    }

                    setState(3064);
                    ((PredicateContext) _localctx).kind = match(IN);
                    setState(3065);
                    match(LEFT_PAREN);
                    setState(3066);
                    query();
                    setState(3067);
                    match(RIGHT_PAREN);
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3070);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3069);
                            match(NOT);
                        }
                    }

                    setState(3072);
                    ((PredicateContext) _localctx).kind = match(RLIKE);
                    setState(3073);
                    ((PredicateContext) _localctx).pattern = valueExpression(0);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3075);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3074);
                            match(NOT);
                        }
                    }

                    setState(3077);
                    ((PredicateContext) _localctx).kind = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == LIKE || _la == ILIKE)) {
                        ((PredicateContext) _localctx).kind = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3078);
                    ((PredicateContext) _localctx).quantifier = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == ALL || _la == ANY || _la == SOME)) {
                        ((PredicateContext) _localctx).quantifier = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3092);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 397, _ctx)) {
                        case 1: {
                            setState(3079);
                            match(LEFT_PAREN);
                            setState(3080);
                            match(RIGHT_PAREN);
                        }
                        break;
                        case 2: {
                            setState(3081);
                            match(LEFT_PAREN);
                            setState(3082);
                            expression();
                            setState(3087);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(3083);
                                        match(COMMA);
                                        setState(3084);
                                        expression();
                                    }
                                }
                                setState(3089);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                            setState(3090);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3095);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3094);
                            match(NOT);
                        }
                    }

                    setState(3097);
                    ((PredicateContext) _localctx).kind = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == LIKE || _la == ILIKE)) {
                        ((PredicateContext) _localctx).kind = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3098);
                    ((PredicateContext) _localctx).pattern = valueExpression(0);
                    setState(3101);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 399, _ctx)) {
                        case 1: {
                            setState(3099);
                            match(ESCAPE);
                            setState(3100);
                            ((PredicateContext) _localctx).escapeChar = stringLit();
                        }
                        break;
                    }
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(3103);
                    match(IS);
                    setState(3105);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3104);
                            match(NOT);
                        }
                    }

                    setState(3107);
                    ((PredicateContext) _localctx).kind = match(NULL);
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(3108);
                    match(IS);
                    setState(3110);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3109);
                            match(NOT);
                        }
                    }

                    setState(3112);
                    ((PredicateContext) _localctx).kind = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == FALSE || _la == TRUE || _la == UNKNOWN)) {
                        ((PredicateContext) _localctx).kind = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(3113);
                    match(IS);
                    setState(3115);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(3114);
                            match(NOT);
                        }
                    }

                    setState(3117);
                    ((PredicateContext) _localctx).kind = match(DISTINCT);
                    setState(3118);
                    match(FROM);
                    setState(3119);
                    ((PredicateContext) _localctx).right = valueExpression(0);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ValueExpressionContext extends ParserRuleContext {
        public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_valueExpression;
        }

        public ValueExpressionContext() {
        }

        public void copyFrom(ValueExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ValueExpressionDefaultContext extends ValueExpressionContext {
        public PrimaryExpressionContext primaryExpression() {
            return getRuleContext(PrimaryExpressionContext.class, 0);
        }

        public ValueExpressionDefaultContext(ValueExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterValueExpressionDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitValueExpressionDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitValueExpressionDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ComparisonContext extends ValueExpressionContext {
        public ValueExpressionContext left;
        public ValueExpressionContext right;

        public ComparisonOperatorContext comparisonOperator() {
            return getRuleContext(ComparisonOperatorContext.class, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public ComparisonContext(ValueExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterComparison(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitComparison(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComparison(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ArithmeticBinaryContext extends ValueExpressionContext {
        public ValueExpressionContext left;
        public Token operator;
        public ValueExpressionContext right;

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public TerminalNode SLASH() {
            return getToken(SqlBaseParser.SLASH, 0);
        }

        public TerminalNode PERCENT() {
            return getToken(SqlBaseParser.PERCENT, 0);
        }

        public TerminalNode DIV() {
            return getToken(SqlBaseParser.DIV, 0);
        }

        public TerminalNode PLUS() {
            return getToken(SqlBaseParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public TerminalNode CONCAT_PIPE() {
            return getToken(SqlBaseParser.CONCAT_PIPE, 0);
        }

        public TerminalNode AMPERSAND() {
            return getToken(SqlBaseParser.AMPERSAND, 0);
        }

        public TerminalNode HAT() {
            return getToken(SqlBaseParser.HAT, 0);
        }

        public TerminalNode PIPE() {
            return getToken(SqlBaseParser.PIPE, 0);
        }

        public ArithmeticBinaryContext(ValueExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterArithmeticBinary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitArithmeticBinary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitArithmeticBinary(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ArithmeticUnaryContext extends ValueExpressionContext {
        public Token operator;

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public TerminalNode PLUS() {
            return getToken(SqlBaseParser.PLUS, 0);
        }

        public TerminalNode TILDE() {
            return getToken(SqlBaseParser.TILDE, 0);
        }

        public ArithmeticUnaryContext(ValueExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterArithmeticUnary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitArithmeticUnary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitArithmeticUnary(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ValueExpressionContext valueExpression() throws RecognitionException {
        return valueExpression(0);
    }

    private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState);
        ValueExpressionContext _prevctx = _localctx;
        int _startState = 282;
        enterRecursionRule(_localctx, 282, RULE_valueExpression, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3126);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 404, _ctx)) {
                    case 1: {
                        _localctx = new ValueExpressionDefaultContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;

                        setState(3123);
                        primaryExpression(0);
                    }
                    break;
                    case 2: {
                        _localctx = new ArithmeticUnaryContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3124);
                        ((ArithmeticUnaryContext) _localctx).operator = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & 35L) != 0))) {
                            ((ArithmeticUnaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(3125);
                        valueExpression(7);
                    }
                    break;
                }
                _ctx.stop = _input.LT(-1);
                setState(3149);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 406, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(3147);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 405, _ctx)) {
                                case 1: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(3128);
                                    if (!(precpred(_ctx, 6)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 6)");
                                    setState(3129);
                                    ((ArithmeticBinaryContext) _localctx).operator = _input.LT(1);
                                    _la = _input.LA(1);
                                    if (!(_la == DIV || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & 7L) != 0))) {
                                        ((ArithmeticBinaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(3130);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(7);
                                }
                                break;
                                case 2: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(3131);
                                    if (!(precpred(_ctx, 5)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 5)");
                                    setState(3132);
                                    ((ArithmeticBinaryContext) _localctx).operator = _input.LT(1);
                                    _la = _input.LA(1);
                                    if (!(((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & 259L) != 0))) {
                                        ((ArithmeticBinaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(3133);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(6);
                                }
                                break;
                                case 3: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(3134);
                                    if (!(precpred(_ctx, 4)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 4)");
                                    setState(3135);
                                    ((ArithmeticBinaryContext) _localctx).operator = match(AMPERSAND);
                                    setState(3136);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(5);
                                }
                                break;
                                case 4: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(3137);
                                    if (!(precpred(_ctx, 3)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                                    setState(3138);
                                    ((ArithmeticBinaryContext) _localctx).operator = match(HAT);
                                    setState(3139);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(4);
                                }
                                break;
                                case 5: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(3140);
                                    if (!(precpred(_ctx, 2)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                                    setState(3141);
                                    ((ArithmeticBinaryContext) _localctx).operator = match(PIPE);
                                    setState(3142);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(3);
                                }
                                break;
                                case 6: {
                                    _localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ComparisonContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(3143);
                                    if (!(precpred(_ctx, 1)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                                    setState(3144);
                                    comparisonOperator();
                                    setState(3145);
                                    ((ComparisonContext) _localctx).right = valueExpression(2);
                                }
                                break;
                            }
                        }
                    }
                    setState(3151);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 406, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DatetimeUnitContext extends ParserRuleContext {
        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public TerminalNode QUARTER() {
            return getToken(SqlBaseParser.QUARTER, 0);
        }

        public TerminalNode MONTH() {
            return getToken(SqlBaseParser.MONTH, 0);
        }

        public TerminalNode WEEK() {
            return getToken(SqlBaseParser.WEEK, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public TerminalNode DAYOFYEAR() {
            return getToken(SqlBaseParser.DAYOFYEAR, 0);
        }

        public TerminalNode HOUR() {
            return getToken(SqlBaseParser.HOUR, 0);
        }

        public TerminalNode MINUTE() {
            return getToken(SqlBaseParser.MINUTE, 0);
        }

        public TerminalNode SECOND() {
            return getToken(SqlBaseParser.SECOND, 0);
        }

        public TerminalNode MILLISECOND() {
            return getToken(SqlBaseParser.MILLISECOND, 0);
        }

        public TerminalNode MICROSECOND() {
            return getToken(SqlBaseParser.MICROSECOND, 0);
        }

        public DatetimeUnitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_datetimeUnit;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDatetimeUnit(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDatetimeUnit(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDatetimeUnit(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DatetimeUnitContext datetimeUnit() throws RecognitionException {
        DatetimeUnitContext _localctx = new DatetimeUnitContext(_ctx, getState());
        enterRule(_localctx, 284, RULE_datetimeUnit);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3152);
                _la = _input.LA(1);
                if (!(_la == DAY || _la == DAYOFYEAR || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 2990671627550721L) != 0) || _la == QUARTER || _la == SECOND || _la == WEEK || _la == YEAR)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrimaryExpressionContext extends ParserRuleContext {
        public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_primaryExpression;
        }

        public PrimaryExpressionContext() {
        }

        public void copyFrom(PrimaryExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StructContext extends PrimaryExpressionContext {
        public NamedExpressionContext namedExpression;
        public List<NamedExpressionContext> argument = new ArrayList<NamedExpressionContext>();

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<NamedExpressionContext> namedExpression() {
            return getRuleContexts(NamedExpressionContext.class);
        }

        public NamedExpressionContext namedExpression(int i) {
            return getRuleContext(NamedExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public StructContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStruct(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStruct(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStruct(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DereferenceContext extends PrimaryExpressionContext {
        public PrimaryExpressionContext base;
        public IdentifierContext fieldName;

        public TerminalNode DOT() {
            return getToken(SqlBaseParser.DOT, 0);
        }

        public PrimaryExpressionContext primaryExpression() {
            return getRuleContext(PrimaryExpressionContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public DereferenceContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDereference(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDereference(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDereference(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CastByColonContext extends PrimaryExpressionContext {
        public PrimaryExpressionContext primaryExpression() {
            return getRuleContext(PrimaryExpressionContext.class, 0);
        }

        public TerminalNode DOUBLE_COLON() {
            return getToken(SqlBaseParser.DOUBLE_COLON, 0);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public CastByColonContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCastByColon(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCastByColon(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCastByColon(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TimestampaddContext extends PrimaryExpressionContext {
        public Token name;
        public DatetimeUnitContext unit;
        public StringLitContext invalidUnit;
        public ValueExpressionContext unitsAmount;
        public ValueExpressionContext timestamp;

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode TIMESTAMPADD() {
            return getToken(SqlBaseParser.TIMESTAMPADD, 0);
        }

        public TerminalNode DATEADD() {
            return getToken(SqlBaseParser.DATEADD, 0);
        }

        public TerminalNode DATE_ADD() {
            return getToken(SqlBaseParser.DATE_ADD, 0);
        }

        public DatetimeUnitContext datetimeUnit() {
            return getRuleContext(DatetimeUnitContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TimestampaddContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTimestampadd(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTimestampadd(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTimestampadd(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SubstringContext extends PrimaryExpressionContext {
        public ValueExpressionContext str;
        public ValueExpressionContext pos;
        public ValueExpressionContext len;

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode SUBSTR() {
            return getToken(SqlBaseParser.SUBSTR, 0);
        }

        public TerminalNode SUBSTRING() {
            return getToken(SqlBaseParser.SUBSTRING, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public SubstringContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSubstring(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSubstring(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSubstring(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CastContext extends PrimaryExpressionContext {
        public Token name;

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode CAST() {
            return getToken(SqlBaseParser.CAST, 0);
        }

        public TerminalNode TRY_CAST() {
            return getToken(SqlBaseParser.TRY_CAST, 0);
        }

        public CastContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCast(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCast(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCast(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LambdaContext extends PrimaryExpressionContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode ARROW() {
            return getToken(SqlBaseParser.ARROW, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public LambdaContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLambda(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLambda(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLambda(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ParenthesizedExpressionContext extends PrimaryExpressionContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public ParenthesizedExpressionContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterParenthesizedExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitParenthesizedExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitParenthesizedExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Any_valueContext extends PrimaryExpressionContext {
        public TerminalNode ANY_VALUE() {
            return getToken(SqlBaseParser.ANY_VALUE, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public Any_valueContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAny_value(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAny_value(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAny_value(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TrimContext extends PrimaryExpressionContext {
        public Token trimOption;
        public ValueExpressionContext trimStr;
        public ValueExpressionContext srcStr;

        public TerminalNode TRIM() {
            return getToken(SqlBaseParser.TRIM, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode BOTH() {
            return getToken(SqlBaseParser.BOTH, 0);
        }

        public TerminalNode LEADING() {
            return getToken(SqlBaseParser.LEADING, 0);
        }

        public TerminalNode TRAILING() {
            return getToken(SqlBaseParser.TRAILING, 0);
        }

        public TrimContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTrim(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTrim(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTrim(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SimpleCaseContext extends PrimaryExpressionContext {
        public ExpressionContext value;
        public ExpressionContext elseExpression;

        public TerminalNode CASE() {
            return getToken(SqlBaseParser.CASE, 0);
        }

        public TerminalNode END() {
            return getToken(SqlBaseParser.END, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<WhenClauseContext> whenClause() {
            return getRuleContexts(WhenClauseContext.class);
        }

        public WhenClauseContext whenClause(int i) {
            return getRuleContext(WhenClauseContext.class, i);
        }

        public TerminalNode ELSE() {
            return getToken(SqlBaseParser.ELSE, 0);
        }

        public SimpleCaseContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSimpleCase(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSimpleCase(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSimpleCase(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CurrentLikeContext extends PrimaryExpressionContext {
        public Token name;

        public TerminalNode CURRENT_DATE() {
            return getToken(SqlBaseParser.CURRENT_DATE, 0);
        }

        public TerminalNode CURRENT_TIMESTAMP() {
            return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
        }

        public TerminalNode CURRENT_USER() {
            return getToken(SqlBaseParser.CURRENT_USER, 0);
        }

        public TerminalNode USER() {
            return getToken(SqlBaseParser.USER, 0);
        }

        public TerminalNode SESSION_USER() {
            return getToken(SqlBaseParser.SESSION_USER, 0);
        }

        public CurrentLikeContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCurrentLike(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCurrentLike(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCurrentLike(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnReferenceContext extends PrimaryExpressionContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ColumnReferenceContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterColumnReference(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitColumnReference(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColumnReference(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RowConstructorContext extends PrimaryExpressionContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<NamedExpressionContext> namedExpression() {
            return getRuleContexts(NamedExpressionContext.class);
        }

        public NamedExpressionContext namedExpression(int i) {
            return getRuleContext(NamedExpressionContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public RowConstructorContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRowConstructor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRowConstructor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRowConstructor(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LastContext extends PrimaryExpressionContext {
        public TerminalNode LAST() {
            return getToken(SqlBaseParser.LAST, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public LastContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLast(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLast(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLast(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StarContext extends PrimaryExpressionContext {
        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public ExceptClauseContext exceptClause() {
            return getRuleContext(ExceptClauseContext.class, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(SqlBaseParser.DOT, 0);
        }

        public StarContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStar(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStar(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStar(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class OverlayContext extends PrimaryExpressionContext {
        public ValueExpressionContext input;
        public ValueExpressionContext replace;
        public ValueExpressionContext position;
        public ValueExpressionContext length;

        public TerminalNode OVERLAY() {
            return getToken(SqlBaseParser.OVERLAY, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode PLACING() {
            return getToken(SqlBaseParser.PLACING, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public OverlayContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterOverlay(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitOverlay(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitOverlay(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SubscriptContext extends PrimaryExpressionContext {
        public PrimaryExpressionContext value;
        public ValueExpressionContext index;

        public TerminalNode LEFT_BRACKET() {
            return getToken(SqlBaseParser.LEFT_BRACKET, 0);
        }

        public TerminalNode RIGHT_BRACKET() {
            return getToken(SqlBaseParser.RIGHT_BRACKET, 0);
        }

        public PrimaryExpressionContext primaryExpression() {
            return getRuleContext(PrimaryExpressionContext.class, 0);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public SubscriptContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSubscript(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSubscript(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSubscript(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TimestampdiffContext extends PrimaryExpressionContext {
        public Token name;
        public DatetimeUnitContext unit;
        public StringLitContext invalidUnit;
        public ValueExpressionContext startTimestamp;
        public ValueExpressionContext endTimestamp;

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode TIMESTAMPDIFF() {
            return getToken(SqlBaseParser.TIMESTAMPDIFF, 0);
        }

        public TerminalNode DATEDIFF() {
            return getToken(SqlBaseParser.DATEDIFF, 0);
        }

        public TerminalNode DATE_DIFF() {
            return getToken(SqlBaseParser.DATE_DIFF, 0);
        }

        public TerminalNode TIMEDIFF() {
            return getToken(SqlBaseParser.TIMEDIFF, 0);
        }

        public DatetimeUnitContext datetimeUnit() {
            return getRuleContext(DatetimeUnitContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TimestampdiffContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTimestampdiff(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTimestampdiff(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTimestampdiff(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SubqueryExpressionContext extends PrimaryExpressionContext {
        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public SubqueryExpressionContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSubqueryExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSubqueryExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSubqueryExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CollateContext extends PrimaryExpressionContext {
        public PrimaryExpressionContext primaryExpression() {
            return getRuleContext(PrimaryExpressionContext.class, 0);
        }

        public CollateClauseContext collateClause() {
            return getRuleContext(CollateClauseContext.class, 0);
        }

        public CollateContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCollate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCollate(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCollate(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ConstantDefaultContext extends PrimaryExpressionContext {
        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public ConstantDefaultContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterConstantDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitConstantDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitConstantDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExtractContext extends PrimaryExpressionContext {
        public IdentifierContext field;
        public ValueExpressionContext source;

        public TerminalNode EXTRACT() {
            return getToken(SqlBaseParser.EXTRACT, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public ExtractContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExtract(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExtract(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExtract(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionCallContext extends PrimaryExpressionContext {
        public FunctionArgumentContext functionArgument;
        public List<FunctionArgumentContext> argument = new ArrayList<FunctionArgumentContext>();
        public BooleanExpressionContext where;
        public Token nullsOption;

        public FunctionNameContext functionName() {
            return getRuleContext(FunctionNameContext.class, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode WITHIN() {
            return getToken(SqlBaseParser.WITHIN, 0);
        }

        public TerminalNode GROUP() {
            return getToken(SqlBaseParser.GROUP, 0);
        }

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public List<SortItemContext> sortItem() {
            return getRuleContexts(SortItemContext.class);
        }

        public SortItemContext sortItem(int i) {
            return getRuleContext(SortItemContext.class, i);
        }

        public TerminalNode FILTER() {
            return getToken(SqlBaseParser.FILTER, 0);
        }

        public TerminalNode WHERE() {
            return getToken(SqlBaseParser.WHERE, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode OVER() {
            return getToken(SqlBaseParser.OVER, 0);
        }

        public WindowSpecContext windowSpec() {
            return getRuleContext(WindowSpecContext.class, 0);
        }

        public List<FunctionArgumentContext> functionArgument() {
            return getRuleContexts(FunctionArgumentContext.class);
        }

        public FunctionArgumentContext functionArgument(int i) {
            return getRuleContext(FunctionArgumentContext.class, i);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode RESPECT() {
            return getToken(SqlBaseParser.RESPECT, 0);
        }

        public SetQuantifierContext setQuantifier() {
            return getRuleContext(SetQuantifierContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public FunctionCallContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFunctionCall(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFunctionCall(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionCall(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SearchedCaseContext extends PrimaryExpressionContext {
        public ExpressionContext elseExpression;

        public TerminalNode CASE() {
            return getToken(SqlBaseParser.CASE, 0);
        }

        public TerminalNode END() {
            return getToken(SqlBaseParser.END, 0);
        }

        public List<WhenClauseContext> whenClause() {
            return getRuleContexts(WhenClauseContext.class);
        }

        public WhenClauseContext whenClause(int i) {
            return getRuleContext(WhenClauseContext.class, i);
        }

        public TerminalNode ELSE() {
            return getToken(SqlBaseParser.ELSE, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public SearchedCaseContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSearchedCase(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSearchedCase(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSearchedCase(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PositionContext extends PrimaryExpressionContext {
        public ValueExpressionContext substr;
        public ValueExpressionContext str;

        public TerminalNode POSITION() {
            return getToken(SqlBaseParser.POSITION, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public PositionContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPosition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPosition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPosition(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FirstContext extends PrimaryExpressionContext {
        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public FirstContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFirst(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFirst(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFirst(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrimaryExpressionContext primaryExpression() throws RecognitionException {
        return primaryExpression(0);
    }

    private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);
        PrimaryExpressionContext _prevctx = _localctx;
        int _startState = 286;
        enterRecursionRule(_localctx, 286, RULE_primaryExpression, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3397);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 434, _ctx)) {
                    case 1: {
                        _localctx = new CurrentLikeContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;

                        setState(3155);
                        ((CurrentLikeContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 13L) != 0) || _la == SESSION_USER || _la == USER)) {
                            ((CurrentLikeContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                    case 2: {
                        _localctx = new TimestampaddContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3156);
                        ((TimestampaddContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == DATEADD || _la == DATE_ADD || _la == TIMESTAMPADD)) {
                            ((TimestampaddContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(3157);
                        match(LEFT_PAREN);
                        setState(3160);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 407, _ctx)) {
                            case 1: {
                                setState(3158);
                                ((TimestampaddContext) _localctx).unit = datetimeUnit();
                            }
                            break;
                            case 2: {
                                setState(3159);
                                ((TimestampaddContext) _localctx).invalidUnit = stringLit();
                            }
                            break;
                        }
                        setState(3162);
                        match(COMMA);
                        setState(3163);
                        ((TimestampaddContext) _localctx).unitsAmount = valueExpression(0);
                        setState(3164);
                        match(COMMA);
                        setState(3165);
                        ((TimestampaddContext) _localctx).timestamp = valueExpression(0);
                        setState(3166);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 3: {
                        _localctx = new TimestampdiffContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3168);
                        ((TimestampdiffContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == DATEDIFF || _la == DATE_DIFF || _la == TIMEDIFF || _la == TIMESTAMPDIFF)) {
                            ((TimestampdiffContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(3169);
                        match(LEFT_PAREN);
                        setState(3172);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 408, _ctx)) {
                            case 1: {
                                setState(3170);
                                ((TimestampdiffContext) _localctx).unit = datetimeUnit();
                            }
                            break;
                            case 2: {
                                setState(3171);
                                ((TimestampdiffContext) _localctx).invalidUnit = stringLit();
                            }
                            break;
                        }
                        setState(3174);
                        match(COMMA);
                        setState(3175);
                        ((TimestampdiffContext) _localctx).startTimestamp = valueExpression(0);
                        setState(3176);
                        match(COMMA);
                        setState(3177);
                        ((TimestampdiffContext) _localctx).endTimestamp = valueExpression(0);
                        setState(3178);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 4: {
                        _localctx = new SearchedCaseContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3180);
                        match(CASE);
                        setState(3182);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(3181);
                                    whenClause();
                                }
                            }
                            setState(3184);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == WHEN);
                        setState(3188);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == ELSE) {
                            {
                                setState(3186);
                                match(ELSE);
                                setState(3187);
                                ((SearchedCaseContext) _localctx).elseExpression = expression();
                            }
                        }

                        setState(3190);
                        match(END);
                    }
                    break;
                    case 5: {
                        _localctx = new SimpleCaseContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3192);
                        match(CASE);
                        setState(3193);
                        ((SimpleCaseContext) _localctx).value = expression();
                        setState(3195);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(3194);
                                    whenClause();
                                }
                            }
                            setState(3197);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == WHEN);
                        setState(3201);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == ELSE) {
                            {
                                setState(3199);
                                match(ELSE);
                                setState(3200);
                                ((SimpleCaseContext) _localctx).elseExpression = expression();
                            }
                        }

                        setState(3203);
                        match(END);
                    }
                    break;
                    case 6: {
                        _localctx = new CastContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3205);
                        ((CastContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == CAST || _la == TRY_CAST)) {
                            ((CastContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(3206);
                        match(LEFT_PAREN);
                        setState(3207);
                        expression();
                        setState(3208);
                        match(AS);
                        setState(3209);
                        dataType();
                        setState(3210);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 7: {
                        _localctx = new StructContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3212);
                        match(STRUCT);
                        setState(3213);
                        match(LEFT_PAREN);
                        setState(3222);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 414, _ctx)) {
                            case 1: {
                                setState(3214);
                                ((StructContext) _localctx).namedExpression = namedExpression();
                                ((StructContext) _localctx).argument.add(((StructContext) _localctx).namedExpression);
                                setState(3219);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == COMMA) {
                                    {
                                        {
                                            setState(3215);
                                            match(COMMA);
                                            setState(3216);
                                            ((StructContext) _localctx).namedExpression = namedExpression();
                                            ((StructContext) _localctx).argument.add(((StructContext) _localctx).namedExpression);
                                        }
                                    }
                                    setState(3221);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                            break;
                        }
                        setState(3224);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 8: {
                        _localctx = new FirstContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3225);
                        match(FIRST);
                        setState(3226);
                        match(LEFT_PAREN);
                        setState(3227);
                        expression();
                        setState(3230);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == IGNORE) {
                            {
                                setState(3228);
                                match(IGNORE);
                                setState(3229);
                                match(NULLS);
                            }
                        }

                        setState(3232);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 9: {
                        _localctx = new Any_valueContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3234);
                        match(ANY_VALUE);
                        setState(3235);
                        match(LEFT_PAREN);
                        setState(3236);
                        expression();
                        setState(3239);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == IGNORE) {
                            {
                                setState(3237);
                                match(IGNORE);
                                setState(3238);
                                match(NULLS);
                            }
                        }

                        setState(3241);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 10: {
                        _localctx = new LastContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3243);
                        match(LAST);
                        setState(3244);
                        match(LEFT_PAREN);
                        setState(3245);
                        expression();
                        setState(3248);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == IGNORE) {
                            {
                                setState(3246);
                                match(IGNORE);
                                setState(3247);
                                match(NULLS);
                            }
                        }

                        setState(3250);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 11: {
                        _localctx = new PositionContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3252);
                        match(POSITION);
                        setState(3253);
                        match(LEFT_PAREN);
                        setState(3254);
                        ((PositionContext) _localctx).substr = valueExpression(0);
                        setState(3255);
                        match(IN);
                        setState(3256);
                        ((PositionContext) _localctx).str = valueExpression(0);
                        setState(3257);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 12: {
                        _localctx = new ConstantDefaultContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3259);
                        constant();
                    }
                    break;
                    case 13: {
                        _localctx = new StarContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3260);
                        match(ASTERISK);
                        setState(3262);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 418, _ctx)) {
                            case 1: {
                                setState(3261);
                                exceptClause();
                            }
                            break;
                        }
                    }
                    break;
                    case 14: {
                        _localctx = new StarContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3264);
                        qualifiedName();
                        setState(3265);
                        match(DOT);
                        setState(3266);
                        match(ASTERISK);
                        setState(3268);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 419, _ctx)) {
                            case 1: {
                                setState(3267);
                                exceptClause();
                            }
                            break;
                        }
                    }
                    break;
                    case 15: {
                        _localctx = new RowConstructorContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3270);
                        match(LEFT_PAREN);
                        setState(3271);
                        namedExpression();
                        setState(3274);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(3272);
                                    match(COMMA);
                                    setState(3273);
                                    namedExpression();
                                }
                            }
                            setState(3276);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == COMMA);
                        setState(3278);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 16: {
                        _localctx = new SubqueryExpressionContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3280);
                        match(LEFT_PAREN);
                        setState(3281);
                        query();
                        setState(3282);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 17: {
                        _localctx = new FunctionCallContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3284);
                        functionName();
                        setState(3285);
                        match(LEFT_PAREN);
                        setState(3297);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 423, _ctx)) {
                            case 1: {
                                setState(3287);
                                _errHandler.sync(this);
                                switch (getInterpreter().adaptivePredict(_input, 421, _ctx)) {
                                    case 1: {
                                        setState(3286);
                                        setQuantifier();
                                    }
                                    break;
                                }
                                setState(3289);
                                ((FunctionCallContext) _localctx).functionArgument = functionArgument();
                                ((FunctionCallContext) _localctx).argument.add(((FunctionCallContext) _localctx).functionArgument);
                                setState(3294);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == COMMA) {
                                    {
                                        {
                                            setState(3290);
                                            match(COMMA);
                                            setState(3291);
                                            ((FunctionCallContext) _localctx).functionArgument = functionArgument();
                                            ((FunctionCallContext) _localctx).argument.add(((FunctionCallContext) _localctx).functionArgument);
                                        }
                                    }
                                    setState(3296);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                            break;
                        }
                        setState(3299);
                        match(RIGHT_PAREN);
                        setState(3315);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 425, _ctx)) {
                            case 1: {
                                setState(3300);
                                match(WITHIN);
                                setState(3301);
                                match(GROUP);
                                setState(3302);
                                match(LEFT_PAREN);
                                setState(3303);
                                match(ORDER);
                                setState(3304);
                                match(BY);
                                setState(3305);
                                sortItem();
                                setState(3310);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == COMMA) {
                                    {
                                        {
                                            setState(3306);
                                            match(COMMA);
                                            setState(3307);
                                            sortItem();
                                        }
                                    }
                                    setState(3312);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                                setState(3313);
                                match(RIGHT_PAREN);
                            }
                            break;
                        }
                        setState(3323);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 426, _ctx)) {
                            case 1: {
                                setState(3317);
                                match(FILTER);
                                setState(3318);
                                match(LEFT_PAREN);
                                setState(3319);
                                match(WHERE);
                                setState(3320);
                                ((FunctionCallContext) _localctx).where = booleanExpression(0);
                                setState(3321);
                                match(RIGHT_PAREN);
                            }
                            break;
                        }
                        setState(3327);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 427, _ctx)) {
                            case 1: {
                                setState(3325);
                                ((FunctionCallContext) _localctx).nullsOption = _input.LT(1);
                                _la = _input.LA(1);
                                if (!(_la == IGNORE || _la == RESPECT)) {
                                    ((FunctionCallContext) _localctx).nullsOption = (Token) _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                                setState(3326);
                                match(NULLS);
                            }
                            break;
                        }
                        setState(3331);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 428, _ctx)) {
                            case 1: {
                                setState(3329);
                                match(OVER);
                                setState(3330);
                                windowSpec();
                            }
                            break;
                        }
                    }
                    break;
                    case 18: {
                        _localctx = new LambdaContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3333);
                        identifier();
                        setState(3334);
                        match(ARROW);
                        setState(3335);
                        expression();
                    }
                    break;
                    case 19: {
                        _localctx = new LambdaContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3337);
                        match(LEFT_PAREN);
                        setState(3338);
                        identifier();
                        setState(3341);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(3339);
                                    match(COMMA);
                                    setState(3340);
                                    identifier();
                                }
                            }
                            setState(3343);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == COMMA);
                        setState(3345);
                        match(RIGHT_PAREN);
                        setState(3346);
                        match(ARROW);
                        setState(3347);
                        expression();
                    }
                    break;
                    case 20: {
                        _localctx = new ColumnReferenceContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3349);
                        identifier();
                    }
                    break;
                    case 21: {
                        _localctx = new ParenthesizedExpressionContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3350);
                        match(LEFT_PAREN);
                        setState(3351);
                        expression();
                        setState(3352);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 22: {
                        _localctx = new ExtractContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3354);
                        match(EXTRACT);
                        setState(3355);
                        match(LEFT_PAREN);
                        setState(3356);
                        ((ExtractContext) _localctx).field = identifier();
                        setState(3357);
                        match(FROM);
                        setState(3358);
                        ((ExtractContext) _localctx).source = valueExpression(0);
                        setState(3359);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 23: {
                        _localctx = new SubstringContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3361);
                        _la = _input.LA(1);
                        if (!(_la == SUBSTR || _la == SUBSTRING)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(3362);
                        match(LEFT_PAREN);
                        setState(3363);
                        ((SubstringContext) _localctx).str = valueExpression(0);
                        setState(3364);
                        _la = _input.LA(1);
                        if (!(_la == COMMA || _la == FROM)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(3365);
                        ((SubstringContext) _localctx).pos = valueExpression(0);
                        setState(3368);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == COMMA || _la == FOR) {
                            {
                                setState(3366);
                                _la = _input.LA(1);
                                if (!(_la == COMMA || _la == FOR)) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                                setState(3367);
                                ((SubstringContext) _localctx).len = valueExpression(0);
                            }
                        }

                        setState(3370);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 24: {
                        _localctx = new TrimContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3372);
                        match(TRIM);
                        setState(3373);
                        match(LEFT_PAREN);
                        setState(3375);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 431, _ctx)) {
                            case 1: {
                                setState(3374);
                                ((TrimContext) _localctx).trimOption = _input.LT(1);
                                _la = _input.LA(1);
                                if (!(_la == BOTH || _la == LEADING || _la == TRAILING)) {
                                    ((TrimContext) _localctx).trimOption = (Token) _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                            }
                            break;
                        }
                        setState(3378);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 432, _ctx)) {
                            case 1: {
                                setState(3377);
                                ((TrimContext) _localctx).trimStr = valueExpression(0);
                            }
                            break;
                        }
                        setState(3380);
                        match(FROM);
                        setState(3381);
                        ((TrimContext) _localctx).srcStr = valueExpression(0);
                        setState(3382);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 25: {
                        _localctx = new OverlayContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(3384);
                        match(OVERLAY);
                        setState(3385);
                        match(LEFT_PAREN);
                        setState(3386);
                        ((OverlayContext) _localctx).input = valueExpression(0);
                        setState(3387);
                        match(PLACING);
                        setState(3388);
                        ((OverlayContext) _localctx).replace = valueExpression(0);
                        setState(3389);
                        match(FROM);
                        setState(3390);
                        ((OverlayContext) _localctx).position = valueExpression(0);
                        setState(3393);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == FOR) {
                            {
                                setState(3391);
                                match(FOR);
                                setState(3392);
                                ((OverlayContext) _localctx).length = valueExpression(0);
                            }
                        }

                        setState(3395);
                        match(RIGHT_PAREN);
                    }
                    break;
                }
                _ctx.stop = _input.LT(-1);
                setState(3414);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 436, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(3412);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 435, _ctx)) {
                                case 1: {
                                    _localctx = new CollateContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                    pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
                                    setState(3399);
                                    if (!(precpred(_ctx, 23)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 23)");
                                    setState(3400);
                                    collateClause();
                                }
                                break;
                                case 2: {
                                    _localctx = new CastByColonContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                    pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
                                    setState(3401);
                                    if (!(precpred(_ctx, 22)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 22)");
                                    setState(3402);
                                    match(DOUBLE_COLON);
                                    setState(3403);
                                    dataType();
                                }
                                break;
                                case 3: {
                                    _localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                    ((SubscriptContext) _localctx).value = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
                                    setState(3404);
                                    if (!(precpred(_ctx, 8)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 8)");
                                    setState(3405);
                                    match(LEFT_BRACKET);
                                    setState(3406);
                                    ((SubscriptContext) _localctx).index = valueExpression(0);
                                    setState(3407);
                                    match(RIGHT_BRACKET);
                                }
                                break;
                                case 4: {
                                    _localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                    ((DereferenceContext) _localctx).base = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
                                    setState(3409);
                                    if (!(precpred(_ctx, 6)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 6)");
                                    setState(3410);
                                    match(DOT);
                                    setState(3411);
                                    ((DereferenceContext) _localctx).fieldName = identifier();
                                }
                                break;
                            }
                        }
                    }
                    setState(3416);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 436, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LiteralTypeContext extends ParserRuleContext {
        public IdentifierContext unsupportedType;

        public TerminalNode DATE() {
            return getToken(SqlBaseParser.DATE, 0);
        }

        public TerminalNode TIMESTAMP() {
            return getToken(SqlBaseParser.TIMESTAMP, 0);
        }

        public TerminalNode TIMESTAMP_LTZ() {
            return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0);
        }

        public TerminalNode TIMESTAMP_NTZ() {
            return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode BINARY_HEX() {
            return getToken(SqlBaseParser.BINARY_HEX, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public LiteralTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_literalType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLiteralType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLiteralType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLiteralType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LiteralTypeContext literalType() throws RecognitionException {
        LiteralTypeContext _localctx = new LiteralTypeContext(_ctx, getState());
        enterRule(_localctx, 288, RULE_literalType);
        try {
            setState(3424);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 437, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3417);
                    match(DATE);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3418);
                    match(TIMESTAMP);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3419);
                    match(TIMESTAMP_LTZ);
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3420);
                    match(TIMESTAMP_NTZ);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3421);
                    match(INTERVAL);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3422);
                    match(BINARY_HEX);
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(3423);
                    ((LiteralTypeContext) _localctx).unsupportedType = identifier();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ConstantContext extends ParserRuleContext {
        public ConstantContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_constant;
        }

        public ConstantContext() {
        }

        public void copyFrom(ConstantContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NullLiteralContext extends ConstantContext {
        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public NullLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNullLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNullLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNullLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StringLiteralContext extends ConstantContext {
        public List<StringLitContext> stringLit() {
            return getRuleContexts(StringLitContext.class);
        }

        public StringLitContext stringLit(int i) {
            return getRuleContext(StringLitContext.class, i);
        }

        public StringLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStringLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStringLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStringLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TypeConstructorContext extends ConstantContext {
        public LiteralTypeContext literalType() {
            return getRuleContext(LiteralTypeContext.class, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TypeConstructorContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTypeConstructor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTypeConstructor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTypeConstructor(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PosParameterLiteralContext extends ConstantContext {
        public TerminalNode QUESTION() {
            return getToken(SqlBaseParser.QUESTION, 0);
        }

        public PosParameterLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPosParameterLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPosParameterLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPosParameterLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NamedParameterLiteralContext extends ConstantContext {
        public TerminalNode COLON() {
            return getToken(SqlBaseParser.COLON, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public NamedParameterLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNamedParameterLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNamedParameterLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedParameterLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IntervalLiteralContext extends ConstantContext {
        public IntervalContext interval() {
            return getRuleContext(IntervalContext.class, 0);
        }

        public IntervalLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIntervalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIntervalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIntervalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NumericLiteralContext extends ConstantContext {
        public NumberContext number() {
            return getRuleContext(NumberContext.class, 0);
        }

        public NumericLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNumericLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNumericLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNumericLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BooleanLiteralContext extends ConstantContext {
        public BooleanValueContext booleanValue() {
            return getRuleContext(BooleanValueContext.class, 0);
        }

        public BooleanLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterBooleanLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitBooleanLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBooleanLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConstantContext constant() throws RecognitionException {
        ConstantContext _localctx = new ConstantContext(_ctx, getState());
        enterRule(_localctx, 290, RULE_constant);
        try {
            int _alt;
            setState(3441);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 439, _ctx)) {
                case 1:
                    _localctx = new NullLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3426);
                    match(NULL);
                }
                break;
                case 2:
                    _localctx = new PosParameterLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3427);
                    match(QUESTION);
                }
                break;
                case 3:
                    _localctx = new NamedParameterLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3428);
                    match(COLON);
                    setState(3429);
                    identifier();
                }
                break;
                case 4:
                    _localctx = new IntervalLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3430);
                    interval();
                }
                break;
                case 5:
                    _localctx = new TypeConstructorContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3431);
                    literalType();
                    setState(3432);
                    stringLit();
                }
                break;
                case 6:
                    _localctx = new NumericLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3434);
                    number();
                }
                break;
                case 7:
                    _localctx = new BooleanLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 7);
                {
                    setState(3435);
                    booleanValue();
                }
                break;
                case 8:
                    _localctx = new StringLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 8);
                {
                    setState(3437);
                    _errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1: {
                                {
                                    setState(3436);
                                    stringLit();
                                }
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(3439);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 438, _ctx);
                    } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ComparisonOperatorContext extends ParserRuleContext {
        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public TerminalNode NEQ() {
            return getToken(SqlBaseParser.NEQ, 0);
        }

        public TerminalNode NEQJ() {
            return getToken(SqlBaseParser.NEQJ, 0);
        }

        public TerminalNode LT() {
            return getToken(SqlBaseParser.LT, 0);
        }

        public TerminalNode LTE() {
            return getToken(SqlBaseParser.LTE, 0);
        }

        public TerminalNode GT() {
            return getToken(SqlBaseParser.GT, 0);
        }

        public TerminalNode GTE() {
            return getToken(SqlBaseParser.GTE, 0);
        }

        public TerminalNode NSEQ() {
            return getToken(SqlBaseParser.NSEQ, 0);
        }

        public TerminalNode MATCH() {
            return getToken(SqlBaseParser.MATCH, 0);
        }

        public TerminalNode MATCH_PHRASE() {
            return getToken(SqlBaseParser.MATCH_PHRASE, 0);
        }

        public TerminalNode TERM() {
            return getToken(SqlBaseParser.TERM, 0);
        }

        public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_comparisonOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterComparisonOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitComparisonOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComparisonOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
        ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
        enterRule(_localctx, 292, RULE_comparisonOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3443);
                _la = _input.LA(1);
                if (!(((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & 4087L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ArithmeticOperatorContext extends ParserRuleContext {
        public TerminalNode PLUS() {
            return getToken(SqlBaseParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public TerminalNode SLASH() {
            return getToken(SqlBaseParser.SLASH, 0);
        }

        public TerminalNode PERCENT() {
            return getToken(SqlBaseParser.PERCENT, 0);
        }

        public TerminalNode DIV() {
            return getToken(SqlBaseParser.DIV, 0);
        }

        public TerminalNode TILDE() {
            return getToken(SqlBaseParser.TILDE, 0);
        }

        public TerminalNode AMPERSAND() {
            return getToken(SqlBaseParser.AMPERSAND, 0);
        }

        public TerminalNode PIPE() {
            return getToken(SqlBaseParser.PIPE, 0);
        }

        public TerminalNode CONCAT_PIPE() {
            return getToken(SqlBaseParser.CONCAT_PIPE, 0);
        }

        public TerminalNode HAT() {
            return getToken(SqlBaseParser.HAT, 0);
        }

        public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_arithmeticOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterArithmeticOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitArithmeticOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitArithmeticOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ArithmeticOperatorContext arithmeticOperator() throws RecognitionException {
        ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(_ctx, getState());
        enterRule(_localctx, 294, RULE_arithmeticOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3445);
                _la = _input.LA(1);
                if (!(_la == DIV || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & 1023L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PredicateOperatorContext extends ParserRuleContext {
        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public PredicateOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_predicateOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPredicateOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPredicateOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPredicateOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PredicateOperatorContext predicateOperator() throws RecognitionException {
        PredicateOperatorContext _localctx = new PredicateOperatorContext(_ctx, getState());
        enterRule(_localctx, 296, RULE_predicateOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3447);
                _la = _input.LA(1);
                if (!(_la == AND || _la == IN || _la == NOT || _la == OR)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BooleanValueContext extends ParserRuleContext {
        public TerminalNode TRUE() {
            return getToken(SqlBaseParser.TRUE, 0);
        }

        public TerminalNode FALSE() {
            return getToken(SqlBaseParser.FALSE, 0);
        }

        public BooleanValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_booleanValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterBooleanValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitBooleanValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBooleanValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BooleanValueContext booleanValue() throws RecognitionException {
        BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
        enterRule(_localctx, 298, RULE_booleanValue);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3449);
                _la = _input.LA(1);
                if (!(_la == FALSE || _la == TRUE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IntervalContext extends ParserRuleContext {
        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() {
            return getRuleContext(ErrorCapturingMultiUnitsIntervalContext.class, 0);
        }

        public ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() {
            return getRuleContext(ErrorCapturingUnitToUnitIntervalContext.class, 0);
        }

        public IntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_interval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IntervalContext interval() throws RecognitionException {
        IntervalContext _localctx = new IntervalContext(_ctx, getState());
        enterRule(_localctx, 300, RULE_interval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3451);
                match(INTERVAL);
                setState(3454);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 440, _ctx)) {
                    case 1: {
                        setState(3452);
                        errorCapturingMultiUnitsInterval();
                    }
                    break;
                    case 2: {
                        setState(3453);
                        errorCapturingUnitToUnitInterval();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext {
        public MultiUnitsIntervalContext body;

        public MultiUnitsIntervalContext multiUnitsInterval() {
            return getRuleContext(MultiUnitsIntervalContext.class, 0);
        }

        public UnitToUnitIntervalContext unitToUnitInterval() {
            return getRuleContext(UnitToUnitIntervalContext.class, 0);
        }

        public ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_errorCapturingMultiUnitsInterval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterErrorCapturingMultiUnitsInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitErrorCapturingMultiUnitsInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitErrorCapturingMultiUnitsInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() throws RecognitionException {
        ErrorCapturingMultiUnitsIntervalContext _localctx = new ErrorCapturingMultiUnitsIntervalContext(_ctx, getState());
        enterRule(_localctx, 302, RULE_errorCapturingMultiUnitsInterval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3456);
                ((ErrorCapturingMultiUnitsIntervalContext) _localctx).body = multiUnitsInterval();
                setState(3458);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 441, _ctx)) {
                    case 1: {
                        setState(3457);
                        unitToUnitInterval();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MultiUnitsIntervalContext extends ParserRuleContext {
        public UnitInMultiUnitsContext unitInMultiUnits;
        public List<UnitInMultiUnitsContext> unit = new ArrayList<UnitInMultiUnitsContext>();

        public List<IntervalValueContext> intervalValue() {
            return getRuleContexts(IntervalValueContext.class);
        }

        public IntervalValueContext intervalValue(int i) {
            return getRuleContext(IntervalValueContext.class, i);
        }

        public List<UnitInMultiUnitsContext> unitInMultiUnits() {
            return getRuleContexts(UnitInMultiUnitsContext.class);
        }

        public UnitInMultiUnitsContext unitInMultiUnits(int i) {
            return getRuleContext(UnitInMultiUnitsContext.class, i);
        }

        public MultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multiUnitsInterval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultiUnitsInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultiUnitsInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultiUnitsInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MultiUnitsIntervalContext multiUnitsInterval() throws RecognitionException {
        MultiUnitsIntervalContext _localctx = new MultiUnitsIntervalContext(_ctx, getState());
        enterRule(_localctx, 304, RULE_multiUnitsInterval);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3463);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1: {
                            {
                                setState(3460);
                                intervalValue();
                                setState(3461);
                                ((MultiUnitsIntervalContext) _localctx).unitInMultiUnits = unitInMultiUnits();
                                ((MultiUnitsIntervalContext) _localctx).unit.add(((MultiUnitsIntervalContext) _localctx).unitInMultiUnits);
                            }
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(3465);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 442, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext {
        public UnitToUnitIntervalContext body;
        public MultiUnitsIntervalContext error1;
        public UnitToUnitIntervalContext error2;

        public List<UnitToUnitIntervalContext> unitToUnitInterval() {
            return getRuleContexts(UnitToUnitIntervalContext.class);
        }

        public UnitToUnitIntervalContext unitToUnitInterval(int i) {
            return getRuleContext(UnitToUnitIntervalContext.class, i);
        }

        public MultiUnitsIntervalContext multiUnitsInterval() {
            return getRuleContext(MultiUnitsIntervalContext.class, 0);
        }

        public ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_errorCapturingUnitToUnitInterval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterErrorCapturingUnitToUnitInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitErrorCapturingUnitToUnitInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitErrorCapturingUnitToUnitInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() throws RecognitionException {
        ErrorCapturingUnitToUnitIntervalContext _localctx = new ErrorCapturingUnitToUnitIntervalContext(_ctx, getState());
        enterRule(_localctx, 306, RULE_errorCapturingUnitToUnitInterval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3467);
                ((ErrorCapturingUnitToUnitIntervalContext) _localctx).body = unitToUnitInterval();
                setState(3470);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 443, _ctx)) {
                    case 1: {
                        setState(3468);
                        ((ErrorCapturingUnitToUnitIntervalContext) _localctx).error1 = multiUnitsInterval();
                    }
                    break;
                    case 2: {
                        setState(3469);
                        ((ErrorCapturingUnitToUnitIntervalContext) _localctx).error2 = unitToUnitInterval();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnitToUnitIntervalContext extends ParserRuleContext {
        public IntervalValueContext value;
        public UnitInUnitToUnitContext from;
        public UnitInUnitToUnitContext to;

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public IntervalValueContext intervalValue() {
            return getRuleContext(IntervalValueContext.class, 0);
        }

        public List<UnitInUnitToUnitContext> unitInUnitToUnit() {
            return getRuleContexts(UnitInUnitToUnitContext.class);
        }

        public UnitInUnitToUnitContext unitInUnitToUnit(int i) {
            return getRuleContext(UnitInUnitToUnitContext.class, i);
        }

        public UnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unitToUnitInterval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnitToUnitInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnitToUnitInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnitToUnitInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnitToUnitIntervalContext unitToUnitInterval() throws RecognitionException {
        UnitToUnitIntervalContext _localctx = new UnitToUnitIntervalContext(_ctx, getState());
        enterRule(_localctx, 308, RULE_unitToUnitInterval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3472);
                ((UnitToUnitIntervalContext) _localctx).value = intervalValue();
                setState(3473);
                ((UnitToUnitIntervalContext) _localctx).from = unitInUnitToUnit();
                setState(3474);
                match(TO);
                setState(3475);
                ((UnitToUnitIntervalContext) _localctx).to = unitInUnitToUnit();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IntervalValueContext extends ParserRuleContext {
        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode PLUS() {
            return getToken(SqlBaseParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public IntervalValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_intervalValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIntervalValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIntervalValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIntervalValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IntervalValueContext intervalValue() throws RecognitionException {
        IntervalValueContext _localctx = new IntervalValueContext(_ctx, getState());
        enterRule(_localctx, 310, RULE_intervalValue);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3478);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 444, _ctx)) {
                    case 1: {
                        setState(3477);
                        _la = _input.LA(1);
                        if (!(_la == PLUS || _la == MINUS)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                }
                setState(3483);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 445, _ctx)) {
                    case 1: {
                        setState(3480);
                        match(INTEGER_VALUE);
                    }
                    break;
                    case 2: {
                        setState(3481);
                        match(DECIMAL_VALUE);
                    }
                    break;
                    case 3: {
                        setState(3482);
                        stringLit();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnitInMultiUnitsContext extends ParserRuleContext {
        public TerminalNode NANOSECOND() {
            return getToken(SqlBaseParser.NANOSECOND, 0);
        }

        public TerminalNode NANOSECONDS() {
            return getToken(SqlBaseParser.NANOSECONDS, 0);
        }

        public TerminalNode MICROSECOND() {
            return getToken(SqlBaseParser.MICROSECOND, 0);
        }

        public TerminalNode MICROSECONDS() {
            return getToken(SqlBaseParser.MICROSECONDS, 0);
        }

        public TerminalNode MILLISECOND() {
            return getToken(SqlBaseParser.MILLISECOND, 0);
        }

        public TerminalNode MILLISECONDS() {
            return getToken(SqlBaseParser.MILLISECONDS, 0);
        }

        public TerminalNode SECOND() {
            return getToken(SqlBaseParser.SECOND, 0);
        }

        public TerminalNode SECONDS() {
            return getToken(SqlBaseParser.SECONDS, 0);
        }

        public TerminalNode MINUTE() {
            return getToken(SqlBaseParser.MINUTE, 0);
        }

        public TerminalNode MINUTES() {
            return getToken(SqlBaseParser.MINUTES, 0);
        }

        public TerminalNode HOUR() {
            return getToken(SqlBaseParser.HOUR, 0);
        }

        public TerminalNode HOURS() {
            return getToken(SqlBaseParser.HOURS, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public TerminalNode DAYS() {
            return getToken(SqlBaseParser.DAYS, 0);
        }

        public TerminalNode WEEK() {
            return getToken(SqlBaseParser.WEEK, 0);
        }

        public TerminalNode WEEKS() {
            return getToken(SqlBaseParser.WEEKS, 0);
        }

        public TerminalNode MONTH() {
            return getToken(SqlBaseParser.MONTH, 0);
        }

        public TerminalNode MONTHS() {
            return getToken(SqlBaseParser.MONTHS, 0);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public TerminalNode YEARS() {
            return getToken(SqlBaseParser.YEARS, 0);
        }

        public UnitInMultiUnitsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unitInMultiUnits;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnitInMultiUnits(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnitInMultiUnits(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnitInMultiUnits(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnitInMultiUnitsContext unitInMultiUnits() throws RecognitionException {
        UnitInMultiUnitsContext _localctx = new UnitInMultiUnitsContext(_ctx, getState());
        enterRule(_localctx, 312, RULE_unitInMultiUnits);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3485);
                _la = _input.LA(1);
                if (!(_la == DAY || _la == DAYS || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 441317579110219779L) != 0) || _la == SECOND || _la == SECONDS || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & 387L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnitInUnitToUnitContext extends ParserRuleContext {
        public TerminalNode SECOND() {
            return getToken(SqlBaseParser.SECOND, 0);
        }

        public TerminalNode MINUTE() {
            return getToken(SqlBaseParser.MINUTE, 0);
        }

        public TerminalNode HOUR() {
            return getToken(SqlBaseParser.HOUR, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public TerminalNode MONTH() {
            return getToken(SqlBaseParser.MONTH, 0);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public UnitInUnitToUnitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unitInUnitToUnit;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnitInUnitToUnit(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnitInUnitToUnit(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnitInUnitToUnit(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnitInUnitToUnitContext unitInUnitToUnit() throws RecognitionException {
        UnitInUnitToUnitContext _localctx = new UnitInUnitToUnitContext(_ctx, getState());
        enterRule(_localctx, 314, RULE_unitInUnitToUnit);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3487);
                _la = _input.LA(1);
                if (!(_la == DAY || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 2814749767106561L) != 0) || _la == SECOND || _la == YEAR)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColPositionContext extends ParserRuleContext {
        public Token position;
        public ErrorCapturingIdentifierContext afterCol;

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public TerminalNode AFTER() {
            return getToken(SqlBaseParser.AFTER, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public ColPositionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colPosition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterColPosition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitColPosition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColPosition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColPositionContext colPosition() throws RecognitionException {
        ColPositionContext _localctx = new ColPositionContext(_ctx, getState());
        enterRule(_localctx, 316, RULE_colPosition);
        try {
            setState(3492);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case FIRST:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3489);
                    ((ColPositionContext) _localctx).position = match(FIRST);
                }
                break;
                case AFTER:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3490);
                    ((ColPositionContext) _localctx).position = match(AFTER);
                    setState(3491);
                    ((ColPositionContext) _localctx).afterCol = errorCapturingIdentifier();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CollateClauseContext extends ParserRuleContext {
        public IdentifierContext collationName;

        public TerminalNode COLLATE() {
            return getToken(SqlBaseParser.COLLATE, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public CollateClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_collateClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCollateClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCollateClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCollateClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CollateClauseContext collateClause() throws RecognitionException {
        CollateClauseContext _localctx = new CollateClauseContext(_ctx, getState());
        enterRule(_localctx, 318, RULE_collateClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3494);
                match(COLLATE);
                setState(3495);
                ((CollateClauseContext) _localctx).collationName = identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TypeContext extends ParserRuleContext {
        public IdentifierContext unsupportedType;

        public TerminalNode BOOLEAN() {
            return getToken(SqlBaseParser.BOOLEAN, 0);
        }

        public TerminalNode TINYINT() {
            return getToken(SqlBaseParser.TINYINT, 0);
        }

        public TerminalNode BYTE() {
            return getToken(SqlBaseParser.BYTE, 0);
        }

        public TerminalNode SMALLINT() {
            return getToken(SqlBaseParser.SMALLINT, 0);
        }

        public TerminalNode SHORT() {
            return getToken(SqlBaseParser.SHORT, 0);
        }

        public TerminalNode INT() {
            return getToken(SqlBaseParser.INT, 0);
        }

        public TerminalNode INTEGER() {
            return getToken(SqlBaseParser.INTEGER, 0);
        }

        public TerminalNode BIGINT() {
            return getToken(SqlBaseParser.BIGINT, 0);
        }

        public TerminalNode LONG() {
            return getToken(SqlBaseParser.LONG, 0);
        }

        public TerminalNode FLOAT() {
            return getToken(SqlBaseParser.FLOAT, 0);
        }

        public TerminalNode REAL() {
            return getToken(SqlBaseParser.REAL, 0);
        }

        public TerminalNode DOUBLE() {
            return getToken(SqlBaseParser.DOUBLE, 0);
        }

        public TerminalNode DATE() {
            return getToken(SqlBaseParser.DATE, 0);
        }

        public TerminalNode TIMESTAMP() {
            return getToken(SqlBaseParser.TIMESTAMP, 0);
        }

        public TerminalNode TIMESTAMP_NTZ() {
            return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0);
        }

        public TerminalNode TIMESTAMP_LTZ() {
            return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public CollateClauseContext collateClause() {
            return getRuleContext(CollateClauseContext.class, 0);
        }

        public TerminalNode CHARACTER() {
            return getToken(SqlBaseParser.CHARACTER, 0);
        }

        public TerminalNode CHAR() {
            return getToken(SqlBaseParser.CHAR, 0);
        }

        public TerminalNode VARCHAR() {
            return getToken(SqlBaseParser.VARCHAR, 0);
        }

        public TerminalNode BINARY() {
            return getToken(SqlBaseParser.BINARY, 0);
        }

        public TerminalNode DECIMAL() {
            return getToken(SqlBaseParser.DECIMAL, 0);
        }

        public TerminalNode DEC() {
            return getToken(SqlBaseParser.DEC, 0);
        }

        public TerminalNode NUMERIC() {
            return getToken(SqlBaseParser.NUMERIC, 0);
        }

        public TerminalNode VOID() {
            return getToken(SqlBaseParser.VOID, 0);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode VARIANT() {
            return getToken(SqlBaseParser.VARIANT, 0);
        }

        public TerminalNode ARRAY() {
            return getToken(SqlBaseParser.ARRAY, 0);
        }

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_type;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TypeContext type() throws RecognitionException {
        TypeContext _localctx = new TypeContext(_ctx, getState());
        enterRule(_localctx, 320, RULE_type);
        try {
            setState(3531);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 448, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3497);
                    match(BOOLEAN);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3498);
                    match(TINYINT);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3499);
                    match(BYTE);
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3500);
                    match(SMALLINT);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3501);
                    match(SHORT);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3502);
                    match(INT);
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(3503);
                    match(INTEGER);
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(3504);
                    match(BIGINT);
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(3505);
                    match(LONG);
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(3506);
                    match(FLOAT);
                }
                break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(3507);
                    match(REAL);
                }
                break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(3508);
                    match(DOUBLE);
                }
                break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(3509);
                    match(DATE);
                }
                break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                {
                    setState(3510);
                    match(TIMESTAMP);
                }
                break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                {
                    setState(3511);
                    match(TIMESTAMP_NTZ);
                }
                break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                {
                    setState(3512);
                    match(TIMESTAMP_LTZ);
                }
                break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(3513);
                    match(STRING);
                    setState(3515);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 447, _ctx)) {
                        case 1: {
                            setState(3514);
                            collateClause();
                        }
                        break;
                    }
                }
                break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(3517);
                    match(CHARACTER);
                }
                break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(3518);
                    match(CHAR);
                }
                break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(3519);
                    match(VARCHAR);
                }
                break;
                case 21:
                    enterOuterAlt(_localctx, 21);
                {
                    setState(3520);
                    match(BINARY);
                }
                break;
                case 22:
                    enterOuterAlt(_localctx, 22);
                {
                    setState(3521);
                    match(DECIMAL);
                }
                break;
                case 23:
                    enterOuterAlt(_localctx, 23);
                {
                    setState(3522);
                    match(DEC);
                }
                break;
                case 24:
                    enterOuterAlt(_localctx, 24);
                {
                    setState(3523);
                    match(NUMERIC);
                }
                break;
                case 25:
                    enterOuterAlt(_localctx, 25);
                {
                    setState(3524);
                    match(VOID);
                }
                break;
                case 26:
                    enterOuterAlt(_localctx, 26);
                {
                    setState(3525);
                    match(INTERVAL);
                }
                break;
                case 27:
                    enterOuterAlt(_localctx, 27);
                {
                    setState(3526);
                    match(VARIANT);
                }
                break;
                case 28:
                    enterOuterAlt(_localctx, 28);
                {
                    setState(3527);
                    match(ARRAY);
                }
                break;
                case 29:
                    enterOuterAlt(_localctx, 29);
                {
                    setState(3528);
                    match(STRUCT);
                }
                break;
                case 30:
                    enterOuterAlt(_localctx, 30);
                {
                    setState(3529);
                    match(MAP);
                }
                break;
                case 31:
                    enterOuterAlt(_localctx, 31);
                {
                    setState(3530);
                    ((TypeContext) _localctx).unsupportedType = identifier();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DataTypeContext extends ParserRuleContext {
        public DataTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dataType;
        }

        public DataTypeContext() {
        }

        public void copyFrom(DataTypeContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ComplexDataTypeContext extends DataTypeContext {
        public Token complex;

        public TerminalNode LT() {
            return getToken(SqlBaseParser.LT, 0);
        }

        public List<DataTypeContext> dataType() {
            return getRuleContexts(DataTypeContext.class);
        }

        public DataTypeContext dataType(int i) {
            return getRuleContext(DataTypeContext.class, i);
        }

        public TerminalNode GT() {
            return getToken(SqlBaseParser.GT, 0);
        }

        public TerminalNode ARRAY() {
            return getToken(SqlBaseParser.ARRAY, 0);
        }

        public TerminalNode COMMA() {
            return getToken(SqlBaseParser.COMMA, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode NEQ() {
            return getToken(SqlBaseParser.NEQ, 0);
        }

        public ComplexColTypeListContext complexColTypeList() {
            return getRuleContext(ComplexColTypeListContext.class, 0);
        }

        public ComplexDataTypeContext(DataTypeContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterComplexDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitComplexDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComplexDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class YearMonthIntervalDataTypeContext extends DataTypeContext {
        public Token from;
        public Token to;

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public List<TerminalNode> MONTH() {
            return getTokens(SqlBaseParser.MONTH);
        }

        public TerminalNode MONTH(int i) {
            return getToken(SqlBaseParser.MONTH, i);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public YearMonthIntervalDataTypeContext(DataTypeContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterYearMonthIntervalDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitYearMonthIntervalDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitYearMonthIntervalDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DayTimeIntervalDataTypeContext extends DataTypeContext {
        public Token from;
        public Token to;

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public List<TerminalNode> HOUR() {
            return getTokens(SqlBaseParser.HOUR);
        }

        public TerminalNode HOUR(int i) {
            return getToken(SqlBaseParser.HOUR, i);
        }

        public List<TerminalNode> MINUTE() {
            return getTokens(SqlBaseParser.MINUTE);
        }

        public TerminalNode MINUTE(int i) {
            return getToken(SqlBaseParser.MINUTE, i);
        }

        public List<TerminalNode> SECOND() {
            return getTokens(SqlBaseParser.SECOND);
        }

        public TerminalNode SECOND(int i) {
            return getToken(SqlBaseParser.SECOND, i);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public DayTimeIntervalDataTypeContext(DataTypeContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDayTimeIntervalDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDayTimeIntervalDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDayTimeIntervalDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrimitiveDataTypeContext extends DataTypeContext {
        public TypeContext type() {
            return getRuleContext(TypeContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<TerminalNode> INTEGER_VALUE() {
            return getTokens(SqlBaseParser.INTEGER_VALUE);
        }

        public TerminalNode INTEGER_VALUE(int i) {
            return getToken(SqlBaseParser.INTEGER_VALUE, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public PrimitiveDataTypeContext(DataTypeContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPrimitiveDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPrimitiveDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPrimitiveDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DataTypeContext dataType() throws RecognitionException {
        DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
        enterRule(_localctx, 322, RULE_dataType);
        int _la;
        try {
            setState(3579);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 455, _ctx)) {
                case 1:
                    _localctx = new ComplexDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3533);
                    ((ComplexDataTypeContext) _localctx).complex = match(ARRAY);
                    setState(3534);
                    match(LT);
                    setState(3535);
                    dataType();
                    setState(3536);
                    match(GT);
                }
                break;
                case 2:
                    _localctx = new ComplexDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3538);
                    ((ComplexDataTypeContext) _localctx).complex = match(MAP);
                    setState(3539);
                    match(LT);
                    setState(3540);
                    dataType();
                    setState(3541);
                    match(COMMA);
                    setState(3542);
                    dataType();
                    setState(3543);
                    match(GT);
                }
                break;
                case 3:
                    _localctx = new ComplexDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3545);
                    ((ComplexDataTypeContext) _localctx).complex = match(STRUCT);
                    setState(3552);
                    _errHandler.sync(this);
                    switch (_input.LA(1)) {
                        case LT: {
                            setState(3546);
                            match(LT);
                            setState(3548);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 449, _ctx)) {
                                case 1: {
                                    setState(3547);
                                    complexColTypeList();
                                }
                                break;
                            }
                            setState(3550);
                            match(GT);
                        }
                        break;
                        case NEQ: {
                            setState(3551);
                            match(NEQ);
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
                break;
                case 4:
                    _localctx = new YearMonthIntervalDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3554);
                    match(INTERVAL);
                    setState(3555);
                    ((YearMonthIntervalDataTypeContext) _localctx).from = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == MONTH || _la == YEAR)) {
                        ((YearMonthIntervalDataTypeContext) _localctx).from = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3558);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 451, _ctx)) {
                        case 1: {
                            setState(3556);
                            match(TO);
                            setState(3557);
                            ((YearMonthIntervalDataTypeContext) _localctx).to = match(MONTH);
                        }
                        break;
                    }
                }
                break;
                case 5:
                    _localctx = new DayTimeIntervalDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3560);
                    match(INTERVAL);
                    setState(3561);
                    ((DayTimeIntervalDataTypeContext) _localctx).from = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == DAY || _la == HOUR || _la == MINUTE || _la == SECOND)) {
                        ((DayTimeIntervalDataTypeContext) _localctx).from = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3564);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 452, _ctx)) {
                        case 1: {
                            setState(3562);
                            match(TO);
                            setState(3563);
                            ((DayTimeIntervalDataTypeContext) _localctx).to = _input.LT(1);
                            _la = _input.LA(1);
                            if (!(_la == HOUR || _la == MINUTE || _la == SECOND)) {
                                ((DayTimeIntervalDataTypeContext) _localctx).to = (Token) _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                        break;
                    }
                }
                break;
                case 6:
                    _localctx = new PrimitiveDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3566);
                    type();
                    setState(3577);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 454, _ctx)) {
                        case 1: {
                            setState(3567);
                            match(LEFT_PAREN);
                            setState(3568);
                            match(INTEGER_VALUE);
                            setState(3573);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(3569);
                                        match(COMMA);
                                        setState(3570);
                                        match(INTEGER_VALUE);
                                    }
                                }
                                setState(3575);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                            setState(3576);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QualifiedColTypeWithPositionListContext extends ParserRuleContext {
        public List<QualifiedColTypeWithPositionContext> qualifiedColTypeWithPosition() {
            return getRuleContexts(QualifiedColTypeWithPositionContext.class);
        }

        public QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition(int i) {
            return getRuleContext(QualifiedColTypeWithPositionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public QualifiedColTypeWithPositionListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualifiedColTypeWithPositionList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQualifiedColTypeWithPositionList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQualifiedColTypeWithPositionList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQualifiedColTypeWithPositionList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() throws RecognitionException {
        QualifiedColTypeWithPositionListContext _localctx = new QualifiedColTypeWithPositionListContext(_ctx, getState());
        enterRule(_localctx, 324, RULE_qualifiedColTypeWithPositionList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3581);
                qualifiedColTypeWithPosition();
                setState(3586);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3582);
                            match(COMMA);
                            setState(3583);
                            qualifiedColTypeWithPosition();
                        }
                    }
                    setState(3588);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QualifiedColTypeWithPositionContext extends ParserRuleContext {
        public MultipartIdentifierContext name;

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public List<ColDefinitionDescriptorWithPositionContext> colDefinitionDescriptorWithPosition() {
            return getRuleContexts(ColDefinitionDescriptorWithPositionContext.class);
        }

        public ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition(int i) {
            return getRuleContext(ColDefinitionDescriptorWithPositionContext.class, i);
        }

        public QualifiedColTypeWithPositionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualifiedColTypeWithPosition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQualifiedColTypeWithPosition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQualifiedColTypeWithPosition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQualifiedColTypeWithPosition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition() throws RecognitionException {
        QualifiedColTypeWithPositionContext _localctx = new QualifiedColTypeWithPositionContext(_ctx, getState());
        enterRule(_localctx, 326, RULE_qualifiedColTypeWithPosition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3589);
                ((QualifiedColTypeWithPositionContext) _localctx).name = multipartIdentifier();
                setState(3590);
                dataType();
                setState(3594);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == AFTER || _la == COMMENT || _la == DEFAULT || _la == FIRST || _la == NOT) {
                    {
                        {
                            setState(3591);
                            colDefinitionDescriptorWithPosition();
                        }
                    }
                    setState(3596);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColDefinitionDescriptorWithPositionContext extends ParserRuleContext {
        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public DefaultExpressionContext defaultExpression() {
            return getRuleContext(DefaultExpressionContext.class, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        public ColPositionContext colPosition() {
            return getRuleContext(ColPositionContext.class, 0);
        }

        public ColDefinitionDescriptorWithPositionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colDefinitionDescriptorWithPosition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterColDefinitionDescriptorWithPosition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitColDefinitionDescriptorWithPosition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColDefinitionDescriptorWithPosition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition() throws RecognitionException {
        ColDefinitionDescriptorWithPositionContext _localctx = new ColDefinitionDescriptorWithPositionContext(_ctx, getState());
        enterRule(_localctx, 328, RULE_colDefinitionDescriptorWithPosition);
        try {
            setState(3602);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case NOT:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3597);
                    match(NOT);
                    setState(3598);
                    match(NULL);
                }
                break;
                case DEFAULT:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3599);
                    defaultExpression();
                }
                break;
                case COMMENT:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3600);
                    commentSpec();
                }
                break;
                case AFTER:
                case FIRST:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3601);
                    colPosition();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DefaultExpressionContext extends ParserRuleContext {
        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public DefaultExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_defaultExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDefaultExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDefaultExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDefaultExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DefaultExpressionContext defaultExpression() throws RecognitionException {
        DefaultExpressionContext _localctx = new DefaultExpressionContext(_ctx, getState());
        enterRule(_localctx, 330, RULE_defaultExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3604);
                match(DEFAULT);
                setState(3605);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class VariableDefaultExpressionContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public VariableDefaultExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_variableDefaultExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterVariableDefaultExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitVariableDefaultExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitVariableDefaultExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final VariableDefaultExpressionContext variableDefaultExpression() throws RecognitionException {
        VariableDefaultExpressionContext _localctx = new VariableDefaultExpressionContext(_ctx, getState());
        enterRule(_localctx, 332, RULE_variableDefaultExpression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3607);
                _la = _input.LA(1);
                if (!(_la == DEFAULT || _la == EQ)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(3608);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColTypeListContext extends ParserRuleContext {
        public List<ColTypeContext> colType() {
            return getRuleContexts(ColTypeContext.class);
        }

        public ColTypeContext colType(int i) {
            return getRuleContext(ColTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public ColTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterColTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitColTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColTypeListContext colTypeList() throws RecognitionException {
        ColTypeListContext _localctx = new ColTypeListContext(_ctx, getState());
        enterRule(_localctx, 334, RULE_colTypeList);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3610);
                colType();
                setState(3615);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 459, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3611);
                                match(COMMA);
                                setState(3612);
                                colType();
                            }
                        }
                    }
                    setState(3617);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 459, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColTypeContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext colName;

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        public ColTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterColType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitColType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColTypeContext colType() throws RecognitionException {
        ColTypeContext _localctx = new ColTypeContext(_ctx, getState());
        enterRule(_localctx, 336, RULE_colType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3618);
                ((ColTypeContext) _localctx).colName = errorCapturingIdentifier();
                setState(3619);
                dataType();
                setState(3622);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 460, _ctx)) {
                    case 1: {
                        setState(3620);
                        match(NOT);
                        setState(3621);
                        match(NULL);
                    }
                    break;
                }
                setState(3625);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 461, _ctx)) {
                    case 1: {
                        setState(3624);
                        commentSpec();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateOrReplaceTableColTypeListContext extends ParserRuleContext {
        public List<CreateOrReplaceTableColTypeContext> createOrReplaceTableColType() {
            return getRuleContexts(CreateOrReplaceTableColTypeContext.class);
        }

        public CreateOrReplaceTableColTypeContext createOrReplaceTableColType(int i) {
            return getRuleContext(CreateOrReplaceTableColTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public CreateOrReplaceTableColTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createOrReplaceTableColTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateOrReplaceTableColTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateOrReplaceTableColTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateOrReplaceTableColTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() throws RecognitionException {
        CreateOrReplaceTableColTypeListContext _localctx = new CreateOrReplaceTableColTypeListContext(_ctx, getState());
        enterRule(_localctx, 338, RULE_createOrReplaceTableColTypeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3627);
                createOrReplaceTableColType();
                setState(3632);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3628);
                            match(COMMA);
                            setState(3629);
                            createOrReplaceTableColType();
                        }
                    }
                    setState(3634);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateOrReplaceTableColTypeContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext colName;

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public List<ColDefinitionOptionContext> colDefinitionOption() {
            return getRuleContexts(ColDefinitionOptionContext.class);
        }

        public ColDefinitionOptionContext colDefinitionOption(int i) {
            return getRuleContext(ColDefinitionOptionContext.class, i);
        }

        public CreateOrReplaceTableColTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createOrReplaceTableColType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateOrReplaceTableColType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateOrReplaceTableColType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateOrReplaceTableColType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateOrReplaceTableColTypeContext createOrReplaceTableColType() throws RecognitionException {
        CreateOrReplaceTableColTypeContext _localctx = new CreateOrReplaceTableColTypeContext(_ctx, getState());
        enterRule(_localctx, 340, RULE_createOrReplaceTableColType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3635);
                ((CreateOrReplaceTableColTypeContext) _localctx).colName = errorCapturingIdentifier();
                setState(3636);
                dataType();
                setState(3640);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMENT || _la == DEFAULT || _la == GENERATED || _la == NOT) {
                    {
                        {
                            setState(3637);
                            colDefinitionOption();
                        }
                    }
                    setState(3642);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColDefinitionOptionContext extends ParserRuleContext {
        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public DefaultExpressionContext defaultExpression() {
            return getRuleContext(DefaultExpressionContext.class, 0);
        }

        public GenerationExpressionContext generationExpression() {
            return getRuleContext(GenerationExpressionContext.class, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        public ColDefinitionOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colDefinitionOption;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterColDefinitionOption(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitColDefinitionOption(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColDefinitionOption(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColDefinitionOptionContext colDefinitionOption() throws RecognitionException {
        ColDefinitionOptionContext _localctx = new ColDefinitionOptionContext(_ctx, getState());
        enterRule(_localctx, 342, RULE_colDefinitionOption);
        try {
            setState(3648);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case NOT:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3643);
                    match(NOT);
                    setState(3644);
                    match(NULL);
                }
                break;
                case DEFAULT:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3645);
                    defaultExpression();
                }
                break;
                case GENERATED:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3646);
                    generationExpression();
                }
                break;
                case COMMENT:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3647);
                    commentSpec();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GenerationExpressionContext extends ParserRuleContext {
        public TerminalNode GENERATED() {
            return getToken(SqlBaseParser.GENERATED, 0);
        }

        public TerminalNode ALWAYS() {
            return getToken(SqlBaseParser.ALWAYS, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public GenerationExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_generationExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterGenerationExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitGenerationExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGenerationExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GenerationExpressionContext generationExpression() throws RecognitionException {
        GenerationExpressionContext _localctx = new GenerationExpressionContext(_ctx, getState());
        enterRule(_localctx, 344, RULE_generationExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3650);
                match(GENERATED);
                setState(3651);
                match(ALWAYS);
                setState(3652);
                match(AS);
                setState(3653);
                match(LEFT_PAREN);
                setState(3654);
                expression();
                setState(3655);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ComplexColTypeListContext extends ParserRuleContext {
        public List<ComplexColTypeContext> complexColType() {
            return getRuleContexts(ComplexColTypeContext.class);
        }

        public ComplexColTypeContext complexColType(int i) {
            return getRuleContext(ComplexColTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public ComplexColTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_complexColTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterComplexColTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitComplexColTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComplexColTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ComplexColTypeListContext complexColTypeList() throws RecognitionException {
        ComplexColTypeListContext _localctx = new ComplexColTypeListContext(_ctx, getState());
        enterRule(_localctx, 346, RULE_complexColTypeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3657);
                complexColType();
                setState(3662);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3658);
                            match(COMMA);
                            setState(3659);
                            complexColType();
                        }
                    }
                    setState(3664);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ComplexColTypeContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(SqlBaseParser.COLON, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        public ComplexColTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_complexColType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterComplexColType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitComplexColType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComplexColType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ComplexColTypeContext complexColType() throws RecognitionException {
        ComplexColTypeContext _localctx = new ComplexColTypeContext(_ctx, getState());
        enterRule(_localctx, 348, RULE_complexColType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3665);
                errorCapturingIdentifier();
                setState(3667);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 466, _ctx)) {
                    case 1: {
                        setState(3666);
                        match(COLON);
                    }
                    break;
                }
                setState(3669);
                dataType();
                setState(3672);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == NOT) {
                    {
                        setState(3670);
                        match(NOT);
                        setState(3671);
                        match(NULL);
                    }
                }

                setState(3675);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMENT) {
                    {
                        setState(3674);
                        commentSpec();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WhenClauseContext extends ParserRuleContext {
        public ExpressionContext condition;
        public ExpressionContext result;

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public WhenClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whenClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWhenClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWhenClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWhenClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WhenClauseContext whenClause() throws RecognitionException {
        WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
        enterRule(_localctx, 350, RULE_whenClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3677);
                match(WHEN);
                setState(3678);
                ((WhenClauseContext) _localctx).condition = expression();
                setState(3679);
                match(THEN);
                setState(3680);
                ((WhenClauseContext) _localctx).result = expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WindowClauseContext extends ParserRuleContext {
        public TerminalNode WINDOW() {
            return getToken(SqlBaseParser.WINDOW, 0);
        }

        public List<NamedWindowContext> namedWindow() {
            return getRuleContexts(NamedWindowContext.class);
        }

        public NamedWindowContext namedWindow(int i) {
            return getRuleContext(NamedWindowContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public WindowClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_windowClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWindowClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWindowClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWindowClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WindowClauseContext windowClause() throws RecognitionException {
        WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
        enterRule(_localctx, 352, RULE_windowClause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3682);
                match(WINDOW);
                setState(3683);
                namedWindow();
                setState(3688);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 469, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3684);
                                match(COMMA);
                                setState(3685);
                                namedWindow();
                            }
                        }
                    }
                    setState(3690);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 469, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NamedWindowContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext name;

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public WindowSpecContext windowSpec() {
            return getRuleContext(WindowSpecContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public NamedWindowContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedWindow;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNamedWindow(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamedWindow(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedWindow(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NamedWindowContext namedWindow() throws RecognitionException {
        NamedWindowContext _localctx = new NamedWindowContext(_ctx, getState());
        enterRule(_localctx, 354, RULE_namedWindow);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3691);
                ((NamedWindowContext) _localctx).name = errorCapturingIdentifier();
                setState(3692);
                match(AS);
                setState(3693);
                windowSpec();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WindowSpecContext extends ParserRuleContext {
        public WindowSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_windowSpec;
        }

        public WindowSpecContext() {
        }

        public void copyFrom(WindowSpecContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WindowRefContext extends WindowSpecContext {
        public ErrorCapturingIdentifierContext name;

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public WindowRefContext(WindowSpecContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWindowRef(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWindowRef(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWindowRef(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WindowDefContext extends WindowSpecContext {
        public ExpressionContext expression;
        public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public WindowFrameContext windowFrame() {
            return getRuleContext(WindowFrameContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public List<SortItemContext> sortItem() {
            return getRuleContexts(SortItemContext.class);
        }

        public SortItemContext sortItem(int i) {
            return getRuleContext(SortItemContext.class, i);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        public WindowDefContext(WindowSpecContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWindowDef(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWindowDef(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWindowDef(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WindowSpecContext windowSpec() throws RecognitionException {
        WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
        enterRule(_localctx, 356, RULE_windowSpec);
        int _la;
        try {
            setState(3741);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 477, _ctx)) {
                case 1:
                    _localctx = new WindowRefContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3695);
                    ((WindowRefContext) _localctx).name = errorCapturingIdentifier();
                }
                break;
                case 2:
                    _localctx = new WindowRefContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3696);
                    match(LEFT_PAREN);
                    setState(3697);
                    ((WindowRefContext) _localctx).name = errorCapturingIdentifier();
                    setState(3698);
                    match(RIGHT_PAREN);
                }
                break;
                case 3:
                    _localctx = new WindowDefContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3700);
                    match(LEFT_PAREN);
                    setState(3735);
                    _errHandler.sync(this);
                    switch (_input.LA(1)) {
                        case CLUSTER: {
                            setState(3701);
                            match(CLUSTER);
                            setState(3702);
                            match(BY);
                            setState(3703);
                            ((WindowDefContext) _localctx).expression = expression();
                            ((WindowDefContext) _localctx).partition.add(((WindowDefContext) _localctx).expression);
                            setState(3708);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(3704);
                                        match(COMMA);
                                        setState(3705);
                                        ((WindowDefContext) _localctx).expression = expression();
                                        ((WindowDefContext) _localctx).partition.add(((WindowDefContext) _localctx).expression);
                                    }
                                }
                                setState(3710);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                        }
                        break;
                        case RIGHT_PAREN:
                        case DISTRIBUTE:
                        case ORDER:
                        case PARTITION:
                        case RANGE:
                        case ROWS:
                        case SORT: {
                            setState(3721);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == DISTRIBUTE || _la == PARTITION) {
                                {
                                    setState(3711);
                                    _la = _input.LA(1);
                                    if (!(_la == DISTRIBUTE || _la == PARTITION)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(3712);
                                    match(BY);
                                    setState(3713);
                                    ((WindowDefContext) _localctx).expression = expression();
                                    ((WindowDefContext) _localctx).partition.add(((WindowDefContext) _localctx).expression);
                                    setState(3718);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    while (_la == COMMA) {
                                        {
                                            {
                                                setState(3714);
                                                match(COMMA);
                                                setState(3715);
                                                ((WindowDefContext) _localctx).expression = expression();
                                                ((WindowDefContext) _localctx).partition.add(((WindowDefContext) _localctx).expression);
                                            }
                                        }
                                        setState(3720);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                    }
                                }
                            }

                            setState(3733);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == ORDER || _la == SORT) {
                                {
                                    setState(3723);
                                    _la = _input.LA(1);
                                    if (!(_la == ORDER || _la == SORT)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(3724);
                                    match(BY);
                                    setState(3725);
                                    sortItem();
                                    setState(3730);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    while (_la == COMMA) {
                                        {
                                            {
                                                setState(3726);
                                                match(COMMA);
                                                setState(3727);
                                                sortItem();
                                            }
                                        }
                                        setState(3732);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                    }
                                }
                            }

                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(3738);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == RANGE || _la == ROWS) {
                        {
                            setState(3737);
                            windowFrame();
                        }
                    }

                    setState(3740);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WindowFrameContext extends ParserRuleContext {
        public Token frameType;
        public FrameBoundContext start;
        public FrameBoundContext end;

        public TerminalNode RANGE() {
            return getToken(SqlBaseParser.RANGE, 0);
        }

        public List<FrameBoundContext> frameBound() {
            return getRuleContexts(FrameBoundContext.class);
        }

        public FrameBoundContext frameBound(int i) {
            return getRuleContext(FrameBoundContext.class, i);
        }

        public TerminalNode ROWS() {
            return getToken(SqlBaseParser.ROWS, 0);
        }

        public TerminalNode BETWEEN() {
            return getToken(SqlBaseParser.BETWEEN, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public WindowFrameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_windowFrame;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWindowFrame(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWindowFrame(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWindowFrame(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WindowFrameContext windowFrame() throws RecognitionException {
        WindowFrameContext _localctx = new WindowFrameContext(_ctx, getState());
        enterRule(_localctx, 358, RULE_windowFrame);
        try {
            setState(3759);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 478, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3743);
                    ((WindowFrameContext) _localctx).frameType = match(RANGE);
                    setState(3744);
                    ((WindowFrameContext) _localctx).start = frameBound();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3745);
                    ((WindowFrameContext) _localctx).frameType = match(ROWS);
                    setState(3746);
                    ((WindowFrameContext) _localctx).start = frameBound();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3747);
                    ((WindowFrameContext) _localctx).frameType = match(RANGE);
                    setState(3748);
                    match(BETWEEN);
                    setState(3749);
                    ((WindowFrameContext) _localctx).start = frameBound();
                    setState(3750);
                    match(AND);
                    setState(3751);
                    ((WindowFrameContext) _localctx).end = frameBound();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3753);
                    ((WindowFrameContext) _localctx).frameType = match(ROWS);
                    setState(3754);
                    match(BETWEEN);
                    setState(3755);
                    ((WindowFrameContext) _localctx).start = frameBound();
                    setState(3756);
                    match(AND);
                    setState(3757);
                    ((WindowFrameContext) _localctx).end = frameBound();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FrameBoundContext extends ParserRuleContext {
        public Token boundType;

        public TerminalNode UNBOUNDED() {
            return getToken(SqlBaseParser.UNBOUNDED, 0);
        }

        public TerminalNode PRECEDING() {
            return getToken(SqlBaseParser.PRECEDING, 0);
        }

        public TerminalNode FOLLOWING() {
            return getToken(SqlBaseParser.FOLLOWING, 0);
        }

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public FrameBoundContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_frameBound;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFrameBound(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFrameBound(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFrameBound(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FrameBoundContext frameBound() throws RecognitionException {
        FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
        enterRule(_localctx, 360, RULE_frameBound);
        int _la;
        try {
            setState(3768);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 479, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3761);
                    match(UNBOUNDED);
                    setState(3762);
                    ((FrameBoundContext) _localctx).boundType = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == FOLLOWING || _la == PRECEDING)) {
                        ((FrameBoundContext) _localctx).boundType = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3763);
                    ((FrameBoundContext) _localctx).boundType = match(CURRENT);
                    setState(3764);
                    match(ROW);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3765);
                    expression();
                    setState(3766);
                    ((FrameBoundContext) _localctx).boundType = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == FOLLOWING || _la == PRECEDING)) {
                        ((FrameBoundContext) _localctx).boundType = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QualifiedNameListContext extends ParserRuleContext {
        public List<QualifiedNameContext> qualifiedName() {
            return getRuleContexts(QualifiedNameContext.class);
        }

        public QualifiedNameContext qualifiedName(int i) {
            return getRuleContext(QualifiedNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualifiedNameList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQualifiedNameList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQualifiedNameList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQualifiedNameList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
        QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, getState());
        enterRule(_localctx, 362, RULE_qualifiedNameList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3770);
                qualifiedName();
                setState(3775);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3771);
                            match(COMMA);
                            setState(3772);
                            qualifiedName();
                        }
                    }
                    setState(3777);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionNameContext extends ParserRuleContext {
        public Token identFunc;

        public TerminalNode IDENTIFIER_KW() {
            return getToken(SqlBaseParser.IDENTIFIER_KW, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode FILTER() {
            return getToken(SqlBaseParser.FILTER, 0);
        }

        public TerminalNode LEFT() {
            return getToken(SqlBaseParser.LEFT, 0);
        }

        public TerminalNode RIGHT() {
            return getToken(SqlBaseParser.RIGHT, 0);
        }

        public FunctionNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFunctionName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFunctionName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionNameContext functionName() throws RecognitionException {
        FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
        enterRule(_localctx, 364, RULE_functionName);
        try {
            setState(3788);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 481, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3778);
                    match(IDENTIFIER_KW);
                    setState(3779);
                    match(LEFT_PAREN);
                    setState(3780);
                    expression();
                    setState(3781);
                    match(RIGHT_PAREN);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3783);
                    ((FunctionNameContext) _localctx).identFunc = match(IDENTIFIER_KW);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3784);
                    qualifiedName();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3785);
                    match(FILTER);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3786);
                    match(LEFT);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3787);
                    match(RIGHT);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QualifiedNameContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(SqlBaseParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(SqlBaseParser.DOT, i);
        }

        public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualifiedName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterQualifiedName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitQualifiedName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQualifiedName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QualifiedNameContext qualifiedName() throws RecognitionException {
        QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
        enterRule(_localctx, 366, RULE_qualifiedName);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3790);
                identifier();
                setState(3795);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 482, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3791);
                                match(DOT);
                                setState(3792);
                                identifier();
                            }
                        }
                    }
                    setState(3797);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 482, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ErrorCapturingIdentifierContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() {
            return getRuleContext(ErrorCapturingIdentifierExtraContext.class, 0);
        }

        public ErrorCapturingIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_errorCapturingIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterErrorCapturingIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitErrorCapturingIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitErrorCapturingIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ErrorCapturingIdentifierContext errorCapturingIdentifier() throws RecognitionException {
        ErrorCapturingIdentifierContext _localctx = new ErrorCapturingIdentifierContext(_ctx, getState());
        enterRule(_localctx, 368, RULE_errorCapturingIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3798);
                identifier();
                setState(3799);
                errorCapturingIdentifierExtra();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
        public ErrorCapturingIdentifierExtraContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_errorCapturingIdentifierExtra;
        }

        public ErrorCapturingIdentifierExtraContext() {
        }

        public void copyFrom(ErrorCapturingIdentifierExtraContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
        public List<TerminalNode> MINUS() {
            return getTokens(SqlBaseParser.MINUS);
        }

        public TerminalNode MINUS(int i) {
            return getToken(SqlBaseParser.MINUS, i);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public ErrorIdentContext(ErrorCapturingIdentifierExtraContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterErrorIdent(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitErrorIdent(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitErrorIdent(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
        public RealIdentContext(ErrorCapturingIdentifierExtraContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRealIdent(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRealIdent(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRealIdent(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() throws RecognitionException {
        ErrorCapturingIdentifierExtraContext _localctx = new ErrorCapturingIdentifierExtraContext(_ctx, getState());
        enterRule(_localctx, 370, RULE_errorCapturingIdentifierExtra);
        try {
            int _alt;
            setState(3808);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 484, _ctx)) {
                case 1:
                    _localctx = new ErrorIdentContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3803);
                    _errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1: {
                                {
                                    setState(3801);
                                    match(MINUS);
                                    setState(3802);
                                    identifier();
                                }
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(3805);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 483, _ctx);
                    } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                }
                break;
                case 2:
                    _localctx = new RealIdentContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentifierContext extends ParserRuleContext {
        public StrictIdentifierContext strictIdentifier() {
            return getRuleContext(StrictIdentifierContext.class, 0);
        }

        public StrictNonReservedContext strictNonReserved() {
            return getRuleContext(StrictNonReservedContext.class, 0);
        }

        public IdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdentifierContext identifier() throws RecognitionException {
        IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
        enterRule(_localctx, 372, RULE_identifier);
        try {
            setState(3813);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 485, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3810);
                    strictIdentifier();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3811);
                    if (!(!SQL_standard_keyword_behavior))
                        throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
                    setState(3812);
                    strictNonReserved();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StrictIdentifierContext extends ParserRuleContext {
        public StrictIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_strictIdentifier;
        }

        public StrictIdentifierContext() {
        }

        public void copyFrom(StrictIdentifierContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
        public QuotedIdentifierContext quotedIdentifier() {
            return getRuleContext(QuotedIdentifierContext.class, 0);
        }

        public QuotedIdentifierAlternativeContext(StrictIdentifierContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQuotedIdentifierAlternative(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQuotedIdentifierAlternative(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQuotedIdentifierAlternative(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnquotedIdentifierContext extends StrictIdentifierContext {
        public TerminalNode IDENTIFIER() {
            return getToken(SqlBaseParser.IDENTIFIER, 0);
        }

        public AnsiNonReservedContext ansiNonReserved() {
            return getRuleContext(AnsiNonReservedContext.class, 0);
        }

        public NonReservedContext nonReserved() {
            return getRuleContext(NonReservedContext.class, 0);
        }

        public UnquotedIdentifierContext(StrictIdentifierContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnquotedIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnquotedIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnquotedIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StrictIdentifierContext strictIdentifier() throws RecognitionException {
        StrictIdentifierContext _localctx = new StrictIdentifierContext(_ctx, getState());
        enterRule(_localctx, 374, RULE_strictIdentifier);
        try {
            setState(3821);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 486, _ctx)) {
                case 1:
                    _localctx = new UnquotedIdentifierContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3815);
                    match(IDENTIFIER);
                }
                break;
                case 2:
                    _localctx = new QuotedIdentifierAlternativeContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3816);
                    quotedIdentifier();
                }
                break;
                case 3:
                    _localctx = new UnquotedIdentifierContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3817);
                    if (!(SQL_standard_keyword_behavior))
                        throw new FailedPredicateException(this, "SQL_standard_keyword_behavior");
                    setState(3818);
                    ansiNonReserved();
                }
                break;
                case 4:
                    _localctx = new UnquotedIdentifierContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3819);
                    if (!(!SQL_standard_keyword_behavior))
                        throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
                    setState(3820);
                    nonReserved();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QuotedIdentifierContext extends ParserRuleContext {
        public TerminalNode BACKQUOTED_IDENTIFIER() {
            return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
        }

        public TerminalNode DOUBLEQUOTED_STRING() {
            return getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0);
        }

        public QuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_quotedIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQuotedIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQuotedIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQuotedIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QuotedIdentifierContext quotedIdentifier() throws RecognitionException {
        QuotedIdentifierContext _localctx = new QuotedIdentifierContext(_ctx, getState());
        enterRule(_localctx, 376, RULE_quotedIdentifier);
        try {
            setState(3826);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 487, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3823);
                    match(BACKQUOTED_IDENTIFIER);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3824);
                    if (!(double_quoted_identifiers))
                        throw new FailedPredicateException(this, "double_quoted_identifiers");
                    setState(3825);
                    match(DOUBLEQUOTED_STRING);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BackQuotedIdentifierContext extends ParserRuleContext {
        public TerminalNode BACKQUOTED_IDENTIFIER() {
            return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
        }

        public BackQuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_backQuotedIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterBackQuotedIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitBackQuotedIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBackQuotedIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BackQuotedIdentifierContext backQuotedIdentifier() throws RecognitionException {
        BackQuotedIdentifierContext _localctx = new BackQuotedIdentifierContext(_ctx, getState());
        enterRule(_localctx, 378, RULE_backQuotedIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3828);
                match(BACKQUOTED_IDENTIFIER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NumberContext extends ParserRuleContext {
        public NumberContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_number;
        }

        public NumberContext() {
        }

        public void copyFrom(NumberContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DecimalLiteralContext extends NumberContext {
        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public DecimalLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDecimalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDecimalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDecimalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BigIntLiteralContext extends NumberContext {
        public TerminalNode BIGINT_LITERAL() {
            return getToken(SqlBaseParser.BIGINT_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public BigIntLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterBigIntLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitBigIntLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBigIntLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TinyIntLiteralContext extends NumberContext {
        public TerminalNode TINYINT_LITERAL() {
            return getToken(SqlBaseParser.TINYINT_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public TinyIntLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTinyIntLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTinyIntLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTinyIntLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LegacyDecimalLiteralContext extends NumberContext {
        public TerminalNode EXPONENT_VALUE() {
            return getToken(SqlBaseParser.EXPONENT_VALUE, 0);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public LegacyDecimalLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterLegacyDecimalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitLegacyDecimalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLegacyDecimalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BigDecimalLiteralContext extends NumberContext {
        public TerminalNode BIGDECIMAL_LITERAL() {
            return getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public BigDecimalLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterBigDecimalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitBigDecimalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBigDecimalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExponentLiteralContext extends NumberContext {
        public TerminalNode EXPONENT_VALUE() {
            return getToken(SqlBaseParser.EXPONENT_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public ExponentLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExponentLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExponentLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExponentLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DoubleLiteralContext extends NumberContext {
        public TerminalNode DOUBLE_LITERAL() {
            return getToken(SqlBaseParser.DOUBLE_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public DoubleLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDoubleLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDoubleLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDoubleLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IntegerLiteralContext extends NumberContext {
        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public IntegerLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIntegerLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIntegerLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIntegerLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FloatLiteralContext extends NumberContext {
        public TerminalNode FLOAT_LITERAL() {
            return getToken(SqlBaseParser.FLOAT_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public FloatLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFloatLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFloatLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFloatLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SmallIntLiteralContext extends NumberContext {
        public TerminalNode SMALLINT_LITERAL() {
            return getToken(SqlBaseParser.SMALLINT_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public SmallIntLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSmallIntLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSmallIntLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSmallIntLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NumberContext number() throws RecognitionException {
        NumberContext _localctx = new NumberContext(_ctx, getState());
        enterRule(_localctx, 380, RULE_number);
        int _la;
        try {
            setState(3873);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 498, _ctx)) {
                case 1:
                    _localctx = new ExponentLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3830);
                    if (!(!legacy_exponent_literal_as_decimal_enabled))
                        throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
                    setState(3832);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3831);
                            match(MINUS);
                        }
                    }

                    setState(3834);
                    match(EXPONENT_VALUE);
                }
                break;
                case 2:
                    _localctx = new DecimalLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3835);
                    if (!(!legacy_exponent_literal_as_decimal_enabled))
                        throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
                    setState(3837);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3836);
                            match(MINUS);
                        }
                    }

                    setState(3839);
                    match(DECIMAL_VALUE);
                }
                break;
                case 3:
                    _localctx = new LegacyDecimalLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3840);
                    if (!(legacy_exponent_literal_as_decimal_enabled))
                        throw new FailedPredicateException(this, "legacy_exponent_literal_as_decimal_enabled");
                    setState(3842);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3841);
                            match(MINUS);
                        }
                    }

                    setState(3844);
                    _la = _input.LA(1);
                    if (!(_la == EXPONENT_VALUE || _la == DECIMAL_VALUE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 4:
                    _localctx = new IntegerLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3846);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3845);
                            match(MINUS);
                        }
                    }

                    setState(3848);
                    match(INTEGER_VALUE);
                }
                break;
                case 5:
                    _localctx = new BigIntLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3850);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3849);
                            match(MINUS);
                        }
                    }

                    setState(3852);
                    match(BIGINT_LITERAL);
                }
                break;
                case 6:
                    _localctx = new SmallIntLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3854);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3853);
                            match(MINUS);
                        }
                    }

                    setState(3856);
                    match(SMALLINT_LITERAL);
                }
                break;
                case 7:
                    _localctx = new TinyIntLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 7);
                {
                    setState(3858);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3857);
                            match(MINUS);
                        }
                    }

                    setState(3860);
                    match(TINYINT_LITERAL);
                }
                break;
                case 8:
                    _localctx = new DoubleLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 8);
                {
                    setState(3862);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3861);
                            match(MINUS);
                        }
                    }

                    setState(3864);
                    match(DOUBLE_LITERAL);
                }
                break;
                case 9:
                    _localctx = new FloatLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 9);
                {
                    setState(3866);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3865);
                            match(MINUS);
                        }
                    }

                    setState(3868);
                    match(FLOAT_LITERAL);
                }
                break;
                case 10:
                    _localctx = new BigDecimalLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 10);
                {
                    setState(3870);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3869);
                            match(MINUS);
                        }
                    }

                    setState(3872);
                    match(BIGDECIMAL_LITERAL);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterColumnActionContext extends ParserRuleContext {
        public Token setOrDrop;
        public Token dropDefault;

        public TerminalNode TYPE() {
            return getToken(SqlBaseParser.TYPE, 0);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        public ColPositionContext colPosition() {
            return getRuleContext(ColPositionContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public DefaultExpressionContext defaultExpression() {
            return getRuleContext(DefaultExpressionContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public AlterColumnActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterColumnAction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAlterColumnAction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitAlterColumnAction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAlterColumnAction(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterColumnActionContext alterColumnAction() throws RecognitionException {
        AlterColumnActionContext _localctx = new AlterColumnActionContext(_ctx, getState());
        enterRule(_localctx, 382, RULE_alterColumnAction);
        int _la;
        try {
            setState(3886);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 499, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3875);
                    match(TYPE);
                    setState(3876);
                    dataType();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3877);
                    commentSpec();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3878);
                    colPosition();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3879);
                    ((AlterColumnActionContext) _localctx).setOrDrop = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == DROP || _la == SET)) {
                        ((AlterColumnActionContext) _localctx).setOrDrop = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3880);
                    match(NOT);
                    setState(3881);
                    match(NULL);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3882);
                    match(SET);
                    setState(3883);
                    defaultExpression();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3884);
                    ((AlterColumnActionContext) _localctx).dropDefault = match(DROP);
                    setState(3885);
                    match(DEFAULT);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StringLitContext extends ParserRuleContext {
        public TerminalNode STRING_LITERAL() {
            return getToken(SqlBaseParser.STRING_LITERAL, 0);
        }

        public TerminalNode DOUBLEQUOTED_STRING() {
            return getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0);
        }

        public StringLitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_stringLit;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStringLit(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStringLit(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStringLit(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StringLitContext stringLit() throws RecognitionException {
        StringLitContext _localctx = new StringLitContext(_ctx, getState());
        enterRule(_localctx, 384, RULE_stringLit);
        try {
            setState(3891);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 500, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3888);
                    match(STRING_LITERAL);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3889);
                    if (!(!double_quoted_identifiers))
                        throw new FailedPredicateException(this, "!double_quoted_identifiers");
                    setState(3890);
                    match(DOUBLEQUOTED_STRING);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CommentContext extends ParserRuleContext {
        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public CommentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_comment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterComment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitComment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComment(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CommentContext comment() throws RecognitionException {
        CommentContext _localctx = new CommentContext(_ctx, getState());
        enterRule(_localctx, 386, RULE_comment);
        try {
            setState(3895);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 501, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3893);
                    stringLit();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3894);
                    match(NULL);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class VersionContext extends ParserRuleContext {
        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public StringLitContext stringLit() {
            return getRuleContext(StringLitContext.class, 0);
        }

        public VersionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_version;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterVersion(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitVersion(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitVersion(this);
            else return visitor.visitChildren(this);
        }
    }

    public final VersionContext version() throws RecognitionException {
        VersionContext _localctx = new VersionContext(_ctx, getState());
        enterRule(_localctx, 388, RULE_version);
        try {
            setState(3899);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 502, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3897);
                    match(INTEGER_VALUE);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3898);
                    stringLit();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AnsiNonReservedContext extends ParserRuleContext {
        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode AFTER() {
            return getToken(SqlBaseParser.AFTER, 0);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode ALWAYS() {
            return getToken(SqlBaseParser.ALWAYS, 0);
        }

        public TerminalNode ANALYZE() {
            return getToken(SqlBaseParser.ANALYZE, 0);
        }

        public TerminalNode ANTI() {
            return getToken(SqlBaseParser.ANTI, 0);
        }

        public TerminalNode ANY_VALUE() {
            return getToken(SqlBaseParser.ANY_VALUE, 0);
        }

        public TerminalNode ARCHIVE() {
            return getToken(SqlBaseParser.ARCHIVE, 0);
        }

        public TerminalNode ARRAY() {
            return getToken(SqlBaseParser.ARRAY, 0);
        }

        public TerminalNode ASC() {
            return getToken(SqlBaseParser.ASC, 0);
        }

        public TerminalNode AT() {
            return getToken(SqlBaseParser.AT, 0);
        }

        public TerminalNode BETWEEN() {
            return getToken(SqlBaseParser.BETWEEN, 0);
        }

        public TerminalNode BIGINT() {
            return getToken(SqlBaseParser.BIGINT, 0);
        }

        public TerminalNode BINARY() {
            return getToken(SqlBaseParser.BINARY, 0);
        }

        public TerminalNode BINARY_HEX() {
            return getToken(SqlBaseParser.BINARY_HEX, 0);
        }

        public TerminalNode BOOLEAN() {
            return getToken(SqlBaseParser.BOOLEAN, 0);
        }

        public TerminalNode BUCKET() {
            return getToken(SqlBaseParser.BUCKET, 0);
        }

        public TerminalNode BUCKETS() {
            return getToken(SqlBaseParser.BUCKETS, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode BYTE() {
            return getToken(SqlBaseParser.BYTE, 0);
        }

        public TerminalNode CACHE() {
            return getToken(SqlBaseParser.CACHE, 0);
        }

        public TerminalNode CASCADE() {
            return getToken(SqlBaseParser.CASCADE, 0);
        }

        public TerminalNode CATALOG() {
            return getToken(SqlBaseParser.CATALOG, 0);
        }

        public TerminalNode CATALOGS() {
            return getToken(SqlBaseParser.CATALOGS, 0);
        }

        public TerminalNode CHANGE() {
            return getToken(SqlBaseParser.CHANGE, 0);
        }

        public TerminalNode CHAR() {
            return getToken(SqlBaseParser.CHAR, 0);
        }

        public TerminalNode CHARACTER() {
            return getToken(SqlBaseParser.CHARACTER, 0);
        }

        public TerminalNode CLEAR() {
            return getToken(SqlBaseParser.CLEAR, 0);
        }

        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public TerminalNode CLUSTERED() {
            return getToken(SqlBaseParser.CLUSTERED, 0);
        }

        public TerminalNode CODEGEN() {
            return getToken(SqlBaseParser.CODEGEN, 0);
        }

        public TerminalNode COLLECTION() {
            return getToken(SqlBaseParser.COLLECTION, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode COMMIT() {
            return getToken(SqlBaseParser.COMMIT, 0);
        }

        public TerminalNode COMPACT() {
            return getToken(SqlBaseParser.COMPACT, 0);
        }

        public TerminalNode COMPACTIONS() {
            return getToken(SqlBaseParser.COMPACTIONS, 0);
        }

        public TerminalNode COMPUTE() {
            return getToken(SqlBaseParser.COMPUTE, 0);
        }

        public TerminalNode CONCATENATE() {
            return getToken(SqlBaseParser.CONCATENATE, 0);
        }

        public TerminalNode COST() {
            return getToken(SqlBaseParser.COST, 0);
        }

        public TerminalNode CUBE() {
            return getToken(SqlBaseParser.CUBE, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public TerminalNode DATA() {
            return getToken(SqlBaseParser.DATA, 0);
        }

        public TerminalNode DATABASE() {
            return getToken(SqlBaseParser.DATABASE, 0);
        }

        public TerminalNode DATABASES() {
            return getToken(SqlBaseParser.DATABASES, 0);
        }

        public TerminalNode DATE() {
            return getToken(SqlBaseParser.DATE, 0);
        }

        public TerminalNode DATEADD() {
            return getToken(SqlBaseParser.DATEADD, 0);
        }

        public TerminalNode DATE_ADD() {
            return getToken(SqlBaseParser.DATE_ADD, 0);
        }

        public TerminalNode DATEDIFF() {
            return getToken(SqlBaseParser.DATEDIFF, 0);
        }

        public TerminalNode DATE_DIFF() {
            return getToken(SqlBaseParser.DATE_DIFF, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public TerminalNode DAYS() {
            return getToken(SqlBaseParser.DAYS, 0);
        }

        public TerminalNode DAYOFYEAR() {
            return getToken(SqlBaseParser.DAYOFYEAR, 0);
        }

        public TerminalNode DBPROPERTIES() {
            return getToken(SqlBaseParser.DBPROPERTIES, 0);
        }

        public TerminalNode DEC() {
            return getToken(SqlBaseParser.DEC, 0);
        }

        public TerminalNode DECIMAL() {
            return getToken(SqlBaseParser.DECIMAL, 0);
        }

        public TerminalNode DECLARE() {
            return getToken(SqlBaseParser.DECLARE, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public TerminalNode DEFINED() {
            return getToken(SqlBaseParser.DEFINED, 0);
        }

        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode DELIMITED() {
            return getToken(SqlBaseParser.DELIMITED, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode DFS() {
            return getToken(SqlBaseParser.DFS, 0);
        }

        public TerminalNode DIRECTORIES() {
            return getToken(SqlBaseParser.DIRECTORIES, 0);
        }

        public TerminalNode DIRECTORY() {
            return getToken(SqlBaseParser.DIRECTORY, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public TerminalNode DIV() {
            return getToken(SqlBaseParser.DIV, 0);
        }

        public TerminalNode DOUBLE() {
            return getToken(SqlBaseParser.DOUBLE, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode ESCAPED() {
            return getToken(SqlBaseParser.ESCAPED, 0);
        }

        public TerminalNode EVOLUTION() {
            return getToken(SqlBaseParser.EVOLUTION, 0);
        }

        public TerminalNode EXCHANGE() {
            return getToken(SqlBaseParser.EXCHANGE, 0);
        }

        public TerminalNode EXCLUDE() {
            return getToken(SqlBaseParser.EXCLUDE, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode EXPLAIN() {
            return getToken(SqlBaseParser.EXPLAIN, 0);
        }

        public TerminalNode EXPORT() {
            return getToken(SqlBaseParser.EXPORT, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode EXTERNAL() {
            return getToken(SqlBaseParser.EXTERNAL, 0);
        }

        public TerminalNode EXTRACT() {
            return getToken(SqlBaseParser.EXTRACT, 0);
        }

        public TerminalNode FIELDS() {
            return getToken(SqlBaseParser.FIELDS, 0);
        }

        public TerminalNode FILEFORMAT() {
            return getToken(SqlBaseParser.FILEFORMAT, 0);
        }

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public TerminalNode FLOAT() {
            return getToken(SqlBaseParser.FLOAT, 0);
        }

        public TerminalNode FOLLOWING() {
            return getToken(SqlBaseParser.FOLLOWING, 0);
        }

        public TerminalNode FORMAT() {
            return getToken(SqlBaseParser.FORMAT, 0);
        }

        public TerminalNode FORMATTED() {
            return getToken(SqlBaseParser.FORMATTED, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public TerminalNode FUNCTIONS() {
            return getToken(SqlBaseParser.FUNCTIONS, 0);
        }

        public TerminalNode GENERATED() {
            return getToken(SqlBaseParser.GENERATED, 0);
        }

        public TerminalNode GLOBAL() {
            return getToken(SqlBaseParser.GLOBAL, 0);
        }

        public TerminalNode GROUPING() {
            return getToken(SqlBaseParser.GROUPING, 0);
        }

        public TerminalNode HOUR() {
            return getToken(SqlBaseParser.HOUR, 0);
        }

        public TerminalNode HOURS() {
            return getToken(SqlBaseParser.HOURS, 0);
        }

        public TerminalNode IDENTIFIER_KW() {
            return getToken(SqlBaseParser.IDENTIFIER_KW, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode IMMEDIATE() {
            return getToken(SqlBaseParser.IMMEDIATE, 0);
        }

        public TerminalNode IMPORT() {
            return getToken(SqlBaseParser.IMPORT, 0);
        }

        public TerminalNode INCLUDE() {
            return getToken(SqlBaseParser.INCLUDE, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public TerminalNode INDEXES() {
            return getToken(SqlBaseParser.INDEXES, 0);
        }

        public TerminalNode INPATH() {
            return getToken(SqlBaseParser.INPATH, 0);
        }

        public TerminalNode INPUTFORMAT() {
            return getToken(SqlBaseParser.INPUTFORMAT, 0);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode INT() {
            return getToken(SqlBaseParser.INT, 0);
        }

        public TerminalNode INTEGER() {
            return getToken(SqlBaseParser.INTEGER, 0);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode ITEMS() {
            return getToken(SqlBaseParser.ITEMS, 0);
        }

        public TerminalNode KEYS() {
            return getToken(SqlBaseParser.KEYS, 0);
        }

        public TerminalNode LAST() {
            return getToken(SqlBaseParser.LAST, 0);
        }

        public TerminalNode LAZY() {
            return getToken(SqlBaseParser.LAZY, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public TerminalNode ILIKE() {
            return getToken(SqlBaseParser.ILIKE, 0);
        }

        public TerminalNode LIMIT() {
            return getToken(SqlBaseParser.LIMIT, 0);
        }

        public TerminalNode LINES() {
            return getToken(SqlBaseParser.LINES, 0);
        }

        public TerminalNode LIST() {
            return getToken(SqlBaseParser.LIST, 0);
        }

        public TerminalNode LOAD() {
            return getToken(SqlBaseParser.LOAD, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TerminalNode LOCATION() {
            return getToken(SqlBaseParser.LOCATION, 0);
        }

        public TerminalNode LOCK() {
            return getToken(SqlBaseParser.LOCK, 0);
        }

        public TerminalNode LOCKS() {
            return getToken(SqlBaseParser.LOCKS, 0);
        }

        public TerminalNode LOGICAL() {
            return getToken(SqlBaseParser.LOGICAL, 0);
        }

        public TerminalNode LONG() {
            return getToken(SqlBaseParser.LONG, 0);
        }

        public TerminalNode MACRO() {
            return getToken(SqlBaseParser.MACRO, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode MERGE() {
            return getToken(SqlBaseParser.MERGE, 0);
        }

        public TerminalNode MICROSECOND() {
            return getToken(SqlBaseParser.MICROSECOND, 0);
        }

        public TerminalNode MICROSECONDS() {
            return getToken(SqlBaseParser.MICROSECONDS, 0);
        }

        public TerminalNode MILLISECOND() {
            return getToken(SqlBaseParser.MILLISECOND, 0);
        }

        public TerminalNode MILLISECONDS() {
            return getToken(SqlBaseParser.MILLISECONDS, 0);
        }

        public TerminalNode MINUTE() {
            return getToken(SqlBaseParser.MINUTE, 0);
        }

        public TerminalNode MINUTES() {
            return getToken(SqlBaseParser.MINUTES, 0);
        }

        public TerminalNode MONTH() {
            return getToken(SqlBaseParser.MONTH, 0);
        }

        public TerminalNode MONTHS() {
            return getToken(SqlBaseParser.MONTHS, 0);
        }

        public TerminalNode MSCK() {
            return getToken(SqlBaseParser.MSCK, 0);
        }

        public TerminalNode NAME() {
            return getToken(SqlBaseParser.NAME, 0);
        }

        public TerminalNode NAMESPACE() {
            return getToken(SqlBaseParser.NAMESPACE, 0);
        }

        public TerminalNode NAMESPACES() {
            return getToken(SqlBaseParser.NAMESPACES, 0);
        }

        public TerminalNode NANOSECOND() {
            return getToken(SqlBaseParser.NANOSECOND, 0);
        }

        public TerminalNode NANOSECONDS() {
            return getToken(SqlBaseParser.NANOSECONDS, 0);
        }

        public TerminalNode NO() {
            return getToken(SqlBaseParser.NO, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode NUMERIC() {
            return getToken(SqlBaseParser.NUMERIC, 0);
        }

        public TerminalNode OF() {
            return getToken(SqlBaseParser.OF, 0);
        }

        public TerminalNode OPTION() {
            return getToken(SqlBaseParser.OPTION, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public TerminalNode OUT() {
            return getToken(SqlBaseParser.OUT, 0);
        }

        public TerminalNode OUTPUTFORMAT() {
            return getToken(SqlBaseParser.OUTPUTFORMAT, 0);
        }

        public TerminalNode OVER() {
            return getToken(SqlBaseParser.OVER, 0);
        }

        public TerminalNode OVERLAY() {
            return getToken(SqlBaseParser.OVERLAY, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode PARTITIONED() {
            return getToken(SqlBaseParser.PARTITIONED, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public TerminalNode PERCENTLIT() {
            return getToken(SqlBaseParser.PERCENTLIT, 0);
        }

        public TerminalNode PIVOT() {
            return getToken(SqlBaseParser.PIVOT, 0);
        }

        public TerminalNode PLACING() {
            return getToken(SqlBaseParser.PLACING, 0);
        }

        public TerminalNode POSITION() {
            return getToken(SqlBaseParser.POSITION, 0);
        }

        public TerminalNode PRECEDING() {
            return getToken(SqlBaseParser.PRECEDING, 0);
        }

        public TerminalNode PRINCIPALS() {
            return getToken(SqlBaseParser.PRINCIPALS, 0);
        }

        public TerminalNode PROPERTIES() {
            return getToken(SqlBaseParser.PROPERTIES, 0);
        }

        public TerminalNode PURGE() {
            return getToken(SqlBaseParser.PURGE, 0);
        }

        public TerminalNode QUARTER() {
            return getToken(SqlBaseParser.QUARTER, 0);
        }

        public TerminalNode QUERY() {
            return getToken(SqlBaseParser.QUERY, 0);
        }

        public TerminalNode RANGE() {
            return getToken(SqlBaseParser.RANGE, 0);
        }

        public TerminalNode REAL() {
            return getToken(SqlBaseParser.REAL, 0);
        }

        public TerminalNode RECORDREADER() {
            return getToken(SqlBaseParser.RECORDREADER, 0);
        }

        public TerminalNode RECORDWRITER() {
            return getToken(SqlBaseParser.RECORDWRITER, 0);
        }

        public TerminalNode RECOVER() {
            return getToken(SqlBaseParser.RECOVER, 0);
        }

        public TerminalNode REDUCE() {
            return getToken(SqlBaseParser.REDUCE, 0);
        }

        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode REPAIR() {
            return getToken(SqlBaseParser.REPAIR, 0);
        }

        public TerminalNode REPEATABLE() {
            return getToken(SqlBaseParser.REPEATABLE, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode RESET() {
            return getToken(SqlBaseParser.RESET, 0);
        }

        public TerminalNode RESPECT() {
            return getToken(SqlBaseParser.RESPECT, 0);
        }

        public TerminalNode RESTRICT() {
            return getToken(SqlBaseParser.RESTRICT, 0);
        }

        public TerminalNode REVOKE() {
            return getToken(SqlBaseParser.REVOKE, 0);
        }

        public TerminalNode RLIKE() {
            return getToken(SqlBaseParser.RLIKE, 0);
        }

        public TerminalNode ROLE() {
            return getToken(SqlBaseParser.ROLE, 0);
        }

        public TerminalNode ROLES() {
            return getToken(SqlBaseParser.ROLES, 0);
        }

        public TerminalNode ROLLBACK() {
            return getToken(SqlBaseParser.ROLLBACK, 0);
        }

        public TerminalNode ROLLUP() {
            return getToken(SqlBaseParser.ROLLUP, 0);
        }

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode ROWS() {
            return getToken(SqlBaseParser.ROWS, 0);
        }

        public TerminalNode SCHEMA() {
            return getToken(SqlBaseParser.SCHEMA, 0);
        }

        public TerminalNode SCHEMAS() {
            return getToken(SqlBaseParser.SCHEMAS, 0);
        }

        public TerminalNode SECOND() {
            return getToken(SqlBaseParser.SECOND, 0);
        }

        public TerminalNode SECONDS() {
            return getToken(SqlBaseParser.SECONDS, 0);
        }

        public TerminalNode SEMI() {
            return getToken(SqlBaseParser.SEMI, 0);
        }

        public TerminalNode SEPARATED() {
            return getToken(SqlBaseParser.SEPARATED, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode SETMINUS() {
            return getToken(SqlBaseParser.SETMINUS, 0);
        }

        public TerminalNode SETS() {
            return getToken(SqlBaseParser.SETS, 0);
        }

        public TerminalNode SHORT() {
            return getToken(SqlBaseParser.SHORT, 0);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode SINGLE() {
            return getToken(SqlBaseParser.SINGLE, 0);
        }

        public TerminalNode SKEWED() {
            return getToken(SqlBaseParser.SKEWED, 0);
        }

        public TerminalNode SMALLINT() {
            return getToken(SqlBaseParser.SMALLINT, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        public TerminalNode SORTED() {
            return getToken(SqlBaseParser.SORTED, 0);
        }

        public TerminalNode SOURCE() {
            return getToken(SqlBaseParser.SOURCE, 0);
        }

        public TerminalNode START() {
            return getToken(SqlBaseParser.START, 0);
        }

        public TerminalNode STATISTICS() {
            return getToken(SqlBaseParser.STATISTICS, 0);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode STRATIFY() {
            return getToken(SqlBaseParser.STRATIFY, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode SUBSTR() {
            return getToken(SqlBaseParser.SUBSTR, 0);
        }

        public TerminalNode SUBSTRING() {
            return getToken(SqlBaseParser.SUBSTRING, 0);
        }

        public TerminalNode SYNC() {
            return getToken(SqlBaseParser.SYNC, 0);
        }

        public TerminalNode SYSTEM_TIME() {
            return getToken(SqlBaseParser.SYSTEM_TIME, 0);
        }

        public TerminalNode SYSTEM_VERSION() {
            return getToken(SqlBaseParser.SYSTEM_VERSION, 0);
        }

        public TerminalNode TABLES() {
            return getToken(SqlBaseParser.TABLES, 0);
        }

        public TerminalNode TABLESAMPLE() {
            return getToken(SqlBaseParser.TABLESAMPLE, 0);
        }

        public TerminalNode TARGET() {
            return getToken(SqlBaseParser.TARGET, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode TERMINATED() {
            return getToken(SqlBaseParser.TERMINATED, 0);
        }

        public TerminalNode TIMEDIFF() {
            return getToken(SqlBaseParser.TIMEDIFF, 0);
        }

        public TerminalNode TIMESTAMP() {
            return getToken(SqlBaseParser.TIMESTAMP, 0);
        }

        public TerminalNode TIMESTAMP_LTZ() {
            return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0);
        }

        public TerminalNode TIMESTAMP_NTZ() {
            return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0);
        }

        public TerminalNode TIMESTAMPADD() {
            return getToken(SqlBaseParser.TIMESTAMPADD, 0);
        }

        public TerminalNode TIMESTAMPDIFF() {
            return getToken(SqlBaseParser.TIMESTAMPDIFF, 0);
        }

        public TerminalNode TINYINT() {
            return getToken(SqlBaseParser.TINYINT, 0);
        }

        public TerminalNode TOUCH() {
            return getToken(SqlBaseParser.TOUCH, 0);
        }

        public TerminalNode TRANSACTION() {
            return getToken(SqlBaseParser.TRANSACTION, 0);
        }

        public TerminalNode TRANSACTIONS() {
            return getToken(SqlBaseParser.TRANSACTIONS, 0);
        }

        public TerminalNode TRANSFORM() {
            return getToken(SqlBaseParser.TRANSFORM, 0);
        }

        public TerminalNode TRIM() {
            return getToken(SqlBaseParser.TRIM, 0);
        }

        public TerminalNode TRUE() {
            return getToken(SqlBaseParser.TRUE, 0);
        }

        public TerminalNode TRUNCATE() {
            return getToken(SqlBaseParser.TRUNCATE, 0);
        }

        public TerminalNode TRY_CAST() {
            return getToken(SqlBaseParser.TRY_CAST, 0);
        }

        public TerminalNode TYPE() {
            return getToken(SqlBaseParser.TYPE, 0);
        }

        public TerminalNode UNARCHIVE() {
            return getToken(SqlBaseParser.UNARCHIVE, 0);
        }

        public TerminalNode UNBOUNDED() {
            return getToken(SqlBaseParser.UNBOUNDED, 0);
        }

        public TerminalNode UNCACHE() {
            return getToken(SqlBaseParser.UNCACHE, 0);
        }

        public TerminalNode UNLOCK() {
            return getToken(SqlBaseParser.UNLOCK, 0);
        }

        public TerminalNode UNPIVOT() {
            return getToken(SqlBaseParser.UNPIVOT, 0);
        }

        public TerminalNode UNSET() {
            return getToken(SqlBaseParser.UNSET, 0);
        }

        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public TerminalNode USE() {
            return getToken(SqlBaseParser.USE, 0);
        }

        public TerminalNode VALUES() {
            return getToken(SqlBaseParser.VALUES, 0);
        }

        public TerminalNode VARCHAR() {
            return getToken(SqlBaseParser.VARCHAR, 0);
        }

        public TerminalNode VAR() {
            return getToken(SqlBaseParser.VAR, 0);
        }

        public TerminalNode VARIABLE() {
            return getToken(SqlBaseParser.VARIABLE, 0);
        }

        public TerminalNode VARIANT() {
            return getToken(SqlBaseParser.VARIANT, 0);
        }

        public TerminalNode VERSION() {
            return getToken(SqlBaseParser.VERSION, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode VIEWS() {
            return getToken(SqlBaseParser.VIEWS, 0);
        }

        public TerminalNode VOID() {
            return getToken(SqlBaseParser.VOID, 0);
        }

        public TerminalNode WEEK() {
            return getToken(SqlBaseParser.WEEK, 0);
        }

        public TerminalNode WEEKS() {
            return getToken(SqlBaseParser.WEEKS, 0);
        }

        public TerminalNode WINDOW() {
            return getToken(SqlBaseParser.WINDOW, 0);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public TerminalNode YEARS() {
            return getToken(SqlBaseParser.YEARS, 0);
        }

        public TerminalNode ZONE() {
            return getToken(SqlBaseParser.ZONE, 0);
        }

        public AnsiNonReservedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ansiNonReserved;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAnsiNonReserved(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAnsiNonReserved(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAnsiNonReserved(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AnsiNonReservedContext ansiNonReserved() throws RecognitionException {
        AnsiNonReservedContext _localctx = new AnsiNonReservedContext(_ctx, getState());
        enterRule(_localctx, 390, RULE_ansiNonReserved);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3901);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & -7497095007495686656L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -3678034191229911071L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -56577245229L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36063990183546421L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 9220274158548418295L) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & 60030879L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StrictNonReservedContext extends ParserRuleContext {
        public TerminalNode ANTI() {
            return getToken(SqlBaseParser.ANTI, 0);
        }

        public TerminalNode CROSS() {
            return getToken(SqlBaseParser.CROSS, 0);
        }

        public TerminalNode EXCEPT() {
            return getToken(SqlBaseParser.EXCEPT, 0);
        }

        public TerminalNode FULL() {
            return getToken(SqlBaseParser.FULL, 0);
        }

        public TerminalNode INNER() {
            return getToken(SqlBaseParser.INNER, 0);
        }

        public TerminalNode INTERSECT() {
            return getToken(SqlBaseParser.INTERSECT, 0);
        }

        public TerminalNode JOIN() {
            return getToken(SqlBaseParser.JOIN, 0);
        }

        public TerminalNode LATERAL() {
            return getToken(SqlBaseParser.LATERAL, 0);
        }

        public TerminalNode LEFT() {
            return getToken(SqlBaseParser.LEFT, 0);
        }

        public TerminalNode NATURAL() {
            return getToken(SqlBaseParser.NATURAL, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public TerminalNode RIGHT() {
            return getToken(SqlBaseParser.RIGHT, 0);
        }

        public TerminalNode SEMI() {
            return getToken(SqlBaseParser.SEMI, 0);
        }

        public TerminalNode SETMINUS() {
            return getToken(SqlBaseParser.SETMINUS, 0);
        }

        public TerminalNode UNION() {
            return getToken(SqlBaseParser.UNION, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public StrictNonReservedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_strictNonReserved;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterStrictNonReserved(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitStrictNonReserved(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStrictNonReserved(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StrictNonReservedContext strictNonReserved() throws RecognitionException {
        StrictNonReservedContext _localctx = new StrictNonReservedContext(_ctx, getState());
        enterRule(_localctx, 392, RULE_strictNonReserved);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3903);
                _la = _input.LA(1);
                if (!(_la == ANTI || _la == CROSS || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 1315200624777756673L) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & 9007199254741249L) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & 576460752303423553L) != 0) || _la == USING)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NonReservedContext extends ParserRuleContext {
        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode AFTER() {
            return getToken(SqlBaseParser.AFTER, 0);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode ALWAYS() {
            return getToken(SqlBaseParser.ALWAYS, 0);
        }

        public TerminalNode ANALYZE() {
            return getToken(SqlBaseParser.ANALYZE, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public TerminalNode ANY() {
            return getToken(SqlBaseParser.ANY, 0);
        }

        public TerminalNode ANY_VALUE() {
            return getToken(SqlBaseParser.ANY_VALUE, 0);
        }

        public TerminalNode ARCHIVE() {
            return getToken(SqlBaseParser.ARCHIVE, 0);
        }

        public TerminalNode ARRAY() {
            return getToken(SqlBaseParser.ARRAY, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode ASC() {
            return getToken(SqlBaseParser.ASC, 0);
        }

        public TerminalNode AT() {
            return getToken(SqlBaseParser.AT, 0);
        }

        public TerminalNode AUTHORIZATION() {
            return getToken(SqlBaseParser.AUTHORIZATION, 0);
        }

        public TerminalNode BETWEEN() {
            return getToken(SqlBaseParser.BETWEEN, 0);
        }

        public TerminalNode BIGINT() {
            return getToken(SqlBaseParser.BIGINT, 0);
        }

        public TerminalNode BINARY() {
            return getToken(SqlBaseParser.BINARY, 0);
        }

        public TerminalNode BINARY_HEX() {
            return getToken(SqlBaseParser.BINARY_HEX, 0);
        }

        public TerminalNode BOOLEAN() {
            return getToken(SqlBaseParser.BOOLEAN, 0);
        }

        public TerminalNode BOTH() {
            return getToken(SqlBaseParser.BOTH, 0);
        }

        public TerminalNode BUCKET() {
            return getToken(SqlBaseParser.BUCKET, 0);
        }

        public TerminalNode BUCKETS() {
            return getToken(SqlBaseParser.BUCKETS, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode BYTE() {
            return getToken(SqlBaseParser.BYTE, 0);
        }

        public TerminalNode CACHE() {
            return getToken(SqlBaseParser.CACHE, 0);
        }

        public TerminalNode CASCADE() {
            return getToken(SqlBaseParser.CASCADE, 0);
        }

        public TerminalNode CASE() {
            return getToken(SqlBaseParser.CASE, 0);
        }

        public TerminalNode CAST() {
            return getToken(SqlBaseParser.CAST, 0);
        }

        public TerminalNode CATALOG() {
            return getToken(SqlBaseParser.CATALOG, 0);
        }

        public TerminalNode CATALOGS() {
            return getToken(SqlBaseParser.CATALOGS, 0);
        }

        public TerminalNode CHANGE() {
            return getToken(SqlBaseParser.CHANGE, 0);
        }

        public TerminalNode CHAR() {
            return getToken(SqlBaseParser.CHAR, 0);
        }

        public TerminalNode CHARACTER() {
            return getToken(SqlBaseParser.CHARACTER, 0);
        }

        public TerminalNode CHECK() {
            return getToken(SqlBaseParser.CHECK, 0);
        }

        public TerminalNode CLEAR() {
            return getToken(SqlBaseParser.CLEAR, 0);
        }

        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public TerminalNode CLUSTERED() {
            return getToken(SqlBaseParser.CLUSTERED, 0);
        }

        public TerminalNode CODEGEN() {
            return getToken(SqlBaseParser.CODEGEN, 0);
        }

        public TerminalNode COLLATE() {
            return getToken(SqlBaseParser.COLLATE, 0);
        }

        public TerminalNode COLLATION() {
            return getToken(SqlBaseParser.COLLATION, 0);
        }

        public TerminalNode COLLECTION() {
            return getToken(SqlBaseParser.COLLECTION, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode COMMIT() {
            return getToken(SqlBaseParser.COMMIT, 0);
        }

        public TerminalNode COMPACT() {
            return getToken(SqlBaseParser.COMPACT, 0);
        }

        public TerminalNode COMPACTIONS() {
            return getToken(SqlBaseParser.COMPACTIONS, 0);
        }

        public TerminalNode COMPUTE() {
            return getToken(SqlBaseParser.COMPUTE, 0);
        }

        public TerminalNode CONCATENATE() {
            return getToken(SqlBaseParser.CONCATENATE, 0);
        }

        public TerminalNode CONSTRAINT() {
            return getToken(SqlBaseParser.CONSTRAINT, 0);
        }

        public TerminalNode COST() {
            return getToken(SqlBaseParser.COST, 0);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode CUBE() {
            return getToken(SqlBaseParser.CUBE, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public TerminalNode CURRENT_DATE() {
            return getToken(SqlBaseParser.CURRENT_DATE, 0);
        }

        public TerminalNode CURRENT_TIME() {
            return getToken(SqlBaseParser.CURRENT_TIME, 0);
        }

        public TerminalNode CURRENT_TIMESTAMP() {
            return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
        }

        public TerminalNode CURRENT_USER() {
            return getToken(SqlBaseParser.CURRENT_USER, 0);
        }

        public TerminalNode DATA() {
            return getToken(SqlBaseParser.DATA, 0);
        }

        public TerminalNode DATABASE() {
            return getToken(SqlBaseParser.DATABASE, 0);
        }

        public TerminalNode DATABASES() {
            return getToken(SqlBaseParser.DATABASES, 0);
        }

        public TerminalNode DATE() {
            return getToken(SqlBaseParser.DATE, 0);
        }

        public TerminalNode DATEADD() {
            return getToken(SqlBaseParser.DATEADD, 0);
        }

        public TerminalNode DATE_ADD() {
            return getToken(SqlBaseParser.DATE_ADD, 0);
        }

        public TerminalNode DATEDIFF() {
            return getToken(SqlBaseParser.DATEDIFF, 0);
        }

        public TerminalNode DATE_DIFF() {
            return getToken(SqlBaseParser.DATE_DIFF, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public TerminalNode DAYS() {
            return getToken(SqlBaseParser.DAYS, 0);
        }

        public TerminalNode DAYOFYEAR() {
            return getToken(SqlBaseParser.DAYOFYEAR, 0);
        }

        public TerminalNode DBPROPERTIES() {
            return getToken(SqlBaseParser.DBPROPERTIES, 0);
        }

        public TerminalNode DEC() {
            return getToken(SqlBaseParser.DEC, 0);
        }

        public TerminalNode DECIMAL() {
            return getToken(SqlBaseParser.DECIMAL, 0);
        }

        public TerminalNode DECLARE() {
            return getToken(SqlBaseParser.DECLARE, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public TerminalNode DEFINED() {
            return getToken(SqlBaseParser.DEFINED, 0);
        }

        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode DELIMITED() {
            return getToken(SqlBaseParser.DELIMITED, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode DFS() {
            return getToken(SqlBaseParser.DFS, 0);
        }

        public TerminalNode DIRECTORIES() {
            return getToken(SqlBaseParser.DIRECTORIES, 0);
        }

        public TerminalNode DIRECTORY() {
            return getToken(SqlBaseParser.DIRECTORY, 0);
        }

        public TerminalNode DISTINCT() {
            return getToken(SqlBaseParser.DISTINCT, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public TerminalNode DIV() {
            return getToken(SqlBaseParser.DIV, 0);
        }

        public TerminalNode DOUBLE() {
            return getToken(SqlBaseParser.DOUBLE, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode ELSE() {
            return getToken(SqlBaseParser.ELSE, 0);
        }

        public TerminalNode END() {
            return getToken(SqlBaseParser.END, 0);
        }

        public TerminalNode ESCAPE() {
            return getToken(SqlBaseParser.ESCAPE, 0);
        }

        public TerminalNode ESCAPED() {
            return getToken(SqlBaseParser.ESCAPED, 0);
        }

        public TerminalNode EVOLUTION() {
            return getToken(SqlBaseParser.EVOLUTION, 0);
        }

        public TerminalNode EXCHANGE() {
            return getToken(SqlBaseParser.EXCHANGE, 0);
        }

        public TerminalNode EXCLUDE() {
            return getToken(SqlBaseParser.EXCLUDE, 0);
        }

        public TerminalNode EXECUTE() {
            return getToken(SqlBaseParser.EXECUTE, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode EXPLAIN() {
            return getToken(SqlBaseParser.EXPLAIN, 0);
        }

        public TerminalNode EXPORT() {
            return getToken(SqlBaseParser.EXPORT, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode EXTERNAL() {
            return getToken(SqlBaseParser.EXTERNAL, 0);
        }

        public TerminalNode EXTRACT() {
            return getToken(SqlBaseParser.EXTRACT, 0);
        }

        public TerminalNode FALSE() {
            return getToken(SqlBaseParser.FALSE, 0);
        }

        public TerminalNode FETCH() {
            return getToken(SqlBaseParser.FETCH, 0);
        }

        public TerminalNode FILTER() {
            return getToken(SqlBaseParser.FILTER, 0);
        }

        public TerminalNode FIELDS() {
            return getToken(SqlBaseParser.FIELDS, 0);
        }

        public TerminalNode FILEFORMAT() {
            return getToken(SqlBaseParser.FILEFORMAT, 0);
        }

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public TerminalNode FLOAT() {
            return getToken(SqlBaseParser.FLOAT, 0);
        }

        public TerminalNode FOLLOWING() {
            return getToken(SqlBaseParser.FOLLOWING, 0);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public TerminalNode FOREIGN() {
            return getToken(SqlBaseParser.FOREIGN, 0);
        }

        public TerminalNode FORMAT() {
            return getToken(SqlBaseParser.FORMAT, 0);
        }

        public TerminalNode FORMATTED() {
            return getToken(SqlBaseParser.FORMATTED, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public TerminalNode FUNCTIONS() {
            return getToken(SqlBaseParser.FUNCTIONS, 0);
        }

        public TerminalNode GENERATED() {
            return getToken(SqlBaseParser.GENERATED, 0);
        }

        public TerminalNode GLOBAL() {
            return getToken(SqlBaseParser.GLOBAL, 0);
        }

        public TerminalNode GRANT() {
            return getToken(SqlBaseParser.GRANT, 0);
        }

        public TerminalNode GROUP() {
            return getToken(SqlBaseParser.GROUP, 0);
        }

        public TerminalNode GROUPING() {
            return getToken(SqlBaseParser.GROUPING, 0);
        }

        public TerminalNode HAVING() {
            return getToken(SqlBaseParser.HAVING, 0);
        }

        public TerminalNode HOUR() {
            return getToken(SqlBaseParser.HOUR, 0);
        }

        public TerminalNode HOURS() {
            return getToken(SqlBaseParser.HOURS, 0);
        }

        public TerminalNode IDENTIFIER_KW() {
            return getToken(SqlBaseParser.IDENTIFIER_KW, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode IMMEDIATE() {
            return getToken(SqlBaseParser.IMMEDIATE, 0);
        }

        public TerminalNode IMPORT() {
            return getToken(SqlBaseParser.IMPORT, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode INCLUDE() {
            return getToken(SqlBaseParser.INCLUDE, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public TerminalNode INDEXES() {
            return getToken(SqlBaseParser.INDEXES, 0);
        }

        public TerminalNode INPATH() {
            return getToken(SqlBaseParser.INPATH, 0);
        }

        public TerminalNode INPUTFORMAT() {
            return getToken(SqlBaseParser.INPUTFORMAT, 0);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode INT() {
            return getToken(SqlBaseParser.INT, 0);
        }

        public TerminalNode INTEGER() {
            return getToken(SqlBaseParser.INTEGER, 0);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public TerminalNode IS() {
            return getToken(SqlBaseParser.IS, 0);
        }

        public TerminalNode ITEMS() {
            return getToken(SqlBaseParser.ITEMS, 0);
        }

        public TerminalNode KEYS() {
            return getToken(SqlBaseParser.KEYS, 0);
        }

        public TerminalNode LAST() {
            return getToken(SqlBaseParser.LAST, 0);
        }

        public TerminalNode LAZY() {
            return getToken(SqlBaseParser.LAZY, 0);
        }

        public TerminalNode LEADING() {
            return getToken(SqlBaseParser.LEADING, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public TerminalNode LONG() {
            return getToken(SqlBaseParser.LONG, 0);
        }

        public TerminalNode ILIKE() {
            return getToken(SqlBaseParser.ILIKE, 0);
        }

        public TerminalNode LIMIT() {
            return getToken(SqlBaseParser.LIMIT, 0);
        }

        public TerminalNode LINES() {
            return getToken(SqlBaseParser.LINES, 0);
        }

        public TerminalNode LIST() {
            return getToken(SqlBaseParser.LIST, 0);
        }

        public TerminalNode LOAD() {
            return getToken(SqlBaseParser.LOAD, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TerminalNode LOCATION() {
            return getToken(SqlBaseParser.LOCATION, 0);
        }

        public TerminalNode LOCK() {
            return getToken(SqlBaseParser.LOCK, 0);
        }

        public TerminalNode LOCKS() {
            return getToken(SqlBaseParser.LOCKS, 0);
        }

        public TerminalNode LOGICAL() {
            return getToken(SqlBaseParser.LOGICAL, 0);
        }

        public TerminalNode MACRO() {
            return getToken(SqlBaseParser.MACRO, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode MERGE() {
            return getToken(SqlBaseParser.MERGE, 0);
        }

        public TerminalNode MICROSECOND() {
            return getToken(SqlBaseParser.MICROSECOND, 0);
        }

        public TerminalNode MICROSECONDS() {
            return getToken(SqlBaseParser.MICROSECONDS, 0);
        }

        public TerminalNode MILLISECOND() {
            return getToken(SqlBaseParser.MILLISECOND, 0);
        }

        public TerminalNode MILLISECONDS() {
            return getToken(SqlBaseParser.MILLISECONDS, 0);
        }

        public TerminalNode MINUTE() {
            return getToken(SqlBaseParser.MINUTE, 0);
        }

        public TerminalNode MINUTES() {
            return getToken(SqlBaseParser.MINUTES, 0);
        }

        public TerminalNode MONTH() {
            return getToken(SqlBaseParser.MONTH, 0);
        }

        public TerminalNode MONTHS() {
            return getToken(SqlBaseParser.MONTHS, 0);
        }

        public TerminalNode MSCK() {
            return getToken(SqlBaseParser.MSCK, 0);
        }

        public TerminalNode NAME() {
            return getToken(SqlBaseParser.NAME, 0);
        }

        public TerminalNode NAMESPACE() {
            return getToken(SqlBaseParser.NAMESPACE, 0);
        }

        public TerminalNode NAMESPACES() {
            return getToken(SqlBaseParser.NAMESPACES, 0);
        }

        public TerminalNode NANOSECOND() {
            return getToken(SqlBaseParser.NANOSECOND, 0);
        }

        public TerminalNode NANOSECONDS() {
            return getToken(SqlBaseParser.NANOSECONDS, 0);
        }

        public TerminalNode NO() {
            return getToken(SqlBaseParser.NO, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode NUMERIC() {
            return getToken(SqlBaseParser.NUMERIC, 0);
        }

        public TerminalNode OF() {
            return getToken(SqlBaseParser.OF, 0);
        }

        public TerminalNode OFFSET() {
            return getToken(SqlBaseParser.OFFSET, 0);
        }

        public TerminalNode ONLY() {
            return getToken(SqlBaseParser.ONLY, 0);
        }

        public TerminalNode OPTION() {
            return getToken(SqlBaseParser.OPTION, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public TerminalNode OUT() {
            return getToken(SqlBaseParser.OUT, 0);
        }

        public TerminalNode OUTER() {
            return getToken(SqlBaseParser.OUTER, 0);
        }

        public TerminalNode OUTPUTFORMAT() {
            return getToken(SqlBaseParser.OUTPUTFORMAT, 0);
        }

        public TerminalNode OVER() {
            return getToken(SqlBaseParser.OVER, 0);
        }

        public TerminalNode OVERLAPS() {
            return getToken(SqlBaseParser.OVERLAPS, 0);
        }

        public TerminalNode OVERLAY() {
            return getToken(SqlBaseParser.OVERLAY, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode PARTITIONED() {
            return getToken(SqlBaseParser.PARTITIONED, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public TerminalNode PERCENTILE_CONT() {
            return getToken(SqlBaseParser.PERCENTILE_CONT, 0);
        }

        public TerminalNode PERCENTILE_DISC() {
            return getToken(SqlBaseParser.PERCENTILE_DISC, 0);
        }

        public TerminalNode PERCENTLIT() {
            return getToken(SqlBaseParser.PERCENTLIT, 0);
        }

        public TerminalNode PIVOT() {
            return getToken(SqlBaseParser.PIVOT, 0);
        }

        public TerminalNode PLACING() {
            return getToken(SqlBaseParser.PLACING, 0);
        }

        public TerminalNode POSITION() {
            return getToken(SqlBaseParser.POSITION, 0);
        }

        public TerminalNode PRECEDING() {
            return getToken(SqlBaseParser.PRECEDING, 0);
        }

        public TerminalNode PRIMARY() {
            return getToken(SqlBaseParser.PRIMARY, 0);
        }

        public TerminalNode PRINCIPALS() {
            return getToken(SqlBaseParser.PRINCIPALS, 0);
        }

        public TerminalNode PROPERTIES() {
            return getToken(SqlBaseParser.PROPERTIES, 0);
        }

        public TerminalNode PURGE() {
            return getToken(SqlBaseParser.PURGE, 0);
        }

        public TerminalNode QUARTER() {
            return getToken(SqlBaseParser.QUARTER, 0);
        }

        public TerminalNode QUERY() {
            return getToken(SqlBaseParser.QUERY, 0);
        }

        public TerminalNode RANGE() {
            return getToken(SqlBaseParser.RANGE, 0);
        }

        public TerminalNode REAL() {
            return getToken(SqlBaseParser.REAL, 0);
        }

        public TerminalNode RECORDREADER() {
            return getToken(SqlBaseParser.RECORDREADER, 0);
        }

        public TerminalNode RECORDWRITER() {
            return getToken(SqlBaseParser.RECORDWRITER, 0);
        }

        public TerminalNode RECOVER() {
            return getToken(SqlBaseParser.RECOVER, 0);
        }

        public TerminalNode REDUCE() {
            return getToken(SqlBaseParser.REDUCE, 0);
        }

        public TerminalNode REFERENCES() {
            return getToken(SqlBaseParser.REFERENCES, 0);
        }

        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode REPAIR() {
            return getToken(SqlBaseParser.REPAIR, 0);
        }

        public TerminalNode REPEATABLE() {
            return getToken(SqlBaseParser.REPEATABLE, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode RESET() {
            return getToken(SqlBaseParser.RESET, 0);
        }

        public TerminalNode RESPECT() {
            return getToken(SqlBaseParser.RESPECT, 0);
        }

        public TerminalNode RESTRICT() {
            return getToken(SqlBaseParser.RESTRICT, 0);
        }

        public TerminalNode REVOKE() {
            return getToken(SqlBaseParser.REVOKE, 0);
        }

        public TerminalNode RLIKE() {
            return getToken(SqlBaseParser.RLIKE, 0);
        }

        public TerminalNode ROLE() {
            return getToken(SqlBaseParser.ROLE, 0);
        }

        public TerminalNode ROLES() {
            return getToken(SqlBaseParser.ROLES, 0);
        }

        public TerminalNode ROLLBACK() {
            return getToken(SqlBaseParser.ROLLBACK, 0);
        }

        public TerminalNode ROLLUP() {
            return getToken(SqlBaseParser.ROLLUP, 0);
        }

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode ROWS() {
            return getToken(SqlBaseParser.ROWS, 0);
        }

        public TerminalNode SCHEMA() {
            return getToken(SqlBaseParser.SCHEMA, 0);
        }

        public TerminalNode SCHEMAS() {
            return getToken(SqlBaseParser.SCHEMAS, 0);
        }

        public TerminalNode SECOND() {
            return getToken(SqlBaseParser.SECOND, 0);
        }

        public TerminalNode SECONDS() {
            return getToken(SqlBaseParser.SECONDS, 0);
        }

        public TerminalNode SELECT() {
            return getToken(SqlBaseParser.SELECT, 0);
        }

        public TerminalNode SEPARATED() {
            return getToken(SqlBaseParser.SEPARATED, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public TerminalNode SESSION_USER() {
            return getToken(SqlBaseParser.SESSION_USER, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode SETS() {
            return getToken(SqlBaseParser.SETS, 0);
        }

        public TerminalNode SHORT() {
            return getToken(SqlBaseParser.SHORT, 0);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode SINGLE() {
            return getToken(SqlBaseParser.SINGLE, 0);
        }

        public TerminalNode SKEWED() {
            return getToken(SqlBaseParser.SKEWED, 0);
        }

        public TerminalNode SMALLINT() {
            return getToken(SqlBaseParser.SMALLINT, 0);
        }

        public TerminalNode SOME() {
            return getToken(SqlBaseParser.SOME, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        public TerminalNode SORTED() {
            return getToken(SqlBaseParser.SORTED, 0);
        }

        public TerminalNode SOURCE() {
            return getToken(SqlBaseParser.SOURCE, 0);
        }

        public TerminalNode START() {
            return getToken(SqlBaseParser.START, 0);
        }

        public TerminalNode STATISTICS() {
            return getToken(SqlBaseParser.STATISTICS, 0);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode STRATIFY() {
            return getToken(SqlBaseParser.STRATIFY, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode SUBSTR() {
            return getToken(SqlBaseParser.SUBSTR, 0);
        }

        public TerminalNode SUBSTRING() {
            return getToken(SqlBaseParser.SUBSTRING, 0);
        }

        public TerminalNode SYNC() {
            return getToken(SqlBaseParser.SYNC, 0);
        }

        public TerminalNode SYSTEM_TIME() {
            return getToken(SqlBaseParser.SYSTEM_TIME, 0);
        }

        public TerminalNode SYSTEM_VERSION() {
            return getToken(SqlBaseParser.SYSTEM_VERSION, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode TABLES() {
            return getToken(SqlBaseParser.TABLES, 0);
        }

        public TerminalNode TABLESAMPLE() {
            return getToken(SqlBaseParser.TABLESAMPLE, 0);
        }

        public TerminalNode TARGET() {
            return getToken(SqlBaseParser.TARGET, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode TERMINATED() {
            return getToken(SqlBaseParser.TERMINATED, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public TerminalNode TIME() {
            return getToken(SqlBaseParser.TIME, 0);
        }

        public TerminalNode TIMEDIFF() {
            return getToken(SqlBaseParser.TIMEDIFF, 0);
        }

        public TerminalNode TIMESTAMP() {
            return getToken(SqlBaseParser.TIMESTAMP, 0);
        }

        public TerminalNode TIMESTAMP_LTZ() {
            return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0);
        }

        public TerminalNode TIMESTAMP_NTZ() {
            return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0);
        }

        public TerminalNode TIMESTAMPADD() {
            return getToken(SqlBaseParser.TIMESTAMPADD, 0);
        }

        public TerminalNode TIMESTAMPDIFF() {
            return getToken(SqlBaseParser.TIMESTAMPDIFF, 0);
        }

        public TerminalNode TINYINT() {
            return getToken(SqlBaseParser.TINYINT, 0);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public TerminalNode TOUCH() {
            return getToken(SqlBaseParser.TOUCH, 0);
        }

        public TerminalNode TRAILING() {
            return getToken(SqlBaseParser.TRAILING, 0);
        }

        public TerminalNode TRANSACTION() {
            return getToken(SqlBaseParser.TRANSACTION, 0);
        }

        public TerminalNode TRANSACTIONS() {
            return getToken(SqlBaseParser.TRANSACTIONS, 0);
        }

        public TerminalNode TRANSFORM() {
            return getToken(SqlBaseParser.TRANSFORM, 0);
        }

        public TerminalNode TRIM() {
            return getToken(SqlBaseParser.TRIM, 0);
        }

        public TerminalNode TRUE() {
            return getToken(SqlBaseParser.TRUE, 0);
        }

        public TerminalNode TRUNCATE() {
            return getToken(SqlBaseParser.TRUNCATE, 0);
        }

        public TerminalNode TRY_CAST() {
            return getToken(SqlBaseParser.TRY_CAST, 0);
        }

        public TerminalNode TYPE() {
            return getToken(SqlBaseParser.TYPE, 0);
        }

        public TerminalNode UNARCHIVE() {
            return getToken(SqlBaseParser.UNARCHIVE, 0);
        }

        public TerminalNode UNBOUNDED() {
            return getToken(SqlBaseParser.UNBOUNDED, 0);
        }

        public TerminalNode UNCACHE() {
            return getToken(SqlBaseParser.UNCACHE, 0);
        }

        public TerminalNode UNIQUE() {
            return getToken(SqlBaseParser.UNIQUE, 0);
        }

        public TerminalNode UNKNOWN() {
            return getToken(SqlBaseParser.UNKNOWN, 0);
        }

        public TerminalNode UNLOCK() {
            return getToken(SqlBaseParser.UNLOCK, 0);
        }

        public TerminalNode UNPIVOT() {
            return getToken(SqlBaseParser.UNPIVOT, 0);
        }

        public TerminalNode UNSET() {
            return getToken(SqlBaseParser.UNSET, 0);
        }

        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public TerminalNode USE() {
            return getToken(SqlBaseParser.USE, 0);
        }

        public TerminalNode USER() {
            return getToken(SqlBaseParser.USER, 0);
        }

        public TerminalNode VALUES() {
            return getToken(SqlBaseParser.VALUES, 0);
        }

        public TerminalNode VARCHAR() {
            return getToken(SqlBaseParser.VARCHAR, 0);
        }

        public TerminalNode VAR() {
            return getToken(SqlBaseParser.VAR, 0);
        }

        public TerminalNode VARIABLE() {
            return getToken(SqlBaseParser.VARIABLE, 0);
        }

        public TerminalNode VARIANT() {
            return getToken(SqlBaseParser.VARIANT, 0);
        }

        public TerminalNode VERSION() {
            return getToken(SqlBaseParser.VERSION, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode VIEWS() {
            return getToken(SqlBaseParser.VIEWS, 0);
        }

        public TerminalNode VOID() {
            return getToken(SqlBaseParser.VOID, 0);
        }

        public TerminalNode WEEK() {
            return getToken(SqlBaseParser.WEEK, 0);
        }

        public TerminalNode WEEKS() {
            return getToken(SqlBaseParser.WEEKS, 0);
        }

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode WHERE() {
            return getToken(SqlBaseParser.WHERE, 0);
        }

        public TerminalNode WINDOW() {
            return getToken(SqlBaseParser.WINDOW, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode WITHIN() {
            return getToken(SqlBaseParser.WITHIN, 0);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public TerminalNode YEARS() {
            return getToken(SqlBaseParser.YEARS, 0);
        }

        public TerminalNode ZONE() {
            return getToken(SqlBaseParser.ZONE, 0);
        }

        public NonReservedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nonReserved;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNonReserved(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNonReserved(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNonReserved(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NonReservedContext nonReserved() throws RecognitionException {
        NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
        enterRule(_localctx, 394, RULE_nonReserved);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3905);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018427453952L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -2305843558969507841L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -39196033025L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -36028797018964997L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 9223372036854774767L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & 268435199L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
        switch (ruleIndex) {
            case 54:
                return queryTerm_sempred((QueryTermContext) _localctx, predIndex);
            case 138:
                return booleanExpression_sempred((BooleanExpressionContext) _localctx, predIndex);
            case 141:
                return valueExpression_sempred((ValueExpressionContext) _localctx, predIndex);
            case 143:
                return primaryExpression_sempred((PrimaryExpressionContext) _localctx, predIndex);
            case 186:
                return identifier_sempred((IdentifierContext) _localctx, predIndex);
            case 187:
                return strictIdentifier_sempred((StrictIdentifierContext) _localctx, predIndex);
            case 188:
                return quotedIdentifier_sempred((QuotedIdentifierContext) _localctx, predIndex);
            case 190:
                return number_sempred((NumberContext) _localctx, predIndex);
            case 192:
                return stringLit_sempred((StringLitContext) _localctx, predIndex);
        }
        return true;
    }

    private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
        switch (predIndex) {
            case 0:
                return precpred(_ctx, 3);
            case 1:
                return legacy_setops_precedence_enabled;
            case 2:
                return precpred(_ctx, 2);
            case 3:
                return !legacy_setops_precedence_enabled;
            case 4:
                return precpred(_ctx, 1);
            case 5:
                return !legacy_setops_precedence_enabled;
        }
        return true;
    }

    private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 6:
                return precpred(_ctx, 2);
            case 7:
                return precpred(_ctx, 1);
        }
        return true;
    }

    private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 8:
                return precpred(_ctx, 6);
            case 9:
                return precpred(_ctx, 5);
            case 10:
                return precpred(_ctx, 4);
            case 11:
                return precpred(_ctx, 3);
            case 12:
                return precpred(_ctx, 2);
            case 13:
                return precpred(_ctx, 1);
        }
        return true;
    }

    private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 14:
                return precpred(_ctx, 23);
            case 15:
                return precpred(_ctx, 22);
            case 16:
                return precpred(_ctx, 8);
            case 17:
                return precpred(_ctx, 6);
        }
        return true;
    }

    private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
        switch (predIndex) {
            case 18:
                return !SQL_standard_keyword_behavior;
        }
        return true;
    }

    private boolean strictIdentifier_sempred(StrictIdentifierContext _localctx, int predIndex) {
        switch (predIndex) {
            case 19:
                return SQL_standard_keyword_behavior;
            case 20:
                return !SQL_standard_keyword_behavior;
        }
        return true;
    }

    private boolean quotedIdentifier_sempred(QuotedIdentifierContext _localctx, int predIndex) {
        switch (predIndex) {
            case 21:
                return double_quoted_identifiers;
        }
        return true;
    }

    private boolean number_sempred(NumberContext _localctx, int predIndex) {
        switch (predIndex) {
            case 22:
                return !legacy_exponent_literal_as_decimal_enabled;
            case 23:
                return !legacy_exponent_literal_as_decimal_enabled;
            case 24:
                return legacy_exponent_literal_as_decimal_enabled;
        }
        return true;
    }

    private boolean stringLit_sempred(StringLitContext _localctx, int predIndex) {
        switch (predIndex) {
            case 25:
                return !double_quoted_identifiers;
        }
        return true;
    }

    private static final String _serializedATNSegment0 =
            "\u0004\u0001\u018b\u0f44\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001" +
                    "\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004" +
                    "\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007" +
                    "\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b" +
                    "\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007" +
                    "\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007" +
                    "\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007" +
                    "\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007" +
                    "\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007" +
                    "\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007" +
                    "\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007" +
                    "\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007" +
                    "\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007" +
                    ",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007" +
                    "1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007" +
                    "6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007" +
                    ";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007" +
                    "@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007" +
                    "E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007" +
                    "J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007" +
                    "O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007" +
                    "T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007" +
                    "Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007" +
                    "^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007" +
                    "c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007" +
                    "h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007" +
                    "m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007" +
                    "r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007" +
                    "w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007" +
                    "|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007" +
                    "\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007" +
                    "\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007" +
                    "\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007" +
                    "\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007" +
                    "\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007" +
                    "\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007" +
                    "\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007" +
                    "\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007" +
                    "\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007" +
                    "\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007" +
                    "\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007" +
                    "\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007" +
                    "\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007" +
                    "\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007" +
                    "\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007" +
                    "\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007" +
                    "\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007" +
                    "\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007" +
                    "\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007" +
                    "\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007" +
                    "\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007" +
                    "\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007" +
                    "\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007" +
                    "\u00c5\u0001\u0000\u0001\u0000\u0005\u0000\u018f\b\u0000\n\u0000\f\u0000" +
                    "\u0192\t\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001" +
                    "\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0001\u0003" +
                    "\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005" +
                    "\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0003\u0007\u01ab\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u01b8\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0003\u0007\u01bf\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u01c7\b\u0007" +
                    "\n\u0007\f\u0007\u01ca\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u01dd\b\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u01e1\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u01e7\b\u0007\u0001\u0007\u0003\u0007\u01ea\b\u0007\u0001\u0007" +
                    "\u0003\u0007\u01ed\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u01f4\b\u0007\u0001\u0007\u0003\u0007\u01f7\b" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01fb\b\u0007\u0001\u0007\u0003" +
                    "\u0007\u01fe\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0205\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005" +
                    "\u0007\u0210\b\u0007\n\u0007\f\u0007\u0213\t\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u021a\b\u0007\u0001\u0007" +
                    "\u0003\u0007\u021d\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0221\b" +
                    "\u0007\u0001\u0007\u0003\u0007\u0224\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u022a\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0235\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u023b\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u0240\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0262\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u026f" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u0288\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0291\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0295\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u029b\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u029f" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02a4\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02aa\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02b6\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0003\u0007\u02be\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0003\u0007\u02c4\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u02d1\b\u0007\u0001\u0007\u0004\u0007\u02d4\b" +
                    "\u0007\u000b\u0007\f\u0007\u02d5\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02e6" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u02eb\b\u0007" +
                    "\n\u0007\f\u0007\u02ee\t\u0007\u0001\u0007\u0003\u0007\u02f1\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02f7\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0306\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u030a" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0310" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0316" +
                    "\b\u0007\u0001\u0007\u0003\u0007\u0319\b\u0007\u0001\u0007\u0003\u0007" +
                    "\u031c\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u0322\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0326\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005" +
                    "\u0007\u032e\b\u0007\n\u0007\f\u0007\u0331\t\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0339\b\u0007" +
                    "\u0001\u0007\u0003\u0007\u033c\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0345\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u034a\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0350\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0357\b\u0007" +
                    "\u0001\u0007\u0003\u0007\u035a\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u0360\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u0369\b\u0007" +
                    "\n\u0007\f\u0007\u036c\t\u0007\u0003\u0007\u036e\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0372\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u0377\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u037d\b\u0007\u0001\u0007\u0003\u0007\u0380\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u0384\b\u0007\u0001\u0007\u0003\u0007\u0387\b" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u038e\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0393" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u039a\b\u0007\u0001\u0007\u0003\u0007\u039d\b\u0007\u0001\u0007" +
                    "\u0003\u0007\u03a0\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u03a7\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0003\u0007\u03ac\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03b5\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u03bd\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u03c3\b\u0007\u0001\u0007\u0003\u0007\u03c6\b\u0007\u0001\u0007\u0003" +
                    "\u0007\u03c9\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u03cf\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03d3\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03d8\b\u0007\u0001\u0007" +
                    "\u0003\u0007\u03db\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03df\b" +
                    "\u0007\u0003\u0007\u03e1\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03e9\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03f1" +
                    "\b\u0007\u0001\u0007\u0003\u0007\u03f4\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u03f9\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u03ff\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u0405\b\u0007\u0001\u0007\u0003\u0007\u0408\b" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u040c\b\u0007\u0001\u0007\u0003" +
                    "\u0007\u040f\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0413\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0005\u0007\u042d\b\u0007\n\u0007\f\u0007\u0430\t\u0007\u0003\u0007\u0432" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0436\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u043c\b\u0007\u0001\u0007" +
                    "\u0003\u0007\u043f\b\u0007\u0001\u0007\u0003\u0007\u0442\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0448\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u0450\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0455" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u045b" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0461" +
                    "\b\u0007\u0001\u0007\u0003\u0007\u0464\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u046b\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0005\u0007\u0470\b\u0007\n\u0007\f\u0007\u0473" +
                    "\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0005\u0007\u047b\b\u0007\n\u0007\f\u0007\u047e\t\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007" +
                    "\u048c\b\u0007\n\u0007\f\u0007\u048f\t\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0005\u0007\u04a7\b\u0007\n\u0007\f\u0007\u04aa\t\u0007" +
                    "\u0003\u0007\u04ac\b\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u04b0\b" +
                    "\u0007\n\u0007\f\u0007\u04b3\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0005\u0007\u04b9\b\u0007\n\u0007\f\u0007\u04bc\t\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u04c2\b\u0007\n" +
                    "\u0007\f\u0007\u04c5\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u04cc\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u04d1\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u04d6\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u04dd\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u04e3\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u04e8\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005" +
                    "\u0007\u04ee\b\u0007\n\u0007\f\u0007\u04f1\t\u0007\u0003\u0007\u04f3\b" +
                    "\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\b\u04fa\b\b\u0001" +
                    "\b\u0003\b\u04fd\b\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001" +
                    "\t\u0003\t\u0506\b\t\u0001\n\u0001\n\u0003\n\u050a\b\n\u0001\u000b\u0001" +
                    "\u000b\u0003\u000b\u050e\b\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0512" +
                    "\b\u000b\u0001\f\u0001\f\u0001\f\u0005\f\u0517\b\f\n\f\f\f\u051a\t\f\u0001" +
                    "\r\u0001\r\u0003\r\u051e\b\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001" +
                    "\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0003\u0010\u052a\b\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u052e" +
                    "\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003" +
                    "\u0010\u0535\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0003\u0010\u05a9\b\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u05b1\b\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003" +
                    "\u0010\u05b9\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u05c2\b\u0010\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001" +
                    "\u0010\u0003\u0010\u05cc\b\u0010\u0001\u0011\u0001\u0011\u0003\u0011\u05d0" +
                    "\b\u0011\u0001\u0011\u0003\u0011\u05d3\b\u0011\u0001\u0011\u0001\u0011" +
                    "\u0001\u0011\u0001\u0011\u0003\u0011\u05d9\b\u0011\u0001\u0011\u0001\u0011" +
                    "\u0001\u0012\u0001\u0012\u0003\u0012\u05df\b\u0012\u0001\u0012\u0001\u0012" +
                    "\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013" +
                    "\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014" +
                    "\u0001\u0014\u0001\u0014\u0003\u0014\u05f1\b\u0014\u0001\u0014\u0001\u0014" +
                    "\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015" +
                    "\u0001\u0015\u0001\u0015\u0003\u0015\u05fd\b\u0015\u0001\u0015\u0001\u0015" +
                    "\u0001\u0015\u0003\u0015\u0602\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016" +
                    "\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0003\u0018\u060b\b\u0018" +
                    "\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019" +
                    "\u0003\u0019\u0613\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019" +
                    "\u0001\u0019\u0003\u0019\u061a\b\u0019\u0003\u0019\u061c\b\u0019\u0001" +
                    "\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0621\b\u0019\u0001\u0019\u0001" +
                    "\u0019\u0001\u0019\u0003\u0019\u0626\b\u0019\u0001\u0019\u0001\u0019\u0003" +
                    "\u0019\u062a\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u062f" +
                    "\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0634\b\u0019" +
                    "\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0639\b\u0019\u0001\u0019" +
                    "\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019" +
                    "\u0003\u0019\u0642\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019" +
                    "\u0647\b\u0019\u0001\u0019\u0003\u0019\u064a\b\u0019\u0001\u0019\u0001" +
                    "\u0019\u0001\u0019\u0003\u0019\u064f\b\u0019\u0001\u0019\u0001\u0019\u0003" +
                    "\u0019\u0653\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0658" +
                    "\b\u0019\u0003\u0019\u065a\b\u0019\u0001\u001a\u0001\u001a\u0003\u001a" +
                    "\u065e\b\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b" +
                    "\u0005\u001b\u0665\b\u001b\n\u001b\f\u001b\u0668\t\u001b\u0001\u001b\u0001" +
                    "\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u066f\b\u001c\u0001" +
                    "\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0675\b\u001c\u0001" +
                    "\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f\u0001" +
                    "\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u0681\b\u001f\u0001" +
                    " \u0001 \u0001 \u0005 \u0686\b \n \f \u0689\t \u0001!\u0001!\u0001!\u0001" +
                    "!\u0005!\u068f\b!\n!\f!\u0692\t!\u0001\"\u0001\"\u0003\"\u0696\b\"\u0001" +
                    "\"\u0003\"\u0699\b\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001#\u0001#\u0001" +
                    "#\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001" +
                    "$\u0001$\u0001$\u0001$\u0001$\u0005$\u06b0\b$\n$\f$\u06b3\t$\u0001%\u0001" +
                    "%\u0001%\u0001%\u0005%\u06b9\b%\n%\f%\u06bc\t%\u0001%\u0001%\u0001&\u0001" +
                    "&\u0003&\u06c2\b&\u0001&\u0003&\u06c5\b&\u0001\'\u0001\'\u0001\'\u0005" +
                    "\'\u06ca\b\'\n\'\f\'\u06cd\t\'\u0001\'\u0003\'\u06d0\b\'\u0001(\u0001" +
                    "(\u0001(\u0001(\u0003(\u06d6\b(\u0001)\u0001)\u0001)\u0001)\u0005)\u06dc" +
                    "\b)\n)\f)\u06df\t)\u0001)\u0001)\u0001*\u0001*\u0003*\u06e5\b*\u0001*" +
                    "\u0003*\u06e8\b*\u0001+\u0001+\u0001+\u0001+\u0005+\u06ee\b+\n+\f+\u06f1" +
                    "\t+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0005,\u06f9\b,\n,\f,\u06fc" +
                    "\t,\u0001,\u0001,\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0003-\u0706" +
                    "\b-\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003.\u070e\b.\u0001/\u0001" +
                    "/\u0001/\u0001/\u0003/\u0714\b/\u00010\u00010\u00010\u00011\u00011\u0001" +
                    "1\u00011\u00011\u00041\u071e\b1\u000b1\f1\u071f\u00011\u00011\u00011\u0001" +
                    "1\u00011\u00031\u0727\b1\u00011\u00011\u00011\u00011\u00011\u00011\u0001" +
                    "1\u00031\u0730\b1\u00031\u0732\b1\u00011\u00011\u00011\u00011\u00031\u0738" +
                    "\b1\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u0003" +
                    "1\u0743\b1\u00011\u00011\u00011\u00011\u00051\u0749\b1\n1\f1\u074c\t1" +
                    "\u00011\u00051\u074f\b1\n1\f1\u0752\t1\u00011\u00051\u0755\b1\n1\f1\u0758" +
                    "\t1\u00031\u075a\b1\u00012\u00012\u00012\u00012\u00012\u00012\u00032\u0762" +
                    "\b2\u00013\u00013\u00013\u00013\u00014\u00014\u00014\u00014\u00014\u0005" +
                    "4\u076d\b4\n4\f4\u0770\t4\u00034\u0772\b4\u00014\u00014\u00014\u00014" +
                    "\u00014\u00054\u0779\b4\n4\f4\u077c\t4\u00034\u077e\b4\u00014\u00014\u0001" +
                    "4\u00014\u00014\u00054\u0785\b4\n4\f4\u0788\t4\u00034\u078a\b4\u00014" +
                    "\u00014\u00014\u00014\u00014\u00054\u0791\b4\n4\f4\u0794\t4\u00034\u0796" +
                    "\b4\u00014\u00034\u0799\b4\u00014\u00014\u00014\u00014\u00034\u079f\b" +
                    "4\u00034\u07a1\b4\u00014\u00014\u00034\u07a5\b4\u00015\u00015\u00015\u0001" +
                    "6\u00016\u00016\u00016\u00016\u00016\u00016\u00036\u07b1\b6\u00016\u0001" +
                    "6\u00016\u00016\u00016\u00036\u07b8\b6\u00016\u00016\u00016\u00016\u0001" +
                    "6\u00036\u07bf\b6\u00016\u00056\u07c2\b6\n6\f6\u07c5\t6\u00017\u00017" +
                    "\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00037\u07d0\b7\u0001" +
                    "8\u00018\u00038\u07d4\b8\u00018\u00018\u00038\u07d8\b8\u00019\u00019\u0004" +
                    "9\u07dc\b9\u000b9\f9\u07dd\u0001:\u0001:\u0003:\u07e2\b:\u0001:\u0001" +
                    ":\u0001:\u0001:\u0005:\u07e8\b:\n:\f:\u07eb\t:\u0001:\u0003:\u07ee\b:" +
                    "\u0001:\u0003:\u07f1\b:\u0001:\u0003:\u07f4\b:\u0001:\u0003:\u07f7\b:" +
                    "\u0001:\u0001:\u0003:\u07fb\b:\u0001;\u0001;\u0003;\u07ff\b;\u0001;\u0005" +
                    ";\u0802\b;\n;\f;\u0805\t;\u0001;\u0003;\u0808\b;\u0001;\u0003;\u080b\b" +
                    ";\u0001;\u0003;\u080e\b;\u0001;\u0003;\u0811\b;\u0001;\u0001;\u0003;\u0815" +
                    "\b;\u0001;\u0005;\u0818\b;\n;\f;\u081b\t;\u0001;\u0003;\u081e\b;\u0001" +
                    ";\u0003;\u0821\b;\u0001;\u0003;\u0824\b;\u0001;\u0003;\u0827\b;\u0003" +
                    ";\u0829\b;\u0001<\u0001<\u0001<\u0001<\u0003<\u082f\b<\u0001<\u0001<\u0001" +
                    "<\u0001<\u0001<\u0003<\u0836\b<\u0001<\u0001<\u0001<\u0003<\u083b\b<\u0001" +
                    "<\u0003<\u083e\b<\u0001<\u0003<\u0841\b<\u0001<\u0001<\u0003<\u0845\b" +
                    "<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0003<\u084f" +
                    "\b<\u0001<\u0001<\u0003<\u0853\b<\u0003<\u0855\b<\u0001<\u0003<\u0858" +
                    "\b<\u0001<\u0001<\u0003<\u085c\b<\u0001=\u0001=\u0005=\u0860\b=\n=\f=" +
                    "\u0863\t=\u0001=\u0003=\u0866\b=\u0001=\u0001=\u0001>\u0001>\u0001>\u0001" +
                    "?\u0001?\u0001?\u0001?\u0003?\u0871\b?\u0001?\u0001?\u0001?\u0001@\u0001" +
                    "@\u0001@\u0001@\u0001@\u0003@\u087b\b@\u0001@\u0001@\u0003@\u087f\b@\u0001" +
                    "@\u0001@\u0001@\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0003" +
                    "A\u088b\bA\u0001A\u0001A\u0001A\u0001B\u0001B\u0001B\u0001B\u0001B\u0001" +
                    "B\u0001B\u0003B\u0897\bB\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001" +
                    "C\u0001C\u0001C\u0001C\u0001C\u0005C\u08a4\bC\nC\fC\u08a7\tC\u0001C\u0001" +
                    "C\u0003C\u08ab\bC\u0001D\u0001D\u0001D\u0001D\u0003D\u08b1\bD\u0001E\u0001" +
                    "E\u0001E\u0001E\u0001E\u0001F\u0001F\u0001F\u0005F\u08bb\bF\nF\fF\u08be" +
                    "\tF\u0001G\u0001G\u0001G\u0001G\u0001H\u0001H\u0001H\u0001I\u0001I\u0001" +
                    "I\u0001J\u0001J\u0001J\u0003J\u08cd\bJ\u0001J\u0005J\u08d0\bJ\nJ\fJ\u08d3" +
                    "\tJ\u0001J\u0001J\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0005K\u08dd" +
                    "\bK\nK\fK\u08e0\tK\u0001K\u0001K\u0003K\u08e4\bK\u0001L\u0001L\u0001L" +
                    "\u0001L\u0005L\u08ea\bL\nL\fL\u08ed\tL\u0001L\u0005L\u08f0\bL\nL\fL\u08f3" +
                    "\tL\u0001L\u0003L\u08f6\bL\u0001L\u0003L\u08f9\bL\u0001M\u0003M\u08fc" +
                    "\bM\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0903\bM\u0001M\u0001M\u0001" +
                    "M\u0001M\u0003M\u0909\bM\u0001N\u0001N\u0001N\u0001N\u0001N\u0005N\u0910" +
                    "\bN\nN\fN\u0913\tN\u0001N\u0001N\u0001N\u0001N\u0001N\u0005N\u091a\bN" +
                    "\nN\fN\u091d\tN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001N\u0001" +
                    "N\u0001N\u0001N\u0005N\u0929\bN\nN\fN\u092c\tN\u0001N\u0001N\u0003N\u0930" +
                    "\bN\u0003N\u0932\bN\u0001O\u0001O\u0003O\u0936\bO\u0001P\u0001P\u0001" +
                    "P\u0001P\u0001P\u0005P\u093d\bP\nP\fP\u0940\tP\u0001P\u0001P\u0001P\u0001" +
                    "P\u0001P\u0001P\u0001P\u0001P\u0005P\u094a\bP\nP\fP\u094d\tP\u0001P\u0001" +
                    "P\u0003P\u0951\bP\u0001Q\u0001Q\u0003Q\u0955\bQ\u0001R\u0001R\u0001R\u0001" +
                    "R\u0005R\u095b\bR\nR\fR\u095e\tR\u0003R\u0960\bR\u0001R\u0001R\u0003R" +
                    "\u0964\bR\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001" +
                    "S\u0001S\u0005S\u0970\bS\nS\fS\u0973\tS\u0001S\u0001S\u0001S\u0001T\u0001" +
                    "T\u0001T\u0001T\u0001T\u0005T\u097d\bT\nT\fT\u0980\tT\u0001T\u0001T\u0003" +
                    "T\u0984\bT\u0001U\u0001U\u0003U\u0988\bU\u0001U\u0003U\u098b\bU\u0001" +
                    "V\u0001V\u0003V\u098f\bV\u0001V\u0001V\u0001V\u0001V\u0003V\u0995\bV\u0001" +
                    "V\u0003V\u0998\bV\u0001W\u0001W\u0001W\u0001X\u0001X\u0003X\u099f\bX\u0001" +
                    "Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0005Y\u09a9\bY\nY" +
                    "\fY\u09ac\tY\u0001Y\u0001Y\u0001Z\u0001Z\u0001Z\u0001Z\u0005Z\u09b4\b" +
                    "Z\nZ\fZ\u09b7\tZ\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001" +
                    "Z\u0005Z\u09c1\bZ\nZ\fZ\u09c4\tZ\u0001Z\u0001Z\u0001[\u0001[\u0001[\u0001" +
                    "[\u0005[\u09cc\b[\n[\f[\u09cf\t[\u0001[\u0001[\u0003[\u09d3\b[\u0001\\" +
                    "\u0001\\\u0001]\u0001]\u0001^\u0001^\u0003^\u09db\b^\u0001_\u0001_\u0001" +
                    "`\u0003`\u09e0\b`\u0001`\u0001`\u0001a\u0001a\u0001a\u0003a\u09e7\ba\u0001" +
                    "a\u0001a\u0001a\u0001a\u0001a\u0005a\u09ee\ba\na\fa\u09f1\ta\u0003a\u09f3" +
                    "\ba\u0001a\u0001a\u0001a\u0003a\u09f8\ba\u0001a\u0001a\u0001a\u0005a\u09fd" +
                    "\ba\na\fa\u0a00\ta\u0003a\u0a02\ba\u0001b\u0001b\u0001c\u0003c\u0a07\b" +
                    "c\u0001c\u0001c\u0005c\u0a0b\bc\nc\fc\u0a0e\tc\u0001d\u0001d\u0001d\u0003" +
                    "d\u0a13\bd\u0001e\u0001e\u0001e\u0003e\u0a18\be\u0001e\u0001e\u0003e\u0a1c" +
                    "\be\u0001e\u0001e\u0001e\u0001e\u0003e\u0a22\be\u0001e\u0001e\u0003e\u0a26" +
                    "\be\u0001f\u0003f\u0a29\bf\u0001f\u0001f\u0001f\u0003f\u0a2e\bf\u0001" +
                    "f\u0003f\u0a31\bf\u0001f\u0001f\u0001f\u0003f\u0a36\bf\u0001f\u0001f\u0003" +
                    "f\u0a3a\bf\u0001f\u0003f\u0a3d\bf\u0001f\u0003f\u0a40\bf\u0001g\u0001" +
                    "g\u0001g\u0001g\u0003g\u0a46\bg\u0001h\u0001h\u0001h\u0003h\u0a4b\bh\u0001" +
                    "h\u0001h\u0001h\u0001h\u0001h\u0003h\u0a52\bh\u0001i\u0003i\u0a55\bi\u0001" +
                    "i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001" +
                    "i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0a67\bi\u0003i\u0a69\bi\u0001" +
                    "i\u0003i\u0a6c\bi\u0001j\u0001j\u0001j\u0001j\u0001k\u0001k\u0001k\u0005" +
                    "k\u0a75\bk\nk\fk\u0a78\tk\u0001l\u0001l\u0001l\u0001l\u0005l\u0a7e\bl" +
                    "\nl\fl\u0a81\tl\u0001l\u0001l\u0001m\u0001m\u0003m\u0a87\bm\u0001n\u0001" +
                    "n\u0001n\u0001n\u0005n\u0a8d\bn\nn\fn\u0a90\tn\u0001n\u0001n\u0001o\u0001" +
                    "o\u0003o\u0a96\bo\u0001p\u0001p\u0003p\u0a9a\bp\u0001p\u0003p\u0a9d\b" +
                    "p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0003p\u0aa5\bp\u0001p\u0001" +
                    "p\u0001p\u0001p\u0001p\u0001p\u0003p\u0aad\bp\u0001p\u0001p\u0001p\u0001" +
                    "p\u0003p\u0ab3\bp\u0001q\u0001q\u0001q\u0001q\u0005q\u0ab9\bq\nq\fq\u0abc" +
                    "\tq\u0001q\u0001q\u0001r\u0001r\u0001r\u0003r\u0ac3\br\u0001r\u0001r\u0001" +
                    "r\u0001r\u0001r\u0003r\u0aca\br\u0001r\u0001r\u0001r\u0001r\u0001r\u0003" +
                    "r\u0ad1\br\u0003r\u0ad3\br\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001" +
                    "s\u0001s\u0001s\u0005s\u0ade\bs\ns\fs\u0ae1\ts\u0001s\u0001s\u0001s\u0003" +
                    "s\u0ae6\bs\u0003s\u0ae8\bs\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0005" +
                    "s\u0af0\bs\ns\fs\u0af3\ts\u0001s\u0001s\u0001s\u0003s\u0af8\bs\u0003s" +
                    "\u0afa\bs\u0001t\u0001t\u0001t\u0001t\u0001u\u0001u\u0003u\u0b02\bu\u0001" +
                    "v\u0001v\u0003v\u0b06\bv\u0001w\u0001w\u0001w\u0001w\u0001w\u0005w\u0b0d" +
                    "\bw\nw\fw\u0b10\tw\u0003w\u0b12\bw\u0001w\u0001w\u0001w\u0001x\u0003x" +
                    "\u0b18\bx\u0001x\u0001x\u0003x\u0b1c\bx\u0003x\u0b1e\bx\u0001y\u0001y" +
                    "\u0001y\u0001y\u0001y\u0001y\u0001y\u0003y\u0b27\by\u0001y\u0001y\u0001" +
                    "y\u0001y\u0001y\u0001y\u0001y\u0001y\u0001y\u0001y\u0003y\u0b33\by\u0003" +
                    "y\u0b35\by\u0001y\u0001y\u0001y\u0001y\u0001y\u0003y\u0b3c\by\u0001y\u0001" +
                    "y\u0001y\u0001y\u0001y\u0003y\u0b43\by\u0001y\u0001y\u0001y\u0001y\u0003" +
                    "y\u0b49\by\u0001y\u0001y\u0001y\u0001y\u0003y\u0b4f\by\u0003y\u0b51\b" +
                    "y\u0001z\u0001z\u0001z\u0005z\u0b56\bz\nz\fz\u0b59\tz\u0001{\u0001{\u0001" +
                    "{\u0005{\u0b5e\b{\n{\f{\u0b61\t{\u0001|\u0001|\u0001|\u0005|\u0b66\b|" +
                    "\n|\f|\u0b69\t|\u0001}\u0001}\u0001}\u0003}\u0b6e\b}\u0001~\u0001~\u0001" +
                    "~\u0003~\u0b73\b~\u0001~\u0001~\u0001\u007f\u0001\u007f\u0001\u007f\u0003" +
                    "\u007f\u0b7a\b\u007f\u0001\u007f\u0001\u007f\u0001\u0080\u0001\u0080\u0003" +
                    "\u0080\u0b80\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0b84\b\u0080" +
                    "\u0003\u0080\u0b86\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0005\u0081" +
                    "\u0b8b\b\u0081\n\u0081\f\u0081\u0b8e\t\u0081\u0001\u0082\u0001\u0082\u0001" +
                    "\u0082\u0001\u0082\u0005\u0082\u0b94\b\u0082\n\u0082\f\u0082\u0b97\t\u0082" +
                    "\u0001\u0082\u0001\u0082\u0001\u0083\u0001\u0083\u0003\u0083\u0b9d\b\u0083" +
                    "\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084" +
                    "\u0005\u0084\u0ba5\b\u0084\n\u0084\f\u0084\u0ba8\t\u0084\u0001\u0084\u0001" +
                    "\u0084\u0003\u0084\u0bac\b\u0084\u0001\u0085\u0001\u0085\u0003\u0085\u0bb0" +
                    "\b\u0085\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001" +
                    "\u0087\u0001\u0088\u0001\u0088\u0003\u0088\u0bba\b\u0088\u0001\u0089\u0001" +
                    "\u0089\u0001\u0089\u0005\u0089\u0bbf\b\u0089\n\u0089\f\u0089\u0bc2\t\u0089" +
                    "\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a" +
                    "\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u0bce\b\u008a" +
                    "\u0003\u008a\u0bd0\b\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a" +
                    "\u0001\u008a\u0001\u008a\u0005\u008a\u0bd8\b\u008a\n\u008a\f\u008a\u0bdb" +
                    "\t\u008a\u0001\u008b\u0001\u008b\u0001\u008c\u0003\u008c\u0be0\b\u008c" +
                    "\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c" +
                    "\u0003\u008c\u0be8\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c" +
                    "\u0001\u008c\u0005\u008c\u0bef\b\u008c\n\u008c\f\u008c\u0bf2\t\u008c\u0001" +
                    "\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0bf7\b\u008c\u0001\u008c\u0001" +
                    "\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0bff" +
                    "\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0c04\b\u008c" +
                    "\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c" +
                    "\u0001\u008c\u0001\u008c\u0005\u008c\u0c0e\b\u008c\n\u008c\f\u008c\u0c11" +
                    "\t\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0c15\b\u008c\u0001\u008c" +
                    "\u0003\u008c\u0c18\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c" +
                    "\u0003\u008c\u0c1e\b\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0c22\b" +
                    "\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0c27\b\u008c\u0001" +
                    "\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0c2c\b\u008c\u0001\u008c\u0001" +
                    "\u008c\u0001\u008c\u0003\u008c\u0c31\b\u008c\u0001\u008d\u0001\u008d\u0001" +
                    "\u008d\u0001\u008d\u0003\u008d\u0c37\b\u008d\u0001\u008d\u0001\u008d\u0001" +
                    "\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001" +
                    "\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001" +
                    "\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0005\u008d\u0c4c" +
                    "\b\u008d\n\u008d\f\u008d\u0c4f\t\u008d\u0001\u008e\u0001\u008e\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008f" +
                    "\u0c59\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008f" +
                    "\u0c65\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0004\u008f\u0c6f\b\u008f\u000b\u008f" +
                    "\f\u008f\u0c70\u0001\u008f\u0001\u008f\u0003\u008f\u0c75\b\u008f\u0001" +
                    "\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0004\u008f\u0c7c" +
                    "\b\u008f\u000b\u008f\f\u008f\u0c7d\u0001\u008f\u0001\u008f\u0003\u008f" +
                    "\u0c82\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0005\u008f\u0c92\b\u008f\n\u008f" +
                    "\f\u008f\u0c95\t\u008f\u0003\u008f\u0c97\b\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0c9f\b\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0003\u008f\u0ca8\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0cb1\b\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0003\u008f\u0cbf\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0003\u008f\u0cc5\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0004\u008f\u0ccb\b\u008f\u000b\u008f\f\u008f\u0ccc\u0001\u008f\u0001" +
                    "\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001" +
                    "\u008f\u0001\u008f\u0003\u008f\u0cd8\b\u008f\u0001\u008f\u0001\u008f\u0001" +
                    "\u008f\u0005\u008f\u0cdd\b\u008f\n\u008f\f\u008f\u0ce0\t\u008f\u0003\u008f" +
                    "\u0ce2\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0005\u008f\u0ced\b\u008f" +
                    "\n\u008f\f\u008f\u0cf0\t\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0cf4" +
                    "\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001" +
                    "\u008f\u0003\u008f\u0cfc\b\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0d00" +
                    "\b\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0d04\b\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0004\u008f\u0d0e\b\u008f\u000b\u008f\f\u008f\u0d0f\u0001" +
                    "\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001" +
                    "\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001" +
                    "\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001" +
                    "\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0d29" +
                    "\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003" +
                    "\u008f\u0d30\b\u008f\u0001\u008f\u0003\u008f\u0d33\b\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f" +
                    "\u0003\u008f\u0d42\b\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0d46\b" +
                    "\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001" +
                    "\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001" +
                    "\u008f\u0001\u008f\u0005\u008f\u0d55\b\u008f\n\u008f\f\u008f\u0d58\t\u008f" +
                    "\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090" +
                    "\u0001\u0090\u0003\u0090\u0d61\b\u0090\u0001\u0091\u0001\u0091\u0001\u0091" +
                    "\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091" +
                    "\u0001\u0091\u0001\u0091\u0004\u0091\u0d6e\b\u0091\u000b\u0091\f\u0091" +
                    "\u0d6f\u0003\u0091\u0d72\b\u0091\u0001\u0092\u0001\u0092\u0001\u0093\u0001" +
                    "\u0093\u0001\u0094\u0001\u0094\u0001\u0095\u0001\u0095\u0001\u0096\u0001" +
                    "\u0096\u0001\u0096\u0003\u0096\u0d7f\b\u0096\u0001\u0097\u0001\u0097\u0003" +
                    "\u0097\u0d83\b\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0004\u0098\u0d88" +
                    "\b\u0098\u000b\u0098\f\u0098\u0d89\u0001\u0099\u0001\u0099\u0001\u0099" +
                    "\u0003\u0099\u0d8f\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009a" +
                    "\u0001\u009a\u0001\u009b\u0003\u009b\u0d97\b\u009b\u0001\u009b\u0001\u009b" +
                    "\u0001\u009b\u0003\u009b\u0d9c\b\u009b\u0001\u009c\u0001\u009c\u0001\u009d" +
                    "\u0001\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u0da5\b\u009e" +
                    "\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0" +
                    "\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0" +
                    "\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0" +
                    "\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u0dbc\b\u00a0\u0001\u00a0" +
                    "\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0" +
                    "\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0" +
                    "\u0001\u00a0\u0003\u00a0\u0dcc\b\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1" +
                    "\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1" +
                    "\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1" +
                    "\u0003\u00a1\u0ddd\b\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0de1\b" +
                    "\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0de7" +
                    "\b\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0ded" +
                    "\b\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0005" +
                    "\u00a1\u0df4\b\u00a1\n\u00a1\f\u00a1\u0df7\t\u00a1\u0001\u00a1\u0003\u00a1" +
                    "\u0dfa\b\u00a1\u0003\u00a1\u0dfc\b\u00a1\u0001\u00a2\u0001\u00a2\u0001" +
                    "\u00a2\u0005\u00a2\u0e01\b\u00a2\n\u00a2\f\u00a2\u0e04\t\u00a2\u0001\u00a3" +
                    "\u0001\u00a3\u0001\u00a3\u0005\u00a3\u0e09\b\u00a3\n\u00a3\f\u00a3\u0e0c" +
                    "\t\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0003" +
                    "\u00a4\u0e13\b\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001" +
                    "\u00a6\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0005\u00a7\u0e1e" +
                    "\b\u00a7\n\u00a7\f\u00a7\u0e21\t\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8" +
                    "\u0001\u00a8\u0003\u00a8\u0e27\b\u00a8\u0001\u00a8\u0003\u00a8\u0e2a\b" +
                    "\u00a8\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0005\u00a9\u0e2f\b\u00a9\n" +
                    "\u00a9\f\u00a9\u0e32\t\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0005" +
                    "\u00aa\u0e37\b\u00aa\n\u00aa\f\u00aa\u0e3a\t\u00aa\u0001\u00ab\u0001\u00ab" +
                    "\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0e41\b\u00ab\u0001\u00ac" +
                    "\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac" +
                    "\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0005\u00ad\u0e4d\b\u00ad\n\u00ad" +
                    "\f\u00ad\u0e50\t\u00ad\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0e54\b\u00ae" +
                    "\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0e59\b\u00ae\u0001\u00ae" +
                    "\u0003\u00ae\u0e5c\b\u00ae\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af" +
                    "\u0001\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0005\u00b0" +
                    "\u0e67\b\u00b0\n\u00b0\f\u00b0\u0e6a\t\u00b0\u0001\u00b1\u0001\u00b1\u0001" +
                    "\u00b1\u0001\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001" +
                    "\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001" +
                    "\u00b2\u0005\u00b2\u0e7b\b\u00b2\n\u00b2\f\u00b2\u0e7e\t\u00b2\u0001\u00b2" +
                    "\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0005\u00b2\u0e85\b\u00b2" +
                    "\n\u00b2\f\u00b2\u0e88\t\u00b2\u0003\u00b2\u0e8a\b\u00b2\u0001\u00b2\u0001" +
                    "\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0005\u00b2\u0e91\b\u00b2\n" +
                    "\u00b2\f\u00b2\u0e94\t\u00b2\u0003\u00b2\u0e96\b\u00b2\u0003\u00b2\u0e98" +
                    "\b\u00b2\u0001\u00b2\u0003\u00b2\u0e9b\b\u00b2\u0001\u00b2\u0003\u00b2" +
                    "\u0e9e\b\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3" +
                    "\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3" +
                    "\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0003\u00b3" +
                    "\u0eb0\b\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4" +
                    "\u0001\u00b4\u0001\u00b4\u0003\u00b4\u0eb9\b\u00b4\u0001\u00b5\u0001\u00b5" +
                    "\u0001\u00b5\u0005\u00b5\u0ebe\b\u00b5\n\u00b5\f\u00b5\u0ec1\t\u00b5\u0001" +
                    "\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001" +
                    "\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003\u00b6\u0ecd\b\u00b6\u0001" +
                    "\u00b7\u0001\u00b7\u0001\u00b7\u0005\u00b7\u0ed2\b\u00b7\n\u00b7\f\u00b7" +
                    "\u0ed5\t\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b9\u0001\u00b9" +
                    "\u0004\u00b9\u0edc\b\u00b9\u000b\u00b9\f\u00b9\u0edd\u0001\u00b9\u0003" +
                    "\u00b9\u0ee1\b\u00b9\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0003\u00ba\u0ee6" +
                    "\b\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001" +
                    "\u00bb\u0003\u00bb\u0eee\b\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0003" +
                    "\u00bc\u0ef3\b\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00be\u0001\u00be\u0003" +
                    "\u00be\u0ef9\b\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0efe" +
                    "\b\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0f03\b\u00be" +
                    "\u0001\u00be\u0001\u00be\u0003\u00be\u0f07\b\u00be\u0001\u00be\u0001\u00be" +
                    "\u0003\u00be\u0f0b\b\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0f0f\b" +
                    "\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0f13\b\u00be\u0001\u00be\u0001" +
                    "\u00be\u0003\u00be\u0f17\b\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0f1b" +
                    "\b\u00be\u0001\u00be\u0001\u00be\u0003\u00be\u0f1f\b\u00be\u0001\u00be" +
                    "\u0003\u00be\u0f22\b\u00be\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf" +
                    "\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf" +
                    "\u0001\u00bf\u0003\u00bf\u0f2f\b\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0" +
                    "\u0003\u00c0\u0f34\b\u00c0\u0001\u00c1\u0001\u00c1\u0003\u00c1\u0f38\b" +
                    "\u00c1\u0001\u00c2\u0001\u00c2\u0003\u00c2\u0f3c\b\u00c2\u0001\u00c3\u0001" +
                    "\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\t\u042e" +
                    "\u0471\u047c\u048d\u04a8\u04b1\u04ba\u04c3\u04ef\u0004l\u0114\u011a\u011e" +
                    "\u00c6\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018" +
                    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080" +
                    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098" +
                    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0" +
                    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8" +
                    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0" +
                    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8" +
                    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110" +
                    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128" +
                    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140" +
                    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158" +
                    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170" +
                    "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188" +
                    "\u018a\u0000=\u0002\u0000PP\u00e3\u00e3\u0002\u0000##\u00f5\u00f5\u0002" +
                    "\u0000||\u008e\u008e\u0001\u000034\u0002\u0000\u0120\u0120\u014f\u014f" +
                    "\u0002\u0000\f\f((\u0005\u0000//<<mm{{\u00ae\u00ae\u0001\u0000XY\u0002" +
                    "\u0000mm{{\u0003\u0000\t\taa\u011d\u011d\u0002\u0000\t\t\u00a8\u00a8\u0001" +
                    "\u0000\u014b\u014c\u0003\u0000JJ\u00be\u00be\u0101\u0101\u0003\u0000K" +
                    "K\u00bf\u00bf\u0102\u0102\u0004\u0000gg\u0096\u0096\u010a\u010a\u013f" +
                    "\u013f\u0003\u0000gg\u010a\u010a\u013f\u013f\u0002\u0000\u0016\u0016X" +
                    "X\u0002\u0000uu\u009f\u009f\u0002\u0000\u011f\u011f\u014e\u014e\u0002" +
                    "\u0000\u011e\u011e\u012a\u012a\u0002\u0000??\u00fc\u00fc\u0002\u0000i" +
                    "i\u008f\u008f\u0002\u0000\u000b\u000b]]\u0002\u0000\u017f\u017f\u0182" +
                    "\u0182\u0002\u0000^^\u00d7\u00d7\u0002\u0000\u00cf\u00cf\u0112\u0112\u0002" +
                    "\u0000\b\b\u00c4\u00c4\u0002\u0000\u015c\u015c\u0180\u0180\u0001\u0000" +
                    "\u00a4\u00a5\u0003\u0000\u000b\u000b\u0011\u0011\u0111\u0111\u0003\u0000" +
                    "pp\u0138\u0138\u0141\u0141\u0002\u0000\u0169\u016a\u016e\u016e\u0002\u0000" +
                    "__\u016b\u016d\u0002\u0000\u0169\u016a\u0171\u0171\u000b\u0000EEGG\u0087" +
                    "\u0087\u00b4\u00b4\u00b6\u00b6\u00b8\u00b8\u00ba\u00ba\u00e5\u00e5\u00ff" +
                    "\u00ff\u0152\u0152\u0159\u0159\u0004\u0000AACD\u0108\u0108\u0147\u0147" +
                    "\u0002\u0000LM\u012d\u012d\u0003\u0000NO\u0129\u0129\u012e\u012e\u0002" +
                    "\u0000%%\u013a\u013a\u0002\u0000\u008b\u008b\u00f4\u00f4\u0001\u0000\u011b" +
                    "\u011c\u0002\u0000\u0004\u0004||\u0002\u0000\u0004\u0004xx\u0003\u0000" +
                    "\u001d\u001d\u00a2\u00a2\u0133\u0133\u0002\u0000\u015d\u015f\u0161\u0168" +
                    "\u0002\u0000__\u0169\u0172\u0004\u0000\u000f\u000f\u008e\u008e\u00c4\u00c4" +
                    "\u00ce\u00ce\u0002\u0000pp\u0138\u0138\u0001\u0000\u0169\u016a\u0007\u0000" +
                    "EF\u0087\u0088\u00b4\u00bb\u00c0\u00c1\u00ff\u0100\u0152\u0153\u0159\u015a" +
                    "\u0006\u0000EE\u0087\u0087\u00b8\u00b8\u00ba\u00ba\u00ff\u00ff\u0159\u0159" +
                    "\u0002\u0000\u00ba\u00ba\u0159\u0159\u0004\u0000EE\u0087\u0087\u00b8\u00b8" +
                    "\u00ff\u00ff\u0003\u0000\u0087\u0087\u00b8\u00b8\u00ff\u00ff\u0002\u0000" +
                    "TT\u0161\u0161\u0002\u0000ww\u00e0\u00e0\u0001\u0000\u0181\u0182\u0002" +
                    "\u0000aa\u0109\u01093\u0000\t\n\f\u000e\u0010\u0010\u0012\u0014\u0016" +
                    "\u0017\u0019\u001c\u001e#&*,/224:<<?@E\\^aefhorrtwz{~\u0081\u0084\u0084" +
                    "\u0086\u008d\u008f\u0091\u0093\u0095\u0097\u0099\u009c\u009c\u009e\u009f" +
                    "\u00a1\u00a1\u00a4\u00c1\u00c3\u00c3\u00c6\u00c8\u00cc\u00cd\u00d0\u00d0" +
                    "\u00d2\u00d3\u00d5\u00d9\u00dc\u00e0\u00e2\u00ec\u00ee\u00f6\u00f8\u0102" +
                    "\u0104\u0107\u0109\u0110\u0112\u011f\u0121\u0126\u0129\u012f\u0132\u0132" +
                    "\u0134\u013e\u0142\u0146\u0149\u0153\u0156\u0156\u0159\u015b\u0010\u0000" +
                    "\u0010\u0010>>gg}}\u0092\u0092\u0096\u0096\u009d\u009d\u00a0\u00a0\u00a3" +
                    "\u00a3\u00c2\u00c2\u00ca\u00ca\u00f7\u00f7\u0104\u0104\u010a\u010a\u013f" +
                    "\u013f\u0148\u0148\u0011\u0000\t\u000f\u0011=?fh|~\u0091\u0093\u0095\u0097" +
                    "\u009c\u009e\u009f\u00a1\u00a2\u00a4\u00c1\u00c3\u00c9\u00cb\u00f6\u00f8" +
                    "\u0103\u0105\u0109\u010b\u013e\u0140\u0147\u0149\u015b\u1192\u0000\u018c" +
                    "\u0001\u0000\u0000\u0000\u0002\u0195\u0001\u0000\u0000\u0000\u0004\u0198" +
                    "\u0001\u0000\u0000\u0000\u0006\u019b\u0001\u0000\u0000\u0000\b\u019e\u0001" +
                    "\u0000\u0000\u0000\n\u01a1\u0001\u0000\u0000\u0000\f\u01a4\u0001\u0000" +
                    "\u0000\u0000\u000e\u04f2\u0001\u0000\u0000\u0000\u0010\u04f4\u0001\u0000" +
                    "\u0000\u0000\u0012\u0505\u0001\u0000\u0000\u0000\u0014\u0509\u0001\u0000" +
                    "\u0000\u0000\u0016\u050d\u0001\u0000\u0000\u0000\u0018\u0513\u0001\u0000" +
                    "\u0000\u0000\u001a\u051d\u0001\u0000\u0000\u0000\u001c\u051f\u0001\u0000" +
                    "\u0000\u0000\u001e\u0521\u0001\u0000\u0000\u0000 \u05cb\u0001\u0000\u0000" +
                    "\u0000\"\u05cd\u0001\u0000\u0000\u0000$\u05de\u0001\u0000\u0000\u0000" +
                    "&\u05e4\u0001\u0000\u0000\u0000(\u05ea\u0001\u0000\u0000\u0000*\u05f6" +
                    "\u0001\u0000\u0000\u0000,\u0603\u0001\u0000\u0000\u0000.\u0606\u0001\u0000" +
                    "\u0000\u00000\u060a\u0001\u0000\u0000\u00002\u0659\u0001\u0000\u0000\u0000" +
                    "4\u065b\u0001\u0000\u0000\u00006\u065f\u0001\u0000\u0000\u00008\u0674" +
                    "\u0001\u0000\u0000\u0000:\u0676\u0001\u0000\u0000\u0000<\u0678\u0001\u0000" +
                    "\u0000\u0000>\u0680\u0001\u0000\u0000\u0000@\u0682\u0001\u0000\u0000\u0000" +
                    "B\u068a\u0001\u0000\u0000\u0000D\u0693\u0001\u0000\u0000\u0000F\u069e" +
                    "\u0001\u0000\u0000\u0000H\u06b1\u0001\u0000\u0000\u0000J\u06b4\u0001\u0000" +
                    "\u0000\u0000L\u06bf\u0001\u0000\u0000\u0000N\u06cf\u0001\u0000\u0000\u0000" +
                    "P\u06d5\u0001\u0000\u0000\u0000R\u06d7\u0001\u0000\u0000\u0000T\u06e2" +
                    "\u0001\u0000\u0000\u0000V\u06e9\u0001\u0000\u0000\u0000X\u06f4\u0001\u0000" +
                    "\u0000\u0000Z\u0705\u0001\u0000\u0000\u0000\\\u070d\u0001\u0000\u0000" +
                    "\u0000^\u070f\u0001\u0000\u0000\u0000`\u0715\u0001\u0000\u0000\u0000b" +
                    "\u0759\u0001\u0000\u0000\u0000d\u0761\u0001\u0000\u0000\u0000f\u0763\u0001" +
                    "\u0000\u0000\u0000h\u0771\u0001\u0000\u0000\u0000j\u07a6\u0001\u0000\u0000" +
                    "\u0000l\u07a9\u0001\u0000\u0000\u0000n\u07cf\u0001\u0000\u0000\u0000p" +
                    "\u07d1\u0001\u0000\u0000\u0000r\u07d9\u0001\u0000\u0000\u0000t\u07fa\u0001" +
                    "\u0000\u0000\u0000v\u0828\u0001\u0000\u0000\u0000x\u083d\u0001\u0000\u0000" +
                    "\u0000z\u085d\u0001\u0000\u0000\u0000|\u0869\u0001\u0000\u0000\u0000~" +
                    "\u086c\u0001\u0000\u0000\u0000\u0080\u0875\u0001\u0000\u0000\u0000\u0082" +
                    "\u0883\u0001\u0000\u0000\u0000\u0084\u0896\u0001\u0000\u0000\u0000\u0086" +
                    "\u08aa\u0001\u0000\u0000\u0000\u0088\u08b0\u0001\u0000\u0000\u0000\u008a" +
                    "\u08b2\u0001\u0000\u0000\u0000\u008c\u08b7\u0001\u0000\u0000\u0000\u008e" +
                    "\u08bf\u0001\u0000\u0000\u0000\u0090\u08c3\u0001\u0000\u0000\u0000\u0092" +
                    "\u08c6\u0001\u0000\u0000\u0000\u0094\u08c9\u0001\u0000\u0000\u0000\u0096" +
                    "\u08e3\u0001\u0000\u0000\u0000\u0098\u08e5\u0001\u0000\u0000\u0000\u009a" +
                    "\u0908\u0001\u0000\u0000\u0000\u009c\u0931\u0001\u0000\u0000\u0000\u009e" +
                    "\u0935\u0001\u0000\u0000\u0000\u00a0\u0950\u0001\u0000\u0000\u0000\u00a2" +
                    "\u0954\u0001\u0000\u0000\u0000\u00a4\u0963\u0001\u0000\u0000\u0000\u00a6" +
                    "\u0965\u0001\u0000\u0000\u0000\u00a8\u0983\u0001\u0000\u0000\u0000\u00aa" +
                    "\u0985\u0001\u0000\u0000\u0000\u00ac\u098c\u0001\u0000\u0000\u0000\u00ae" +
                    "\u0999\u0001\u0000\u0000\u0000\u00b0\u099e\u0001\u0000\u0000\u0000\u00b2" +
                    "\u09a0\u0001\u0000\u0000\u0000\u00b4\u09af\u0001\u0000\u0000\u0000\u00b6" +
                    "\u09c7\u0001\u0000\u0000\u0000\u00b8\u09d4\u0001\u0000\u0000\u0000\u00ba" +
                    "\u09d6\u0001\u0000\u0000\u0000\u00bc\u09d8\u0001\u0000\u0000\u0000\u00be" +
                    "\u09dc\u0001\u0000\u0000\u0000\u00c0\u09df\u0001\u0000\u0000\u0000\u00c2" +
                    "\u09e3\u0001\u0000\u0000\u0000\u00c4\u0a03\u0001\u0000\u0000\u0000\u00c6" +
                    "\u0a06\u0001\u0000\u0000\u0000\u00c8\u0a12\u0001\u0000\u0000\u0000\u00ca" +
                    "\u0a25\u0001\u0000\u0000\u0000\u00cc\u0a3f\u0001\u0000\u0000\u0000\u00ce" +
                    "\u0a45\u0001\u0000\u0000\u0000\u00d0\u0a47\u0001\u0000\u0000\u0000\u00d2" +
                    "\u0a6b\u0001\u0000\u0000\u0000\u00d4\u0a6d\u0001\u0000\u0000\u0000\u00d6" +
                    "\u0a71\u0001\u0000\u0000\u0000\u00d8\u0a79\u0001\u0000\u0000\u0000\u00da" +
                    "\u0a84\u0001\u0000\u0000\u0000\u00dc\u0a88\u0001\u0000\u0000\u0000\u00de" +
                    "\u0a93\u0001\u0000\u0000\u0000\u00e0\u0ab2\u0001\u0000\u0000\u0000\u00e2" +
                    "\u0ab4\u0001\u0000\u0000\u0000\u00e4\u0ad2\u0001\u0000\u0000\u0000\u00e6" +
                    "\u0ae7\u0001\u0000\u0000\u0000\u00e8\u0afb\u0001\u0000\u0000\u0000\u00ea" +
                    "\u0b01\u0001\u0000\u0000\u0000\u00ec\u0b05\u0001\u0000\u0000\u0000\u00ee" +
                    "\u0b07\u0001\u0000\u0000\u0000\u00f0\u0b1d\u0001\u0000\u0000\u0000\u00f2" +
                    "\u0b50\u0001\u0000\u0000\u0000\u00f4\u0b52\u0001\u0000\u0000\u0000\u00f6" +
                    "\u0b5a\u0001\u0000\u0000\u0000\u00f8\u0b62\u0001\u0000\u0000\u0000\u00fa" +
                    "\u0b6a\u0001\u0000\u0000\u0000\u00fc\u0b72\u0001\u0000\u0000\u0000\u00fe" +
                    "\u0b79\u0001\u0000\u0000\u0000\u0100\u0b7d\u0001\u0000\u0000\u0000\u0102" +
                    "\u0b87\u0001\u0000\u0000\u0000\u0104\u0b8f\u0001\u0000\u0000\u0000\u0106" +
                    "\u0b9c\u0001\u0000\u0000\u0000\u0108\u0bab\u0001\u0000\u0000\u0000\u010a" +
                    "\u0baf\u0001\u0000\u0000\u0000\u010c\u0bb1\u0001\u0000\u0000\u0000\u010e" +
                    "\u0bb3\u0001\u0000\u0000\u0000\u0110\u0bb9\u0001\u0000\u0000\u0000\u0112" +
                    "\u0bbb\u0001\u0000\u0000\u0000\u0114\u0bcf\u0001\u0000\u0000\u0000\u0116" +
                    "\u0bdc\u0001\u0000\u0000\u0000\u0118\u0c30\u0001\u0000\u0000\u0000\u011a" +
                    "\u0c36\u0001\u0000\u0000\u0000\u011c\u0c50\u0001\u0000\u0000\u0000\u011e" +
                    "\u0d45\u0001\u0000\u0000\u0000\u0120\u0d60\u0001\u0000\u0000\u0000\u0122" +
                    "\u0d71\u0001\u0000\u0000\u0000\u0124\u0d73\u0001\u0000\u0000\u0000\u0126" +
                    "\u0d75\u0001\u0000\u0000\u0000\u0128\u0d77\u0001\u0000\u0000\u0000\u012a" +
                    "\u0d79\u0001\u0000\u0000\u0000\u012c\u0d7b\u0001\u0000\u0000\u0000\u012e" +
                    "\u0d80\u0001\u0000\u0000\u0000\u0130\u0d87\u0001\u0000\u0000\u0000\u0132" +
                    "\u0d8b\u0001\u0000\u0000\u0000\u0134\u0d90\u0001\u0000\u0000\u0000\u0136" +
                    "\u0d96\u0001\u0000\u0000\u0000\u0138\u0d9d\u0001\u0000\u0000\u0000\u013a" +
                    "\u0d9f\u0001\u0000\u0000\u0000\u013c\u0da4\u0001\u0000\u0000\u0000\u013e" +
                    "\u0da6\u0001\u0000\u0000\u0000\u0140\u0dcb\u0001\u0000\u0000\u0000\u0142" +
                    "\u0dfb\u0001\u0000\u0000\u0000\u0144\u0dfd\u0001\u0000\u0000\u0000\u0146" +
                    "\u0e05\u0001\u0000\u0000\u0000\u0148\u0e12\u0001\u0000\u0000\u0000\u014a" +
                    "\u0e14\u0001\u0000\u0000\u0000\u014c\u0e17\u0001\u0000\u0000\u0000\u014e" +
                    "\u0e1a\u0001\u0000\u0000\u0000\u0150\u0e22\u0001\u0000\u0000\u0000\u0152" +
                    "\u0e2b\u0001\u0000\u0000\u0000\u0154\u0e33\u0001\u0000\u0000\u0000\u0156" +
                    "\u0e40\u0001\u0000\u0000\u0000\u0158\u0e42\u0001\u0000\u0000\u0000\u015a" +
                    "\u0e49\u0001\u0000\u0000\u0000\u015c\u0e51\u0001\u0000\u0000\u0000\u015e" +
                    "\u0e5d\u0001\u0000\u0000\u0000\u0160\u0e62\u0001\u0000\u0000\u0000\u0162" +
                    "\u0e6b\u0001\u0000\u0000\u0000\u0164\u0e9d\u0001\u0000\u0000\u0000\u0166" +
                    "\u0eaf\u0001\u0000\u0000\u0000\u0168\u0eb8\u0001\u0000\u0000\u0000\u016a" +
                    "\u0eba\u0001\u0000\u0000\u0000\u016c\u0ecc\u0001\u0000\u0000\u0000\u016e" +
                    "\u0ece\u0001\u0000\u0000\u0000\u0170\u0ed6\u0001\u0000\u0000\u0000\u0172" +
                    "\u0ee0\u0001\u0000\u0000\u0000\u0174\u0ee5\u0001\u0000\u0000\u0000\u0176" +
                    "\u0eed\u0001\u0000\u0000\u0000\u0178\u0ef2\u0001\u0000\u0000\u0000\u017a" +
                    "\u0ef4\u0001\u0000\u0000\u0000\u017c\u0f21\u0001\u0000\u0000\u0000\u017e" +
                    "\u0f2e\u0001\u0000\u0000\u0000\u0180\u0f33\u0001\u0000\u0000\u0000\u0182" +
                    "\u0f37\u0001\u0000\u0000\u0000\u0184\u0f3b\u0001\u0000\u0000\u0000\u0186" +
                    "\u0f3d\u0001\u0000\u0000\u0000\u0188\u0f3f\u0001\u0000\u0000\u0000\u018a" +
                    "\u0f41\u0001\u0000\u0000\u0000\u018c\u0190\u0003\u000e\u0007\u0000\u018d" +
                    "\u018f\u0005\u0001\u0000\u0000\u018e\u018d\u0001\u0000\u0000\u0000\u018f" +
                    "\u0192\u0001\u0000\u0000\u0000\u0190\u018e\u0001\u0000\u0000\u0000\u0190" +
                    "\u0191\u0001\u0000\u0000\u0000\u0191\u0193\u0001\u0000\u0000\u0000\u0192" +
                    "\u0190\u0001\u0000\u0000\u0000\u0193\u0194\u0005\u0000\u0000\u0001\u0194" +
                    "\u0001\u0001\u0000\u0000\u0000\u0195\u0196\u0003\u0100\u0080\u0000\u0196" +
                    "\u0197\u0005\u0000\u0000\u0001\u0197\u0003\u0001\u0000\u0000\u0000\u0198" +
                    "\u0199\u0003\u00fc~\u0000\u0199\u019a\u0005\u0000\u0000\u0001\u019a\u0005" +
                    "\u0001\u0000\u0000\u0000\u019b\u019c\u0003\u00f6{\u0000\u019c\u019d\u0005" +
                    "\u0000\u0000\u0001\u019d\u0007\u0001\u0000\u0000\u0000\u019e\u019f\u0003" +
                    "\u00fe\u007f\u0000\u019f\u01a0\u0005\u0000\u0000\u0001\u01a0\t\u0001\u0000" +
                    "\u0000\u0000\u01a1\u01a2\u0003\u0142\u00a1\u0000\u01a2\u01a3\u0005\u0000" +
                    "\u0000\u0001\u01a3\u000b\u0001\u0000\u0000\u0000\u01a4\u01a5\u0003\u014e" +
                    "\u00a7\u0000\u01a5\u01a6\u0005\u0000\u0000\u0001\u01a6\r\u0001\u0000\u0000" +
                    "\u0000\u01a7\u04f3\u00030\u0018\u0000\u01a8\u04f3\u0003\u0010\b\u0000" +
                    "\u01a9\u01ab\u0003B!\u0000\u01aa\u01a9\u0001\u0000\u0000\u0000\u01aa\u01ab" +
                    "\u0001\u0000\u0000\u0000\u01ab\u01ac\u0001\u0000\u0000\u0000\u01ac\u04f3" +
                    "\u0003b1\u0000\u01ad\u01ae\u0005\u0146\u0000\u0000\u01ae\u04f3\u0003d" +
                    "2\u0000\u01af\u01b0\u0005\u0146\u0000\u0000\u01b0\u01b1\u0003:\u001d\u0000" +
                    "\u01b1\u01b2\u0003d2\u0000\u01b2\u04f3\u0001\u0000\u0000\u0000\u01b3\u01b4" +
                    "\u0005\u0109\u0000\u0000\u01b4\u01b7\u0005&\u0000\u0000\u01b5\u01b8\u0003" +
                    "\u0170\u00b8\u0000\u01b6\u01b8\u0003\u0180\u00c0\u0000\u01b7\u01b5\u0001" +
                    "\u0000\u0000\u0000\u01b7\u01b6\u0001\u0000\u0000\u0000\u01b8\u04f3\u0001" +
                    "\u0000\u0000\u0000\u01b9\u01ba\u0005=\u0000\u0000\u01ba\u01be\u0003:\u001d" +
                    "\u0000\u01bb\u01bc\u0005\u008a\u0000\u0000\u01bc\u01bd\u0005\u00c4\u0000" +
                    "\u0000\u01bd\u01bf\u0005j\u0000\u0000\u01be\u01bb\u0001\u0000\u0000\u0000" +
                    "\u01be\u01bf\u0001\u0000\u0000\u0000\u01bf\u01c0\u0001\u0000\u0000\u0000" +
                    "\u01c0\u01c8\u0003d2\u0000\u01c1\u01c7\u0003.\u0017\u0000\u01c2\u01c7" +
                    "\u0003,\u0016\u0000\u01c3\u01c4\u0005\u0157\u0000\u0000\u01c4\u01c5\u0007" +
                    "\u0000\u0000\u0000\u01c5\u01c7\u0003J%\u0000\u01c6\u01c1\u0001\u0000\u0000" +
                    "\u0000\u01c6\u01c2\u0001\u0000\u0000\u0000\u01c6\u01c3\u0001\u0000\u0000" +
                    "\u0000\u01c7\u01ca\u0001\u0000\u0000\u0000\u01c8\u01c6\u0001\u0000\u0000" +
                    "\u0000\u01c8\u01c9\u0001\u0000\u0000\u0000\u01c9\u04f3\u0001\u0000\u0000" +
                    "\u0000\u01ca\u01c8\u0001\u0000\u0000\u0000\u01cb\u01cc\u0005\f\u0000\u0000" +
                    "\u01cc\u01cd\u0003:\u001d\u0000\u01cd\u01ce\u0003d2\u0000\u01ce\u01cf" +
                    "\u0005\u0109\u0000\u0000\u01cf\u01d0\u0007\u0000\u0000\u0000\u01d0\u01d1" +
                    "\u0003J%\u0000\u01d1\u04f3\u0001\u0000\u0000\u0000\u01d2\u01d3\u0005\f" +
                    "\u0000\u0000\u01d3\u01d4\u0003:\u001d\u0000\u01d4\u01d5\u0003d2\u0000" +
                    "\u01d5\u01d6\u0005\u0109\u0000\u0000\u01d6\u01d7\u0003,\u0016\u0000\u01d7" +
                    "\u04f3\u0001\u0000\u0000\u0000\u01d8\u01d9\u0005a\u0000\u0000\u01d9\u01dc" +
                    "\u0003:\u001d\u0000\u01da\u01db\u0005\u008a\u0000\u0000\u01db\u01dd\u0005" +
                    "j\u0000\u0000\u01dc\u01da\u0001\u0000\u0000\u0000\u01dc\u01dd\u0001\u0000" +
                    "\u0000\u0000\u01dd\u01de\u0001\u0000\u0000\u0000\u01de\u01e0\u0003d2\u0000" +
                    "\u01df\u01e1\u0007\u0001\u0000\u0000\u01e0\u01df\u0001\u0000\u0000\u0000" +
                    "\u01e0\u01e1\u0001\u0000\u0000\u0000\u01e1\u04f3\u0001\u0000\u0000\u0000" +
                    "\u01e2\u01e3\u0005\u010d\u0000\u0000\u01e3\u01e6\u0003<\u001e\u0000\u01e4" +
                    "\u01e5\u0007\u0002\u0000\u0000\u01e5\u01e7\u0003\u00f6{\u0000\u01e6\u01e4" +
                    "\u0001\u0000\u0000\u0000\u01e6\u01e7\u0001\u0000\u0000\u0000\u01e7\u01ec" +
                    "\u0001\u0000\u0000\u0000\u01e8\u01ea\u0005\u00a4\u0000\u0000\u01e9\u01e8" +
                    "\u0001\u0000\u0000\u0000\u01e9\u01ea\u0001\u0000\u0000\u0000\u01ea\u01eb" +
                    "\u0001\u0000\u0000\u0000\u01eb\u01ed\u0003\u0180\u00c0\u0000\u01ec\u01e9" +
                    "\u0001\u0000\u0000\u0000\u01ec\u01ed\u0001\u0000\u0000\u0000\u01ed\u04f3" +
                    "\u0001\u0000\u0000\u0000\u01ee\u01f3\u0003\"\u0011\u0000\u01ef\u01f0\u0005" +
                    "\u0002\u0000\u0000\u01f0\u01f1\u0003\u0152\u00a9\u0000\u01f1\u01f2\u0005" +
                    "\u0003\u0000\u0000\u01f2\u01f4\u0001\u0000\u0000\u0000\u01f3\u01ef\u0001" +
                    "\u0000\u0000\u0000\u01f3\u01f4\u0001\u0000\u0000\u0000\u01f4\u01f6\u0001" +
                    "\u0000\u0000\u0000\u01f5\u01f7\u0003F#\u0000\u01f6\u01f5\u0001\u0000\u0000" +
                    "\u0000\u01f6\u01f7\u0001\u0000\u0000\u0000\u01f7\u01f8\u0001\u0000\u0000" +
                    "\u0000\u01f8\u01fd\u0003H$\u0000\u01f9\u01fb\u0005\u0015\u0000\u0000\u01fa" +
                    "\u01f9\u0001\u0000\u0000\u0000\u01fa\u01fb\u0001\u0000\u0000\u0000\u01fb" +
                    "\u01fc\u0001\u0000\u0000\u0000\u01fc\u01fe\u00030\u0018\u0000\u01fd\u01fa" +
                    "\u0001\u0000\u0000\u0000\u01fd\u01fe\u0001\u0000\u0000\u0000\u01fe\u04f3" +
                    "\u0001\u0000\u0000\u0000\u01ff\u0200\u0005=\u0000\u0000\u0200\u0204\u0005" +
                    "\u0120\u0000\u0000\u0201\u0202\u0005\u008a\u0000\u0000\u0202\u0203\u0005" +
                    "\u00c4\u0000\u0000\u0203\u0205\u0005j\u0000\u0000\u0204\u0201\u0001\u0000" +
                    "\u0000\u0000\u0204\u0205\u0001\u0000\u0000\u0000\u0205\u0206\u0001\u0000" +
                    "\u0000\u0000\u0206\u0207\u0003\u00fc~\u0000\u0207\u0208\u0005\u00a4\u0000" +
                    "\u0000\u0208\u0211\u0003\u00fc~\u0000\u0209\u0210\u0003F#\u0000\u020a" +
                    "\u0210\u0003\u00f2y\u0000\u020b\u0210\u0003Z-\u0000\u020c\u0210\u0003" +
                    ",\u0016\u0000\u020d\u020e\u0005\u0124\u0000\u0000\u020e\u0210\u0003J%" +
                    "\u0000\u020f\u0209\u0001\u0000\u0000\u0000\u020f\u020a\u0001\u0000\u0000" +
                    "\u0000\u020f\u020b\u0001\u0000\u0000\u0000\u020f\u020c\u0001\u0000\u0000" +
                    "\u0000\u020f\u020d\u0001\u0000\u0000\u0000\u0210\u0213\u0001\u0000\u0000" +
                    "\u0000\u0211\u020f\u0001\u0000\u0000\u0000\u0211\u0212\u0001\u0000\u0000" +
                    "\u0000\u0212\u04f3\u0001\u0000\u0000\u0000\u0213\u0211\u0001\u0000\u0000" +
                    "\u0000\u0214\u0219\u0003$\u0012\u0000\u0215\u0216\u0005\u0002\u0000\u0000" +
                    "\u0216\u0217\u0003\u0152\u00a9\u0000\u0217\u0218\u0005\u0003\u0000\u0000" +
                    "\u0218\u021a\u0001\u0000\u0000\u0000\u0219\u0215\u0001\u0000\u0000\u0000" +
                    "\u0219\u021a\u0001\u0000\u0000\u0000\u021a\u021c\u0001\u0000\u0000\u0000" +
                    "\u021b\u021d\u0003F#\u0000\u021c\u021b\u0001\u0000\u0000\u0000\u021c\u021d" +
                    "\u0001\u0000\u0000\u0000\u021d\u021e\u0001\u0000\u0000\u0000\u021e\u0223" +
                    "\u0003H$\u0000\u021f\u0221\u0005\u0015\u0000\u0000\u0220\u021f\u0001\u0000" +
                    "\u0000\u0000\u0220\u0221\u0001\u0000\u0000\u0000\u0221\u0222\u0001\u0000" +
                    "\u0000\u0000\u0222\u0224\u00030\u0018\u0000\u0223\u0220\u0001\u0000\u0000" +
                    "\u0000\u0223\u0224\u0001\u0000\u0000\u0000\u0224\u04f3\u0001\u0000\u0000" +
                    "\u0000\u0225\u0226\u0005\u000e\u0000\u0000\u0226\u0227\u0005\u0120\u0000" +
                    "\u0000\u0227\u0229\u0003d2\u0000\u0228\u022a\u00036\u001b\u0000\u0229" +
                    "\u0228\u0001\u0000\u0000\u0000\u0229\u022a\u0001\u0000\u0000\u0000\u022a" +
                    "\u022b\u0001\u0000\u0000\u0000\u022b\u022c\u00059\u0000\u0000\u022c\u0234" +
                    "\u0005\u0116\u0000\u0000\u022d\u0235\u0003\u0174\u00ba\u0000\u022e\u022f" +
                    "\u0005x\u0000\u0000\u022f\u0230\u00054\u0000\u0000\u0230\u0235\u0003\u00d6" +
                    "k\u0000\u0231\u0232\u0005x\u0000\u0000\u0232\u0233\u0005\u000b\u0000\u0000" +
                    "\u0233\u0235\u00054\u0000\u0000\u0234\u022d\u0001\u0000\u0000\u0000\u0234" +
                    "\u022e\u0001\u0000\u0000\u0000\u0234\u0231\u0001\u0000\u0000\u0000\u0234" +
                    "\u0235\u0001\u0000\u0000\u0000\u0235\u04f3\u0001\u0000\u0000\u0000\u0236" +
                    "\u0237\u0005\u000e\u0000\u0000\u0237\u023a\u0005\u0121\u0000\u0000\u0238" +
                    "\u0239\u0007\u0002\u0000\u0000\u0239\u023b\u0003d2\u0000\u023a\u0238\u0001" +
                    "\u0000\u0000\u0000\u023a\u023b\u0001\u0000\u0000\u0000\u023b\u023c\u0001" +
                    "\u0000\u0000\u0000\u023c\u023d\u00059\u0000\u0000\u023d\u023f\u0005\u0116" +
                    "\u0000\u0000\u023e\u0240\u0003\u0174\u00ba\u0000\u023f\u023e\u0001\u0000" +
                    "\u0000\u0000\u023f\u0240\u0001\u0000\u0000\u0000\u0240\u04f3\u0001\u0000" +
                    "\u0000\u0000\u0241\u0242\u0005\f\u0000\u0000\u0242\u0243\u0005\u0120\u0000" +
                    "\u0000\u0243\u0244\u0003d2\u0000\u0244\u0245\u0005\t\u0000\u0000\u0245" +
                    "\u0246\u0007\u0003\u0000\u0000\u0246\u0247\u0003\u0144\u00a2\u0000\u0247" +
                    "\u04f3\u0001\u0000\u0000\u0000\u0248\u0249\u0005\f\u0000\u0000\u0249\u024a" +
                    "\u0005\u0120\u0000\u0000\u024a\u024b\u0003d2\u0000\u024b\u024c\u0005\t" +
                    "\u0000\u0000\u024c\u024d\u0007\u0003\u0000\u0000\u024d\u024e\u0005\u0002" +
                    "\u0000\u0000\u024e\u024f\u0003\u0144\u00a2\u0000\u024f\u0250\u0005\u0003" +
                    "\u0000\u0000\u0250\u04f3\u0001\u0000\u0000\u0000\u0251\u0252\u0005\f\u0000" +
                    "\u0000\u0252\u0253\u0005\u0120\u0000\u0000\u0253\u0254\u0003d2\u0000\u0254" +
                    "\u0255\u0005\u00ef\u0000\u0000\u0255\u0256\u00053\u0000\u0000\u0256\u0257" +
                    "\u0003\u00f6{\u0000\u0257\u0258\u0005\u0130\u0000\u0000\u0258\u0259\u0003" +
                    "\u0170\u00b8\u0000\u0259\u04f3\u0001\u0000\u0000\u0000\u025a\u025b\u0005" +
                    "\f\u0000\u0000\u025b\u025c\u0005\u0120\u0000\u0000\u025c\u025d\u0003d" +
                    "2\u0000\u025d\u025e\u0005a\u0000\u0000\u025e\u0261\u0007\u0003\u0000\u0000" +
                    "\u025f\u0260\u0005\u008a\u0000\u0000\u0260\u0262\u0005j\u0000\u0000\u0261" +
                    "\u025f\u0001\u0000\u0000\u0000\u0261\u0262\u0001\u0000\u0000\u0000\u0262" +
                    "\u0263\u0001\u0000\u0000\u0000\u0263\u0264\u0005\u0002\u0000\u0000\u0264" +
                    "\u0265\u0003\u00f4z\u0000\u0265\u0266\u0005\u0003\u0000\u0000\u0266\u04f3" +
                    "\u0001\u0000\u0000\u0000\u0267\u0268\u0005\f\u0000\u0000\u0268\u0269\u0005" +
                    "\u0120\u0000\u0000\u0269\u026a\u0003d2\u0000\u026a\u026b\u0005a\u0000" +
                    "\u0000\u026b\u026e\u0007\u0003\u0000\u0000\u026c\u026d\u0005\u008a\u0000" +
                    "\u0000\u026d\u026f\u0005j\u0000\u0000\u026e\u026c\u0001\u0000\u0000\u0000" +
                    "\u026e\u026f\u0001\u0000\u0000\u0000\u026f\u0270\u0001\u0000\u0000\u0000" +
                    "\u0270\u0271\u0003\u00f4z\u0000\u0271\u04f3\u0001\u0000\u0000\u0000\u0272" +
                    "\u0273\u0005\f\u0000\u0000\u0273\u0274\u0007\u0004\u0000\u0000\u0274\u0275" +
                    "\u0003d2\u0000\u0275\u0276\u0005\u00ef\u0000\u0000\u0276\u0277\u0005\u0130" +
                    "\u0000\u0000\u0277\u0278\u0003\u00f6{\u0000\u0278\u04f3\u0001\u0000\u0000" +
                    "\u0000\u0279\u027a\u0005\f\u0000\u0000\u027a\u027b\u0007\u0004\u0000\u0000" +
                    "\u027b\u027c\u0003d2\u0000\u027c\u027d\u0005\u0109\u0000\u0000\u027d\u027e" +
                    "\u0005\u0124\u0000\u0000\u027e\u027f\u0003J%\u0000\u027f\u04f3\u0001\u0000" +
                    "\u0000\u0000\u0280\u0281\u0005\f\u0000\u0000\u0281\u0282\u0007\u0004\u0000" +
                    "\u0000\u0282\u0283\u0003d2\u0000\u0283\u0284\u0005\u0144\u0000\u0000\u0284" +
                    "\u0287\u0005\u0124\u0000\u0000\u0285\u0286\u0005\u008a\u0000\u0000\u0286" +
                    "\u0288\u0005j\u0000\u0000\u0287\u0285\u0001\u0000\u0000\u0000\u0287\u0288" +
                    "\u0001\u0000\u0000\u0000\u0288\u0289\u0001\u0000\u0000\u0000\u0289\u028a" +
                    "\u0003J%\u0000\u028a\u04f3\u0001\u0000\u0000\u0000\u028b\u028c\u0005\f" +
                    "\u0000\u0000\u028c\u028d\u0005\u0120\u0000\u0000\u028d\u028e\u0003d2\u0000" +
                    "\u028e\u0290\u0007\u0005\u0000\u0000\u028f\u0291\u00053\u0000\u0000\u0290" +
                    "\u028f\u0001\u0000\u0000\u0000\u0290\u0291\u0001\u0000\u0000\u0000\u0291" +
                    "\u0292\u0001\u0000\u0000\u0000\u0292\u0294\u0003\u00f6{\u0000\u0293\u0295" +
                    "\u0003\u017e\u00bf\u0000\u0294\u0293\u0001\u0000\u0000\u0000\u0294\u0295" +
                    "\u0001\u0000\u0000\u0000\u0295\u04f3\u0001\u0000\u0000\u0000\u0296\u0297" +
                    "\u0005\f\u0000\u0000\u0297\u0298\u0005\u0120\u0000\u0000\u0298\u029a\u0003" +
                    "d2\u0000\u0299\u029b\u00036\u001b\u0000\u029a\u0299\u0001\u0000\u0000" +
                    "\u0000\u029a\u029b\u0001\u0000\u0000\u0000\u029b\u029c\u0001\u0000\u0000" +
                    "\u0000\u029c\u029e\u0005(\u0000\u0000\u029d\u029f\u00053\u0000\u0000\u029e" +
                    "\u029d\u0001\u0000\u0000\u0000\u029e\u029f\u0001\u0000\u0000\u0000\u029f" +
                    "\u02a0\u0001\u0000\u0000\u0000\u02a0\u02a1\u0003\u00f6{\u0000\u02a1\u02a3" +
                    "\u0003\u0150\u00a8\u0000\u02a2\u02a4\u0003\u013c\u009e\u0000\u02a3\u02a2" +
                    "\u0001\u0000\u0000\u0000\u02a3\u02a4\u0001\u0000\u0000\u0000\u02a4\u04f3" +
                    "\u0001\u0000\u0000\u0000\u02a5\u02a6\u0005\f\u0000\u0000\u02a6\u02a7\u0005" +
                    "\u0120\u0000\u0000\u02a7\u02a9\u0003d2\u0000\u02a8\u02aa\u00036\u001b" +
                    "\u0000\u02a9\u02a8\u0001\u0000\u0000\u0000\u02a9\u02aa\u0001\u0000\u0000" +
                    "\u0000\u02aa\u02ab\u0001\u0000\u0000\u0000\u02ab\u02ac\u0005\u00f2\u0000" +
                    "\u0000\u02ac\u02ad\u00054\u0000\u0000\u02ad\u02ae\u0005\u0002\u0000\u0000" +
                    "\u02ae\u02af\u0003\u0144\u00a2\u0000\u02af\u02b0\u0005\u0003\u0000\u0000" +
                    "\u02b0\u04f3\u0001\u0000\u0000\u0000\u02b1\u02b2\u0005\f\u0000\u0000\u02b2" +
                    "\u02b3\u0005\u0120\u0000\u0000\u02b3\u02b5\u0003d2\u0000\u02b4\u02b6\u0003" +
                    "6\u001b\u0000\u02b5\u02b4\u0001\u0000\u0000\u0000\u02b5\u02b6\u0001\u0000" +
                    "\u0000\u0000\u02b6\u02b7\u0001\u0000\u0000\u0000\u02b7\u02b8\u0005\u0109" +
                    "\u0000\u0000\u02b8\u02b9\u0005\u0106\u0000\u0000\u02b9\u02bd\u0003\u0180" +
                    "\u00c0\u0000\u02ba\u02bb\u0005\u0157\u0000\u0000\u02bb\u02bc\u0005\u0107" +
                    "\u0000\u0000\u02bc\u02be\u0003J%\u0000\u02bd\u02ba\u0001\u0000\u0000\u0000" +
                    "\u02bd\u02be\u0001\u0000\u0000\u0000\u02be\u04f3\u0001\u0000\u0000\u0000" +
                    "\u02bf\u02c0\u0005\f\u0000\u0000\u02c0\u02c1\u0005\u0120\u0000\u0000\u02c1" +
                    "\u02c3\u0003d2\u0000\u02c2\u02c4\u00036\u001b\u0000\u02c3\u02c2\u0001" +
                    "\u0000\u0000\u0000\u02c3\u02c4\u0001\u0000\u0000\u0000\u02c4\u02c5\u0001" +
                    "\u0000\u0000\u0000\u02c5\u02c6\u0005\u0109\u0000\u0000\u02c6\u02c7\u0005" +
                    "\u0107\u0000\u0000\u02c7\u02c8\u0003J%\u0000\u02c8\u04f3\u0001\u0000\u0000" +
                    "\u0000\u02c9\u02ca\u0005\f\u0000\u0000\u02ca\u02cb\u0007\u0004\u0000\u0000" +
                    "\u02cb\u02cc\u0003d2\u0000\u02cc\u02d0\u0005\t\u0000\u0000\u02cd\u02ce" +
                    "\u0005\u008a\u0000\u0000\u02ce\u02cf\u0005\u00c4\u0000\u0000\u02cf\u02d1" +
                    "\u0005j\u0000\u0000\u02d0\u02cd\u0001\u0000\u0000\u0000\u02d0\u02d1\u0001" +
                    "\u0000\u0000\u0000\u02d1\u02d3\u0001\u0000\u0000\u0000\u02d2\u02d4\u0003" +
                    "4\u001a\u0000\u02d3\u02d2\u0001\u0000\u0000\u0000\u02d4\u02d5\u0001\u0000" +
                    "\u0000\u0000\u02d5\u02d3\u0001\u0000\u0000\u0000\u02d5\u02d6\u0001\u0000" +
                    "\u0000\u0000\u02d6\u04f3\u0001\u0000\u0000\u0000\u02d7\u02d8\u0005\f\u0000" +
                    "\u0000\u02d8\u02d9\u0005\u0120\u0000\u0000\u02d9\u02da\u0003d2\u0000\u02da" +
                    "\u02db\u00036\u001b\u0000\u02db\u02dc\u0005\u00ef\u0000\u0000\u02dc\u02dd" +
                    "\u0005\u0130\u0000\u0000\u02dd\u02de\u00036\u001b\u0000\u02de\u04f3\u0001" +
                    "\u0000\u0000\u0000\u02df\u02e0\u0005\f\u0000\u0000\u02e0\u02e1\u0007\u0004" +
                    "\u0000\u0000\u02e1\u02e2\u0003d2\u0000\u02e2\u02e5\u0005a\u0000\u0000" +
                    "\u02e3\u02e4\u0005\u008a\u0000\u0000\u02e4\u02e6\u0005j\u0000\u0000\u02e5" +
                    "\u02e3\u0001\u0000\u0000\u0000\u02e5\u02e6\u0001\u0000\u0000\u0000\u02e6" +
                    "\u02e7\u0001\u0000\u0000\u0000\u02e7\u02ec\u00036\u001b\u0000\u02e8\u02e9" +
                    "\u0005\u0004\u0000\u0000\u02e9\u02eb\u00036\u001b\u0000\u02ea\u02e8\u0001" +
                    "\u0000\u0000\u0000\u02eb\u02ee\u0001\u0000\u0000\u0000\u02ec\u02ea\u0001" +
                    "\u0000\u0000\u0000\u02ec\u02ed\u0001\u0000\u0000\u0000\u02ed\u02f0\u0001" +
                    "\u0000\u0000\u0000\u02ee\u02ec\u0001\u0000\u0000\u0000\u02ef\u02f1\u0005" +
                    "\u00e4\u0000\u0000\u02f0\u02ef\u0001\u0000\u0000\u0000\u02f0\u02f1\u0001" +
                    "\u0000\u0000\u0000\u02f1\u04f3\u0001\u0000\u0000\u0000\u02f2\u02f3\u0005" +
                    "\f\u0000\u0000\u02f3\u02f4\u0005\u0120\u0000\u0000\u02f4\u02f6\u0003d" +
                    "2\u0000\u02f5\u02f7\u00036\u001b\u0000\u02f6\u02f5\u0001\u0000\u0000\u0000" +
                    "\u02f6\u02f7\u0001\u0000\u0000\u0000\u02f7\u02f8\u0001\u0000\u0000\u0000" +
                    "\u02f8\u02f9\u0005\u0109\u0000\u0000\u02f9\u02fa\u0003,\u0016\u0000\u02fa" +
                    "\u04f3\u0001\u0000\u0000\u0000\u02fb\u02fc\u0005\f\u0000\u0000\u02fc\u02fd" +
                    "\u0005\u0120\u0000\u0000\u02fd\u02fe\u0003d2\u0000\u02fe\u02ff\u0005\u00eb" +
                    "\u0000\u0000\u02ff\u0300\u0005\u00d9\u0000\u0000\u0300\u04f3\u0001\u0000" +
                    "\u0000\u0000\u0301\u0302\u0005a\u0000\u0000\u0302\u0305\u0005\u0120\u0000" +
                    "\u0000\u0303\u0304\u0005\u008a\u0000\u0000\u0304\u0306\u0005j\u0000\u0000" +
                    "\u0305\u0303\u0001\u0000\u0000\u0000\u0305\u0306\u0001\u0000\u0000\u0000" +
                    "\u0306\u0307\u0001\u0000\u0000\u0000\u0307\u0309\u0003d2\u0000\u0308\u030a" +
                    "\u0005\u00e4\u0000\u0000\u0309\u0308\u0001\u0000\u0000\u0000\u0309\u030a" +
                    "\u0001\u0000\u0000\u0000\u030a\u04f3\u0001\u0000\u0000\u0000\u030b\u030c" +
                    "\u0005a\u0000\u0000\u030c\u030f\u0005\u014f\u0000\u0000\u030d\u030e\u0005" +
                    "\u008a\u0000\u0000\u030e\u0310\u0005j\u0000\u0000\u030f\u030d\u0001\u0000" +
                    "\u0000\u0000\u030f\u0310\u0001\u0000\u0000\u0000\u0310\u0311\u0001\u0000" +
                    "\u0000\u0000\u0311\u04f3\u0003d2\u0000\u0312\u0315\u0005=\u0000\u0000" +
                    "\u0313\u0314\u0005\u00ce\u0000\u0000\u0314\u0316\u0005\u00f2\u0000\u0000" +
                    "\u0315\u0313\u0001\u0000\u0000\u0000\u0315\u0316\u0001\u0000\u0000\u0000" +
                    "\u0316\u031b\u0001\u0000\u0000\u0000\u0317\u0319\u0005\u0081\u0000\u0000" +
                    "\u0318\u0317\u0001\u0000\u0000\u0000\u0318\u0319\u0001\u0000\u0000\u0000" +
                    "\u0319\u031a\u0001\u0000\u0000\u0000\u031a\u031c\u0005\u0125\u0000\u0000" +
                    "\u031b\u0318\u0001\u0000\u0000\u0000\u031b\u031c\u0001\u0000\u0000\u0000" +
                    "\u031c\u031d\u0001\u0000\u0000\u0000\u031d\u0321\u0005\u014f\u0000\u0000" +
                    "\u031e\u031f\u0005\u008a\u0000\u0000\u031f\u0320\u0005\u00c4\u0000\u0000" +
                    "\u0320\u0322\u0005j\u0000\u0000\u0321\u031e\u0001\u0000\u0000\u0000\u0321" +
                    "\u0322\u0001\u0000\u0000\u0000\u0322\u0323\u0001\u0000\u0000\u0000\u0323" +
                    "\u0325\u0003d2\u0000\u0324\u0326\u0003\u00dcn\u0000\u0325\u0324\u0001" +
                    "\u0000\u0000\u0000\u0325\u0326\u0001\u0000\u0000\u0000\u0326\u032f\u0001" +
                    "\u0000\u0000\u0000\u0327\u032e\u0003.\u0017\u0000\u0328\u0329\u0005\u00d8" +
                    "\u0000\u0000\u0329\u032a\u0005\u00ca\u0000\u0000\u032a\u032e\u0003\u00d4" +
                    "j\u0000\u032b\u032c\u0005\u0124\u0000\u0000\u032c\u032e\u0003J%\u0000" +
                    "\u032d\u0327\u0001\u0000\u0000\u0000\u032d\u0328\u0001\u0000\u0000\u0000" +
                    "\u032d\u032b\u0001\u0000\u0000\u0000\u032e\u0331\u0001\u0000\u0000\u0000" +
                    "\u032f\u032d\u0001\u0000\u0000\u0000\u032f\u0330\u0001\u0000\u0000\u0000" +
                    "\u0330\u0332\u0001\u0000\u0000\u0000\u0331\u032f\u0001\u0000\u0000\u0000" +
                    "\u0332\u0333\u0005\u0015\u0000\u0000\u0333\u0334\u00030\u0018\u0000\u0334" +
                    "\u04f3\u0001\u0000\u0000\u0000\u0335\u0338\u0005=\u0000\u0000\u0336\u0337" +
                    "\u0005\u00ce\u0000\u0000\u0337\u0339\u0005\u00f2\u0000\u0000\u0338\u0336" +
                    "\u0001\u0000\u0000\u0000\u0338\u0339\u0001\u0000\u0000\u0000\u0339\u033b" +
                    "\u0001\u0000\u0000\u0000\u033a\u033c\u0005\u0081\u0000\u0000\u033b\u033a" +
                    "\u0001\u0000\u0000\u0000\u033b\u033c\u0001\u0000\u0000\u0000\u033c\u033d" +
                    "\u0001\u0000\u0000\u0000\u033d\u033e\u0005\u0125\u0000\u0000\u033e\u033f" +
                    "\u0005\u014f\u0000\u0000\u033f\u0344\u0003\u00fc~\u0000\u0340\u0341\u0005" +
                    "\u0002\u0000\u0000\u0341\u0342\u0003\u014e\u00a7\u0000\u0342\u0343\u0005" +
                    "\u0003\u0000\u0000\u0343\u0345\u0001\u0000\u0000\u0000\u0344\u0340\u0001" +
                    "\u0000\u0000\u0000\u0344\u0345\u0001\u0000\u0000\u0000\u0345\u0346\u0001" +
                    "\u0000\u0000\u0000\u0346\u0349\u0003F#\u0000\u0347\u0348\u0005\u00cd\u0000" +
                    "\u0000\u0348\u034a\u0003J%\u0000\u0349\u0347\u0001\u0000\u0000\u0000\u0349" +
                    "\u034a\u0001\u0000\u0000\u0000\u034a\u04f3\u0001\u0000\u0000\u0000\u034b" +
                    "\u034c\u0005\f\u0000\u0000\u034c\u034d\u0005\u014f\u0000\u0000\u034d\u034f" +
                    "\u0003d2\u0000\u034e\u0350\u0005\u0015\u0000\u0000\u034f\u034e\u0001\u0000" +
                    "\u0000\u0000\u034f\u0350\u0001\u0000\u0000\u0000\u0350\u0351\u0001\u0000" +
                    "\u0000\u0000\u0351\u0352\u00030\u0018\u0000\u0352\u04f3\u0001\u0000\u0000" +
                    "\u0000\u0353\u0356\u0005=\u0000\u0000\u0354\u0355\u0005\u00ce\u0000\u0000" +
                    "\u0355\u0357\u0005\u00f2\u0000\u0000\u0356\u0354\u0001\u0000\u0000\u0000" +
                    "\u0356\u0357\u0001\u0000\u0000\u0000\u0357\u0359\u0001\u0000\u0000\u0000" +
                    "\u0358\u035a\u0005\u0125\u0000\u0000\u0359\u0358\u0001\u0000\u0000\u0000" +
                    "\u0359\u035a\u0001\u0000\u0000\u0000\u035a\u035b\u0001\u0000\u0000\u0000" +
                    "\u035b\u035f\u0005~\u0000\u0000\u035c\u035d\u0005\u008a\u0000\u0000\u035d" +
                    "\u035e\u0005\u00c4\u0000\u0000\u035e\u0360\u0005j\u0000\u0000\u035f\u035c" +
                    "\u0001\u0000\u0000\u0000\u035f\u0360\u0001\u0000\u0000\u0000\u0360\u0361" +
                    "\u0001\u0000\u0000\u0000\u0361\u0362\u0003d2\u0000\u0362\u0363\u0005\u0015" +
                    "\u0000\u0000\u0363\u036d\u0003\u0180\u00c0\u0000\u0364\u0365\u0005\u0148" +
                    "\u0000\u0000\u0365\u036a\u0003`0\u0000\u0366\u0367\u0005\u0004\u0000\u0000" +
                    "\u0367\u0369\u0003`0\u0000\u0368\u0366\u0001\u0000\u0000\u0000\u0369\u036c" +
                    "\u0001\u0000\u0000\u0000\u036a\u0368\u0001\u0000\u0000\u0000\u036a\u036b" +
                    "\u0001\u0000\u0000\u0000\u036b\u036e\u0001\u0000\u0000\u0000\u036c\u036a" +
                    "\u0001\u0000\u0000\u0000\u036d\u0364\u0001\u0000\u0000\u0000\u036d\u036e" +
                    "\u0001\u0000\u0000\u0000\u036e\u04f3\u0001\u0000\u0000\u0000\u036f\u0371" +
                    "\u0005a\u0000\u0000\u0370\u0372\u0005\u0125\u0000\u0000\u0371\u0370\u0001" +
                    "\u0000\u0000\u0000\u0371\u0372\u0001\u0000\u0000\u0000\u0372\u0373\u0001" +
                    "\u0000\u0000\u0000\u0373\u0376\u0005~\u0000\u0000\u0374\u0375\u0005\u008a" +
                    "\u0000\u0000\u0375\u0377\u0005j\u0000\u0000\u0376\u0374\u0001\u0000\u0000" +
                    "\u0000\u0376\u0377\u0001\u0000\u0000\u0000\u0377\u0378\u0001\u0000\u0000" +
                    "\u0000\u0378\u04f3\u0003d2\u0000\u0379\u037c\u0005S\u0000\u0000\u037a" +
                    "\u037b\u0005\u00ce\u0000\u0000\u037b\u037d\u0005\u00f2\u0000\u0000\u037c" +
                    "\u037a\u0001\u0000\u0000\u0000\u037c\u037d\u0001\u0000\u0000\u0000\u037d" +
                    "\u037f\u0001\u0000\u0000\u0000\u037e\u0380\u0005\u014c\u0000\u0000\u037f" +
                    "\u037e\u0001\u0000\u0000\u0000\u037f\u0380\u0001\u0000\u0000\u0000\u0380" +
                    "\u0381\u0001\u0000\u0000\u0000\u0381\u0383\u0003d2\u0000\u0382\u0384\u0003" +
                    "\u0142\u00a1\u0000\u0383\u0382\u0001\u0000\u0000\u0000\u0383\u0384\u0001" +
                    "\u0000\u0000\u0000\u0384\u0386\u0001\u0000\u0000\u0000\u0385\u0387\u0003" +
                    "\u014c\u00a6\u0000\u0386\u0385\u0001\u0000\u0000\u0000\u0386\u0387\u0001" +
                    "\u0000\u0000\u0000\u0387\u04f3\u0001\u0000\u0000\u0000\u0388\u0389\u0005" +
                    "a\u0000\u0000\u0389\u038a\u0005\u0125\u0000\u0000\u038a\u038d\u0005\u014c" +
                    "\u0000\u0000\u038b\u038c\u0005\u008a\u0000\u0000\u038c\u038e\u0005j\u0000" +
                    "\u0000\u038d\u038b\u0001\u0000\u0000\u0000\u038d\u038e\u0001\u0000\u0000" +
                    "\u0000\u038e\u038f\u0001\u0000\u0000\u0000\u038f\u04f3\u0003d2\u0000\u0390" +
                    "\u0392\u0005k\u0000\u0000\u0391\u0393\u0007\u0006\u0000\u0000\u0392\u0391" +
                    "\u0001\u0000\u0000\u0000\u0392\u0393\u0001\u0000\u0000\u0000\u0393\u0394" +
                    "\u0001\u0000\u0000\u0000\u0394\u04f3\u0003\u000e\u0007\u0000\u0395\u0396" +
                    "\u0005\u010d\u0000\u0000\u0396\u0399\u0005\u0121\u0000\u0000\u0397\u0398" +
                    "\u0007\u0002\u0000\u0000\u0398\u039a\u0003d2\u0000\u0399\u0397\u0001\u0000" +
                    "\u0000\u0000\u0399\u039a\u0001\u0000\u0000\u0000\u039a\u039f\u0001\u0000" +
                    "\u0000\u0000\u039b\u039d\u0005\u00a4\u0000\u0000\u039c\u039b\u0001\u0000" +
                    "\u0000\u0000\u039c\u039d\u0001\u0000\u0000\u0000\u039d\u039e\u0001\u0000" +
                    "\u0000\u0000\u039e\u03a0\u0003\u0180\u00c0\u0000\u039f\u039c\u0001\u0000" +
                    "\u0000\u0000\u039f\u03a0\u0001\u0000\u0000\u0000\u03a0\u04f3\u0001\u0000" +
                    "\u0000\u0000\u03a1\u03a2\u0005\u010d\u0000\u0000\u03a2\u03a3\u0005\u0120" +
                    "\u0000\u0000\u03a3\u03a6\u0005m\u0000\u0000\u03a4\u03a5\u0007\u0002\u0000" +
                    "\u0000\u03a5\u03a7\u0003d2\u0000\u03a6\u03a4\u0001\u0000\u0000\u0000\u03a6" +
                    "\u03a7\u0001\u0000\u0000\u0000\u03a7\u03a8\u0001\u0000\u0000\u0000\u03a8" +
                    "\u03a9\u0005\u00a4\u0000\u0000\u03a9\u03ab\u0003\u0180\u00c0\u0000\u03aa" +
                    "\u03ac\u00036\u001b\u0000\u03ab\u03aa\u0001\u0000\u0000\u0000\u03ab\u03ac" +
                    "\u0001\u0000\u0000\u0000\u03ac\u04f3\u0001\u0000\u0000\u0000\u03ad\u03ae" +
                    "\u0005\u010d\u0000\u0000\u03ae\u03af\u0005\u0124\u0000\u0000\u03af\u03b4" +
                    "\u0003d2\u0000\u03b0\u03b1\u0005\u0002\u0000\u0000\u03b1\u03b2\u0003N" +
                    "\'\u0000\u03b2\u03b3\u0005\u0003\u0000\u0000\u03b3\u03b5\u0001\u0000\u0000" +
                    "\u0000\u03b4\u03b0\u0001\u0000\u0000\u0000\u03b4\u03b5\u0001\u0000\u0000" +
                    "\u0000\u03b5\u04f3\u0001\u0000\u0000\u0000\u03b6\u03b7\u0005\u010d\u0000" +
                    "\u0000\u03b7\u03b8\u00054\u0000\u0000\u03b8\u03b9\u0007\u0002\u0000\u0000" +
                    "\u03b9\u03bc\u0003d2\u0000\u03ba\u03bb\u0007\u0002\u0000\u0000\u03bb\u03bd" +
                    "\u0003\u00f6{\u0000\u03bc\u03ba\u0001\u0000\u0000\u0000\u03bc\u03bd\u0001" +
                    "\u0000\u0000\u0000\u03bd\u04f3\u0001\u0000\u0000\u0000\u03be\u03bf\u0005" +
                    "\u010d\u0000\u0000\u03bf\u03c2\u0005\u0150\u0000\u0000\u03c0\u03c1\u0007" +
                    "\u0002\u0000\u0000\u03c1\u03c3\u0003d2\u0000\u03c2\u03c0\u0001\u0000\u0000" +
                    "\u0000\u03c2\u03c3\u0001\u0000\u0000\u0000\u03c3\u03c8\u0001\u0000\u0000" +
                    "\u0000\u03c4\u03c6\u0005\u00a4\u0000\u0000\u03c5\u03c4\u0001\u0000\u0000" +
                    "\u0000\u03c5\u03c6\u0001\u0000\u0000\u0000\u03c6\u03c7\u0001\u0000\u0000" +
                    "\u0000\u03c7\u03c9\u0003\u0180\u00c0\u0000\u03c8\u03c5\u0001\u0000\u0000" +
                    "\u0000\u03c8\u03c9\u0001\u0000\u0000\u0000\u03c9\u04f3\u0001\u0000\u0000" +
                    "\u0000\u03ca\u03cb\u0005\u010d\u0000\u0000\u03cb\u03cc\u0005\u00d9\u0000" +
                    "\u0000\u03cc\u03ce\u0003d2\u0000\u03cd\u03cf\u00036\u001b\u0000\u03ce" +
                    "\u03cd\u0001\u0000\u0000\u0000\u03ce\u03cf\u0001\u0000\u0000\u0000\u03cf" +
                    "\u04f3\u0001\u0000\u0000\u0000\u03d0\u03d2\u0005\u010d\u0000\u0000\u03d1" +
                    "\u03d3\u0003\u0174\u00ba\u0000\u03d2\u03d1\u0001\u0000\u0000\u0000\u03d2" +
                    "\u03d3\u0001\u0000\u0000\u0000\u03d3\u03d4\u0001\u0000\u0000\u0000\u03d4" +
                    "\u03d7\u0005\u007f\u0000\u0000\u03d5\u03d6\u0007\u0002\u0000\u0000\u03d6" +
                    "\u03d8\u0003d2\u0000\u03d7\u03d5\u0001\u0000\u0000\u0000\u03d7\u03d8\u0001" +
                    "\u0000\u0000\u0000\u03d8\u03e0\u0001\u0000\u0000\u0000\u03d9\u03db\u0005" +
                    "\u00a4\u0000\u0000\u03da\u03d9\u0001\u0000\u0000\u0000\u03da\u03db\u0001" +
                    "\u0000\u0000\u0000\u03db\u03de\u0001\u0000\u0000\u0000\u03dc\u03df\u0003" +
                    "\u00f6{\u0000\u03dd\u03df\u0003\u0180\u00c0\u0000\u03de\u03dc\u0001\u0000" +
                    "\u0000\u0000\u03de\u03dd\u0001\u0000\u0000\u0000\u03df\u03e1\u0001\u0000" +
                    "\u0000\u0000\u03e0\u03da\u0001\u0000\u0000\u0000\u03e0\u03e1\u0001\u0000" +
                    "\u0000\u0000\u03e1\u04f3\u0001\u0000\u0000\u0000\u03e2\u03e3\u0005\u010d" +
                    "\u0000\u0000\u03e3\u03e4\u0005=\u0000\u0000\u03e4\u03e5\u0005\u0120\u0000" +
                    "\u0000\u03e5\u03e8\u0003d2\u0000\u03e6\u03e7\u0005\u0015\u0000\u0000\u03e7" +
                    "\u03e9\u0005\u0106\u0000\u0000\u03e8\u03e6\u0001\u0000\u0000\u0000\u03e8" +
                    "\u03e9\u0001\u0000\u0000\u0000\u03e9\u04f3\u0001\u0000\u0000\u0000\u03ea" +
                    "\u03eb\u0005\u010d\u0000\u0000\u03eb\u03ec\u0005@\u0000\u0000\u03ec\u04f3" +
                    "\u0003:\u001d\u0000\u03ed\u03ee\u0005\u010d\u0000\u0000\u03ee\u03f3\u0005" +
                    "\'\u0000\u0000\u03ef\u03f1\u0005\u00a4\u0000\u0000\u03f0\u03ef\u0001\u0000" +
                    "\u0000\u0000\u03f0\u03f1\u0001\u0000\u0000\u0000\u03f1\u03f2\u0001\u0000" +
                    "\u0000\u0000\u03f2\u03f4\u0003\u0180\u00c0\u0000\u03f3\u03f0\u0001\u0000" +
                    "\u0000\u0000\u03f3\u03f4\u0001\u0000\u0000\u0000\u03f4\u04f3\u0001\u0000" +
                    "\u0000\u0000\u03f5\u03f6\u0007\u0007\u0000\u0000\u03f6\u03f8\u0005~\u0000" +
                    "\u0000\u03f7\u03f9\u0005m\u0000\u0000\u03f8\u03f7\u0001\u0000\u0000\u0000" +
                    "\u03f8\u03f9\u0001\u0000\u0000\u0000\u03f9\u03fa\u0001\u0000\u0000\u0000" +
                    "\u03fa\u04f3\u0003>\u001f\u0000\u03fb\u03fc\u0007\u0007\u0000\u0000\u03fc" +
                    "\u03fe\u0003:\u001d\u0000\u03fd\u03ff\u0005m\u0000\u0000\u03fe\u03fd\u0001" +
                    "\u0000\u0000\u0000\u03fe\u03ff\u0001\u0000\u0000\u0000\u03ff\u0400\u0001" +
                    "\u0000\u0000\u0000\u0400\u0401\u0003d2\u0000\u0401\u04f3\u0001\u0000\u0000" +
                    "\u0000\u0402\u0404\u0007\u0007\u0000\u0000\u0403\u0405\u0005\u0120\u0000" +
                    "\u0000\u0404\u0403\u0001\u0000\u0000\u0000\u0404\u0405\u0001\u0000\u0000" +
                    "\u0000\u0405\u0407\u0001\u0000\u0000\u0000\u0406\u0408\u0007\b\u0000\u0000" +
                    "\u0407\u0406\u0001\u0000\u0000\u0000\u0407\u0408\u0001\u0000\u0000\u0000" +
                    "\u0408\u0409\u0001\u0000\u0000\u0000\u0409\u040b\u0003d2\u0000\u040a\u040c" +
                    "\u00036\u001b\u0000\u040b\u040a\u0001\u0000\u0000\u0000\u040b\u040c\u0001" +
                    "\u0000\u0000\u0000\u040c\u040e\u0001\u0000\u0000\u0000\u040d\u040f\u0003" +
                    "@ \u0000\u040e\u040d\u0001\u0000\u0000\u0000\u040e\u040f\u0001\u0000\u0000" +
                    "\u0000\u040f\u04f3\u0001\u0000\u0000\u0000\u0410\u0412\u0007\u0007\u0000" +
                    "\u0000\u0411\u0413\u0005\u00e6\u0000\u0000\u0412\u0411\u0001\u0000\u0000" +
                    "\u0000\u0412\u0413\u0001\u0000\u0000\u0000\u0413\u0414\u0001\u0000\u0000" +
                    "\u0000\u0414\u04f3\u00030\u0018\u0000\u0415\u0416\u00055\u0000\u0000\u0416" +
                    "\u0417\u0005\u00ca\u0000\u0000\u0417\u0418\u0003:\u001d\u0000\u0418\u0419" +
                    "\u0003d2\u0000\u0419\u041a\u0005\u009b\u0000\u0000\u041a\u041b\u0003\u0182" +
                    "\u00c1\u0000\u041b\u04f3\u0001\u0000\u0000\u0000\u041c\u041d\u00055\u0000" +
                    "\u0000\u041d\u041e\u0005\u00ca\u0000\u0000\u041e\u041f\u0005\u0120\u0000" +
                    "\u0000\u041f\u0420\u0003d2\u0000\u0420\u0421\u0005\u009b\u0000\u0000\u0421" +
                    "\u0422\u0003\u0182\u00c1\u0000\u0422\u04f3\u0001\u0000\u0000\u0000\u0423" +
                    "\u0424\u0005\u00ee\u0000\u0000\u0424\u0425\u0005\u0120\u0000\u0000\u0425" +
                    "\u04f3\u0003d2\u0000\u0426\u0427\u0005\u00ee\u0000\u0000\u0427\u0428\u0005" +
                    "~\u0000\u0000\u0428\u04f3\u0003d2\u0000\u0429\u0431\u0005\u00ee\u0000" +
                    "\u0000\u042a\u0432\u0003\u0180\u00c0\u0000\u042b\u042d\t\u0000\u0000\u0000" +
                    "\u042c\u042b\u0001\u0000\u0000\u0000\u042d\u0430\u0001\u0000\u0000\u0000" +
                    "\u042e\u042f\u0001\u0000\u0000\u0000\u042e\u042c\u0001\u0000\u0000\u0000" +
                    "\u042f\u0432\u0001\u0000\u0000\u0000\u0430\u042e\u0001\u0000\u0000\u0000" +
                    "\u0431\u042a\u0001\u0000\u0000\u0000\u0431\u042e\u0001\u0000\u0000\u0000" +
                    "\u0432\u04f3\u0001\u0000\u0000\u0000\u0433\u0435\u0005\"\u0000\u0000\u0434" +
                    "\u0436\u0005\u00a1\u0000\u0000\u0435\u0434\u0001\u0000\u0000\u0000\u0435" +
                    "\u0436\u0001\u0000\u0000\u0000\u0436\u0437\u0001\u0000\u0000\u0000\u0437" +
                    "\u0438\u0005\u0120\u0000\u0000\u0438\u043b\u0003d2\u0000\u0439\u043a\u0005" +
                    "\u00cd\u0000\u0000\u043a\u043c\u0003J%\u0000\u043b\u0439\u0001\u0000\u0000" +
                    "\u0000\u043b\u043c\u0001\u0000\u0000\u0000\u043c\u0441\u0001\u0000\u0000" +
                    "\u0000\u043d\u043f\u0005\u0015\u0000\u0000\u043e\u043d\u0001\u0000\u0000" +
                    "\u0000\u043e\u043f\u0001\u0000\u0000\u0000\u043f\u0440\u0001\u0000\u0000" +
                    "\u0000\u0440\u0442\u00030\u0018\u0000\u0441\u043e\u0001\u0000\u0000\u0000" +
                    "\u0441\u0442\u0001\u0000\u0000\u0000\u0442\u04f3\u0001\u0000\u0000\u0000" +
                    "\u0443\u0444\u0005\u013e\u0000\u0000\u0444\u0447\u0005\u0120\u0000\u0000" +
                    "\u0445\u0446\u0005\u008a\u0000\u0000\u0446\u0448\u0005j\u0000\u0000\u0447" +
                    "\u0445\u0001\u0000\u0000\u0000\u0447\u0448\u0001\u0000\u0000\u0000\u0448" +
                    "\u0449\u0001\u0000\u0000\u0000\u0449\u04f3\u0003d2\u0000\u044a\u044b\u0005" +
                    ",\u0000\u0000\u044b\u04f3\u0005\"\u0000\u0000\u044c\u044d\u0005\u00a9" +
                    "\u0000\u0000\u044d\u044f\u0005H\u0000\u0000\u044e\u0450\u0005\u00aa\u0000" +
                    "\u0000\u044f\u044e\u0001\u0000\u0000\u0000\u044f\u0450\u0001\u0000\u0000" +
                    "\u0000\u0450\u0451\u0001\u0000\u0000\u0000\u0451\u0452\u0005\u0093\u0000" +
                    "\u0000\u0452\u0454\u0003\u0180\u00c0\u0000\u0453\u0455\u0005\u00d6\u0000" +
                    "\u0000\u0454\u0453\u0001\u0000\u0000\u0000\u0454\u0455\u0001\u0000\u0000" +
                    "\u0000\u0455\u0456\u0001\u0000\u0000\u0000\u0456\u0457\u0005\u009a\u0000" +
                    "\u0000\u0457\u0458\u0005\u0120\u0000\u0000\u0458\u045a\u0003d2\u0000\u0459" +
                    "\u045b\u00036\u001b\u0000\u045a\u0459\u0001\u0000\u0000\u0000\u045a\u045b" +
                    "\u0001\u0000\u0000\u0000\u045b\u04f3\u0001\u0000\u0000\u0000\u045c\u045d" +
                    "\u0005\u0139\u0000\u0000\u045d\u045e\u0005\u0120\u0000\u0000\u045e\u0460" +
                    "\u0003d2\u0000\u045f\u0461\u00036\u001b\u0000\u0460\u045f\u0001\u0000" +
                    "\u0000\u0000\u0460\u0461\u0001\u0000\u0000\u0000\u0461\u04f3\u0001\u0000" +
                    "\u0000\u0000\u0462\u0464\u0005\u00bc\u0000\u0000\u0463\u0462\u0001\u0000" +
                    "\u0000\u0000\u0463\u0464\u0001\u0000\u0000\u0000\u0464\u0465\u0001\u0000" +
                    "\u0000\u0000\u0465\u0466\u0005\u00f0\u0000\u0000\u0466\u0467\u0005\u0120" +
                    "\u0000\u0000\u0467\u046a\u0003d2\u0000\u0468\u0469\u0007\t\u0000\u0000" +
                    "\u0469\u046b\u0005\u00d9\u0000\u0000\u046a\u0468\u0001\u0000\u0000\u0000" +
                    "\u046a\u046b\u0001\u0000\u0000\u0000\u046b\u04f3\u0001\u0000\u0000\u0000" +
                    "\u046c\u046d\u0007\n\u0000\u0000\u046d\u0471\u0003\u0174\u00ba\u0000\u046e" +
                    "\u0470\t\u0000\u0000\u0000\u046f\u046e\u0001\u0000\u0000\u0000\u0470\u0473" +
                    "\u0001\u0000\u0000\u0000\u0471\u0472\u0001\u0000\u0000\u0000\u0471\u046f" +
                    "\u0001\u0000\u0000\u0000\u0472\u04f3\u0001\u0000\u0000\u0000\u0473\u0471" +
                    "\u0001\u0000\u0000\u0000\u0474\u0475\u0005\u0109\u0000\u0000\u0475\u0476" +
                    "\u00051\u0000\u0000\u0476\u04f3\u0003\u0174\u00ba\u0000\u0477\u0478\u0005" +
                    "\u0109\u0000\u0000\u0478\u047c\u0005\u00f9\u0000\u0000\u0479\u047b\t\u0000" +
                    "\u0000\u0000\u047a\u0479\u0001\u0000\u0000\u0000\u047b\u047e\u0001\u0000" +
                    "\u0000\u0000\u047c\u047d\u0001\u0000\u0000\u0000\u047c\u047a\u0001\u0000" +
                    "\u0000\u0000\u047d\u04f3\u0001\u0000\u0000\u0000\u047e\u047c\u0001\u0000" +
                    "\u0000\u0000\u047f\u0480\u0005\u0109\u0000\u0000\u0480\u0481\u0005\u0128" +
                    "\u0000\u0000\u0481\u0482\u0005\u015b\u0000\u0000\u0482\u04f3\u0003\u012c" +
                    "\u0096\u0000\u0483\u0484\u0005\u0109\u0000\u0000\u0484\u0485\u0005\u0128" +
                    "\u0000\u0000\u0485\u0486\u0005\u015b\u0000\u0000\u0486\u04f3\u0003\u001a" +
                    "\r\u0000\u0487\u0488\u0005\u0109\u0000\u0000\u0488\u0489\u0005\u0128\u0000" +
                    "\u0000\u0489\u048d\u0005\u015b\u0000\u0000\u048a\u048c\t\u0000\u0000\u0000" +
                    "\u048b\u048a\u0001\u0000\u0000\u0000\u048c\u048f\u0001\u0000\u0000\u0000" +
                    "\u048d\u048e\u0001\u0000\u0000\u0000\u048d\u048b\u0001\u0000\u0000\u0000" +
                    "\u048e\u04f3\u0001\u0000\u0000\u0000\u048f\u048d\u0001\u0000\u0000\u0000" +
                    "\u0490\u0491\u0005\u0109\u0000\u0000\u0491\u0492\u0007\u000b\u0000\u0000" +
                    "\u0492\u04f3\u0003\u008cF\u0000\u0493\u0494\u0005\u0109\u0000\u0000\u0494" +
                    "\u0495\u0007\u000b\u0000\u0000\u0495\u0496\u0005\u0002\u0000\u0000\u0496" +
                    "\u0497\u0003\u00f4z\u0000\u0497\u0498\u0005\u0003\u0000\u0000\u0498\u0499" +
                    "\u0005\u0161\u0000\u0000\u0499\u049a\u0005\u0002\u0000\u0000\u049a\u049b" +
                    "\u00030\u0018\u0000\u049b\u049c\u0005\u0003\u0000\u0000\u049c\u04f3\u0001" +
                    "\u0000\u0000\u0000\u049d\u049e\u0005\u0109\u0000\u0000\u049e\u049f\u0003" +
                    "\u001c\u000e\u0000\u049f\u04a0\u0005\u0161\u0000\u0000\u04a0\u04a1\u0003" +
                    "\u001e\u000f\u0000\u04a1\u04f3\u0001\u0000\u0000\u0000\u04a2\u04a3\u0005" +
                    "\u0109\u0000\u0000\u04a3\u04ab\u0003\u001c\u000e\u0000\u04a4\u04a8\u0005" +
                    "\u0161\u0000\u0000\u04a5\u04a7\t\u0000\u0000\u0000\u04a6\u04a5\u0001\u0000" +
                    "\u0000\u0000\u04a7\u04aa\u0001\u0000\u0000\u0000\u04a8\u04a9\u0001\u0000" +
                    "\u0000\u0000\u04a8\u04a6\u0001\u0000\u0000\u0000\u04a9\u04ac\u0001\u0000" +
                    "\u0000\u0000\u04aa\u04a8\u0001\u0000\u0000\u0000\u04ab\u04a4\u0001\u0000" +
                    "\u0000\u0000\u04ab\u04ac\u0001\u0000\u0000\u0000\u04ac\u04f3\u0001\u0000" +
                    "\u0000\u0000\u04ad\u04b1\u0005\u0109\u0000\u0000\u04ae\u04b0\t\u0000\u0000" +
                    "\u0000\u04af\u04ae\u0001\u0000\u0000\u0000\u04b0\u04b3\u0001\u0000\u0000" +
                    "\u0000\u04b1\u04b2\u0001\u0000\u0000\u0000\u04b1\u04af\u0001\u0000\u0000" +
                    "\u0000\u04b2\u04b4\u0001\u0000\u0000\u0000\u04b3\u04b1\u0001\u0000\u0000" +
                    "\u0000\u04b4\u04b5\u0005\u0161\u0000\u0000\u04b5\u04f3\u0003\u001e\u000f" +
                    "\u0000\u04b6\u04ba\u0005\u0109\u0000\u0000\u04b7\u04b9\t\u0000\u0000\u0000" +
                    "\u04b8\u04b7\u0001\u0000\u0000\u0000\u04b9\u04bc\u0001\u0000\u0000\u0000" +
                    "\u04ba\u04bb\u0001\u0000\u0000\u0000\u04ba\u04b8\u0001\u0000\u0000\u0000" +
                    "\u04bb\u04f3\u0001\u0000\u0000\u0000\u04bc\u04ba\u0001\u0000\u0000\u0000" +
                    "\u04bd\u04be\u0005\u00f3\u0000\u0000\u04be\u04f3\u0003\u001c\u000e\u0000" +
                    "\u04bf\u04c3\u0005\u00f3\u0000\u0000\u04c0\u04c2\t\u0000\u0000\u0000\u04c1" +
                    "\u04c0\u0001\u0000\u0000\u0000\u04c2\u04c5\u0001\u0000\u0000\u0000\u04c3" +
                    "\u04c4\u0001\u0000\u0000\u0000\u04c3\u04c1\u0001\u0000\u0000\u0000\u04c4" +
                    "\u04f3\u0001\u0000\u0000\u0000\u04c5\u04c3\u0001\u0000\u0000\u0000\u04c6" +
                    "\u04c7\u0005=\u0000\u0000\u04c7\u04cb\u0005\u0090\u0000\u0000\u04c8\u04c9" +
                    "\u0005\u008a\u0000\u0000\u04c9\u04ca\u0005\u00c4\u0000\u0000\u04ca\u04cc" +
                    "\u0005j\u0000\u0000\u04cb\u04c8\u0001\u0000\u0000\u0000\u04cb\u04cc\u0001" +
                    "\u0000\u0000\u0000\u04cc\u04cd\u0001\u0000\u0000\u0000\u04cd\u04ce\u0003" +
                    "\u0174\u00ba\u0000\u04ce\u04d0\u0005\u00ca\u0000\u0000\u04cf\u04d1\u0005" +
                    "\u0120\u0000\u0000\u04d0\u04cf\u0001\u0000\u0000\u0000\u04d0\u04d1\u0001" +
                    "\u0000\u0000\u0000\u04d1\u04d2\u0001\u0000\u0000\u0000\u04d2\u04d5\u0003" +
                    "d2\u0000\u04d3\u04d4\u0005\u0148\u0000\u0000\u04d4\u04d6\u0003\u0174\u00ba" +
                    "\u0000\u04d5\u04d3\u0001\u0000\u0000\u0000\u04d5\u04d6\u0001\u0000\u0000" +
                    "\u0000\u04d6\u04d7\u0001\u0000\u0000\u0000\u04d7\u04d8\u0005\u0002\u0000" +
                    "\u0000\u04d8\u04d9\u0003\u00f8|\u0000\u04d9\u04dc\u0005\u0003\u0000\u0000" +
                    "\u04da\u04db\u0005\u00cd\u0000\u0000\u04db\u04dd\u0003J%\u0000\u04dc\u04da" +
                    "\u0001\u0000\u0000\u0000\u04dc\u04dd\u0001\u0000\u0000\u0000\u04dd\u04f3" +
                    "\u0001\u0000\u0000\u0000\u04de\u04df\u0005a\u0000\u0000\u04df\u04e2\u0005" +
                    "\u0090\u0000\u0000\u04e0\u04e1\u0005\u008a\u0000\u0000\u04e1\u04e3\u0005" +
                    "j\u0000\u0000\u04e2\u04e0\u0001\u0000\u0000\u0000\u04e2\u04e3\u0001\u0000" +
                    "\u0000\u0000\u04e3\u04e4\u0001\u0000\u0000\u0000\u04e4\u04e5\u0003\u0174" +
                    "\u00ba\u0000\u04e5\u04e7\u0005\u00ca\u0000\u0000\u04e6\u04e8\u0005\u0120" +
                    "\u0000\u0000\u04e7\u04e6\u0001\u0000\u0000\u0000\u04e7\u04e8\u0001\u0000" +
                    "\u0000\u0000\u04e8\u04e9\u0001\u0000\u0000\u0000\u04e9\u04ea\u0003d2\u0000" +
                    "\u04ea\u04f3\u0001\u0000\u0000\u0000\u04eb\u04ef\u0003 \u0010\u0000\u04ec" +
                    "\u04ee\t\u0000\u0000\u0000\u04ed\u04ec\u0001\u0000\u0000\u0000\u04ee\u04f1" +
                    "\u0001\u0000\u0000\u0000\u04ef\u04f0\u0001\u0000\u0000\u0000\u04ef\u04ed" +
                    "\u0001\u0000\u0000\u0000\u04f0\u04f3\u0001\u0000\u0000\u0000\u04f1\u04ef" +
                    "\u0001\u0000\u0000\u0000\u04f2\u01a7\u0001\u0000\u0000\u0000\u04f2\u01a8" +
                    "\u0001\u0000\u0000\u0000\u04f2\u01aa\u0001\u0000\u0000\u0000\u04f2\u01ad" +
                    "\u0001\u0000\u0000\u0000\u04f2\u01af\u0001\u0000\u0000\u0000\u04f2\u01b3" +
                    "\u0001\u0000\u0000\u0000\u04f2\u01b9\u0001\u0000\u0000\u0000\u04f2\u01cb" +
                    "\u0001\u0000\u0000\u0000\u04f2\u01d2\u0001\u0000\u0000\u0000\u04f2\u01d8" +
                    "\u0001\u0000\u0000\u0000\u04f2\u01e2\u0001\u0000\u0000\u0000\u04f2\u01ee" +
                    "\u0001\u0000\u0000\u0000\u04f2\u01ff\u0001\u0000\u0000\u0000\u04f2\u0214" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0225\u0001\u0000\u0000\u0000\u04f2\u0236" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0241\u0001\u0000\u0000\u0000\u04f2\u0248" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0251\u0001\u0000\u0000\u0000\u04f2\u025a" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0267\u0001\u0000\u0000\u0000\u04f2\u0272" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0279\u0001\u0000\u0000\u0000\u04f2\u0280" +
                    "\u0001\u0000\u0000\u0000\u04f2\u028b\u0001\u0000\u0000\u0000\u04f2\u0296" +
                    "\u0001\u0000\u0000\u0000\u04f2\u02a5\u0001\u0000\u0000\u0000\u04f2\u02b1" +
                    "\u0001\u0000\u0000\u0000\u04f2\u02bf\u0001\u0000\u0000\u0000\u04f2\u02c9" +
                    "\u0001\u0000\u0000\u0000\u04f2\u02d7\u0001\u0000\u0000\u0000\u04f2\u02df" +
                    "\u0001\u0000\u0000\u0000\u04f2\u02f2\u0001\u0000\u0000\u0000\u04f2\u02fb" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0301\u0001\u0000\u0000\u0000\u04f2\u030b" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0312\u0001\u0000\u0000\u0000\u04f2\u0335" +
                    "\u0001\u0000\u0000\u0000\u04f2\u034b\u0001\u0000\u0000\u0000\u04f2\u0353" +
                    "\u0001\u0000\u0000\u0000\u04f2\u036f\u0001\u0000\u0000\u0000\u04f2\u0379" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0388\u0001\u0000\u0000\u0000\u04f2\u0390" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0395\u0001\u0000\u0000\u0000\u04f2\u03a1" +
                    "\u0001\u0000\u0000\u0000\u04f2\u03ad\u0001\u0000\u0000\u0000\u04f2\u03b6" +
                    "\u0001\u0000\u0000\u0000\u04f2\u03be\u0001\u0000\u0000\u0000\u04f2\u03ca" +
                    "\u0001\u0000\u0000\u0000\u04f2\u03d0\u0001\u0000\u0000\u0000\u04f2\u03e2" +
                    "\u0001\u0000\u0000\u0000\u04f2\u03ea\u0001\u0000\u0000\u0000\u04f2\u03ed" +
                    "\u0001\u0000\u0000\u0000\u04f2\u03f5\u0001\u0000\u0000\u0000\u04f2\u03fb" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0402\u0001\u0000\u0000\u0000\u04f2\u0410" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0415\u0001\u0000\u0000\u0000\u04f2\u041c" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0423\u0001\u0000\u0000\u0000\u04f2\u0426" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0429\u0001\u0000\u0000\u0000\u04f2\u0433" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0443\u0001\u0000\u0000\u0000\u04f2\u044a" +
                    "\u0001\u0000\u0000\u0000\u04f2\u044c\u0001\u0000\u0000\u0000\u04f2\u045c" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0463\u0001\u0000\u0000\u0000\u04f2\u046c" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0474\u0001\u0000\u0000\u0000\u04f2\u0477" +
                    "\u0001\u0000\u0000\u0000\u04f2\u047f\u0001\u0000\u0000\u0000\u04f2\u0483" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0487\u0001\u0000\u0000\u0000\u04f2\u0490" +
                    "\u0001\u0000\u0000\u0000\u04f2\u0493\u0001\u0000\u0000\u0000\u04f2\u049d" +
                    "\u0001\u0000\u0000\u0000\u04f2\u04a2\u0001\u0000\u0000\u0000\u04f2\u04ad" +
                    "\u0001\u0000\u0000\u0000\u04f2\u04b6\u0001\u0000\u0000\u0000\u04f2\u04bd" +
                    "\u0001\u0000\u0000\u0000\u04f2\u04bf\u0001\u0000\u0000\u0000\u04f2\u04c6" +
                    "\u0001\u0000\u0000\u0000\u04f2\u04de\u0001\u0000\u0000\u0000\u04f2\u04eb" +
                    "\u0001\u0000\u0000\u0000\u04f3\u000f\u0001\u0000\u0000\u0000\u04f4\u04f5" +
                    "\u0005\u0131\u0000\u0000\u04f5\u04f6\u0005\u008c\u0000\u0000\u04f6\u04f9" +
                    "\u0003\u0014\n\u0000\u04f7\u04f8\u0005\u009a\u0000\u0000\u04f8\u04fa\u0003" +
                    "\u00f4z\u0000\u04f9\u04f7\u0001\u0000\u0000\u0000\u04f9\u04fa\u0001\u0000" +
                    "\u0000\u0000\u04fa\u04fc\u0001\u0000\u0000\u0000\u04fb\u04fd\u0003\u0012" +
                    "\t\u0000\u04fc\u04fb\u0001\u0000\u0000\u0000\u04fc\u04fd\u0001\u0000\u0000" +
                    "\u0000\u04fd\u0011\u0001\u0000\u0000\u0000\u04fe\u04ff\u0005\u0148\u0000" +
                    "\u0000\u04ff\u0500\u0005\u0002\u0000\u0000\u0500\u0501\u0003\u0102\u0081" +
                    "\u0000\u0501\u0502\u0005\u0003\u0000\u0000\u0502\u0506\u0001\u0000\u0000" +
                    "\u0000\u0503\u0504\u0005\u0148\u0000\u0000\u0504\u0506\u0003\u0102\u0081" +
                    "\u0000\u0505\u04fe\u0001\u0000\u0000\u0000\u0505\u0503\u0001\u0000\u0000" +
                    "\u0000\u0506\u0013\u0001\u0000\u0000\u0000\u0507\u050a\u0003\u0180\u00c0" +
                    "\u0000\u0508\u050a\u0003\u00f6{\u0000\u0509\u0507\u0001\u0000\u0000\u0000" +
                    "\u0509\u0508\u0001\u0000\u0000\u0000\u050a\u0015\u0001\u0000\u0000\u0000" +
                    "\u050b\u050e\u0003\u0122\u0091\u0000\u050c\u050e\u0003\u00f6{\u0000\u050d" +
                    "\u050b\u0001\u0000\u0000\u0000\u050d\u050c\u0001\u0000\u0000\u0000\u050e" +
                    "\u0511\u0001\u0000\u0000\u0000\u050f\u0510\u0005\u0015\u0000\u0000\u0510" +
                    "\u0512\u0003\u0170\u00b8\u0000\u0511\u050f\u0001\u0000\u0000\u0000\u0511" +
                    "\u0512\u0001\u0000\u0000\u0000\u0512\u0017\u0001\u0000\u0000\u0000\u0513" +
                    "\u0518\u0003\u0016\u000b\u0000\u0514\u0515\u0005\u0004\u0000\u0000\u0515" +
                    "\u0517\u0003\u0016\u000b\u0000\u0516\u0514\u0001\u0000\u0000\u0000\u0517" +
                    "\u051a\u0001\u0000\u0000\u0000\u0518\u0516\u0001\u0000\u0000\u0000\u0518" +
                    "\u0519\u0001\u0000\u0000\u0000\u0519\u0019\u0001\u0000\u0000\u0000\u051a" +
                    "\u0518\u0001\u0000\u0000\u0000\u051b\u051e\u0003\u0180\u00c0\u0000\u051c" +
                    "\u051e\u0005\u00aa\u0000\u0000\u051d\u051b\u0001\u0000\u0000\u0000\u051d" +
                    "\u051c\u0001\u0000\u0000\u0000\u051e\u001b\u0001\u0000\u0000\u0000\u051f" +
                    "\u0520\u0003\u0178\u00bc\u0000\u0520\u001d\u0001\u0000\u0000\u0000\u0521" +
                    "\u0522\u0003\u017a\u00bd\u0000\u0522\u001f\u0001\u0000\u0000\u0000\u0523" +
                    "\u0524\u0005=\u0000\u0000\u0524\u05cc\u0005\u00f9\u0000\u0000\u0525\u0526" +
                    "\u0005a\u0000\u0000\u0526\u05cc\u0005\u00f9\u0000\u0000\u0527\u0529\u0005" +
                    "\u0082\u0000\u0000\u0528\u052a\u0005\u00f9\u0000\u0000\u0529\u0528\u0001" +
                    "\u0000\u0000\u0000\u0529\u052a\u0001\u0000\u0000\u0000\u052a\u05cc\u0001" +
                    "\u0000\u0000\u0000\u052b\u052d\u0005\u00f6\u0000\u0000\u052c\u052e\u0005" +
                    "\u00f9\u0000\u0000\u052d\u052c\u0001\u0000\u0000\u0000\u052d\u052e\u0001" +
                    "\u0000\u0000\u0000\u052e\u05cc\u0001\u0000\u0000\u0000\u052f\u0530\u0005" +
                    "\u010d\u0000\u0000\u0530\u05cc\u0005\u0082\u0000\u0000\u0531\u0532\u0005" +
                    "\u010d\u0000\u0000\u0532\u0534\u0005\u00f9\u0000\u0000\u0533\u0535\u0005" +
                    "\u0082\u0000\u0000\u0534\u0533\u0001\u0000\u0000\u0000\u0534\u0535\u0001" +
                    "\u0000\u0000\u0000\u0535\u05cc\u0001\u0000\u0000\u0000\u0536\u0537\u0005" +
                    "\u010d\u0000\u0000\u0537\u05cc\u0005\u00e2\u0000\u0000\u0538\u0539\u0005" +
                    "\u010d\u0000\u0000\u0539\u05cc\u0005\u00fa\u0000\u0000\u053a\u053b\u0005" +
                    "\u010d\u0000\u0000\u053b\u053c\u0005@\u0000\u0000\u053c\u05cc\u0005\u00fa" +
                    "\u0000\u0000\u053d\u053e\u0005l\u0000\u0000\u053e\u05cc\u0005\u0120\u0000" +
                    "\u0000\u053f\u0540\u0005\u008d\u0000\u0000\u0540\u05cc\u0005\u0120\u0000" +
                    "\u0000\u0541\u0542\u0005\u010d\u0000\u0000\u0542\u05cc\u00058\u0000\u0000" +
                    "\u0543\u0544\u0005\u010d\u0000\u0000\u0544\u0545\u0005=\u0000\u0000\u0545" +
                    "\u05cc\u0005\u0120\u0000\u0000\u0546\u0547\u0005\u010d\u0000\u0000\u0547" +
                    "\u05cc\u0005\u0135\u0000\u0000\u0548\u0549\u0005\u010d\u0000\u0000\u0549" +
                    "\u05cc\u0005\u0091\u0000\u0000\u054a\u054b\u0005\u010d\u0000\u0000\u054b" +
                    "\u05cc\u0005\u00ad\u0000\u0000\u054c\u054d\u0005=\u0000\u0000\u054d\u05cc" +
                    "\u0005\u0090\u0000\u0000\u054e\u054f\u0005a\u0000\u0000\u054f\u05cc\u0005" +
                    "\u0090\u0000\u0000\u0550\u0551\u0005\f\u0000\u0000\u0551\u05cc\u0005\u0090" +
                    "\u0000\u0000\u0552\u0553\u0005\u00ac\u0000\u0000\u0553\u05cc\u0005\u0120" +
                    "\u0000\u0000\u0554\u0555\u0005\u00ac\u0000\u0000\u0555\u05cc\u0005J\u0000" +
                    "\u0000\u0556\u0557\u0005\u0142\u0000\u0000\u0557\u05cc\u0005\u0120\u0000" +
                    "\u0000\u0558\u0559\u0005\u0142\u0000\u0000\u0559\u05cc\u0005J\u0000\u0000" +
                    "\u055a\u055b\u0005=\u0000\u0000\u055b\u055c\u0005\u0125\u0000\u0000\u055c" +
                    "\u05cc\u0005\u00b0\u0000\u0000\u055d\u055e\u0005a\u0000\u0000\u055e\u055f" +
                    "\u0005\u0125\u0000\u0000\u055f\u05cc\u0005\u00b0\u0000\u0000\u0560\u0561" +
                    "\u0005\f\u0000\u0000\u0561\u0562\u0005\u0120\u0000\u0000\u0562\u0563\u0003" +
                    "\u00fc~\u0000\u0563\u0564\u0005\u00c4\u0000\u0000\u0564\u0565\u0005.\u0000" +
                    "\u0000\u0565\u05cc\u0001\u0000\u0000\u0000\u0566\u0567\u0005\f\u0000\u0000" +
                    "\u0567\u0568\u0005\u0120\u0000\u0000\u0568\u0569\u0003\u00fc~\u0000\u0569" +
                    "\u056a\u0005.\u0000\u0000\u056a\u056b\u0005 \u0000\u0000\u056b\u05cc\u0001" +
                    "\u0000\u0000\u0000\u056c\u056d\u0005\f\u0000\u0000\u056d\u056e\u0005\u0120" +
                    "\u0000\u0000\u056e\u056f\u0003\u00fc~\u0000\u056f\u0570\u0005\u00c4\u0000" +
                    "\u0000\u0570\u0571\u0005\u0113\u0000\u0000\u0571\u05cc\u0001\u0000\u0000" +
                    "\u0000\u0572\u0573\u0005\f\u0000\u0000\u0573\u0574\u0005\u0120\u0000\u0000" +
                    "\u0574\u0575\u0003\u00fc~\u0000\u0575\u0576\u0005\u010f\u0000\u0000\u0576" +
                    "\u0577\u0005 \u0000\u0000\u0577\u05cc\u0001\u0000\u0000\u0000\u0578\u0579" +
                    "\u0005\f\u0000\u0000\u0579\u057a\u0005\u0120\u0000\u0000\u057a\u057b\u0003" +
                    "\u00fc~\u0000\u057b\u057c\u0005\u00c4\u0000\u0000\u057c\u057d\u0005\u010f" +
                    "\u0000\u0000\u057d\u05cc\u0001\u0000\u0000\u0000\u057e\u057f\u0005\f\u0000" +
                    "\u0000\u057f\u0580\u0005\u0120\u0000\u0000\u0580\u0581\u0003\u00fc~\u0000" +
                    "\u0581\u0582\u0005\u00c4\u0000\u0000\u0582\u0583\u0005\u0117\u0000\u0000" +
                    "\u0583\u0584\u0005\u0015\u0000\u0000\u0584\u0585\u0005[\u0000\u0000\u0585" +
                    "\u05cc\u0001\u0000\u0000\u0000\u0586\u0587\u0005\f\u0000\u0000\u0587\u0588" +
                    "\u0005\u0120\u0000\u0000\u0588\u0589\u0003\u00fc~\u0000\u0589\u058a\u0005" +
                    "\u0109\u0000\u0000\u058a\u058b\u0005\u010f\u0000\u0000\u058b\u058c\u0005" +
                    "\u00ab\u0000\u0000\u058c\u05cc\u0001\u0000\u0000\u0000\u058d\u058e\u0005" +
                    "\f\u0000\u0000\u058e\u058f\u0005\u0120\u0000\u0000\u058f\u0590\u0003\u00fc" +
                    "~\u0000\u0590\u0591\u0005h\u0000\u0000\u0591\u0592\u0005\u00d7\u0000\u0000" +
                    "\u0592\u05cc\u0001\u0000\u0000\u0000\u0593\u0594\u0005\f\u0000\u0000\u0594" +
                    "\u0595\u0005\u0120\u0000\u0000\u0595\u0596\u0003\u00fc~\u0000\u0596\u0597" +
                    "\u0005\u0013\u0000\u0000\u0597\u0598\u0005\u00d7\u0000\u0000\u0598\u05cc" +
                    "\u0001\u0000\u0000\u0000\u0599\u059a\u0005\f\u0000\u0000\u059a\u059b\u0005" +
                    "\u0120\u0000\u0000\u059b\u059c\u0003\u00fc~\u0000\u059c\u059d\u0005\u013c" +
                    "\u0000\u0000\u059d\u059e\u0005\u00d7\u0000\u0000\u059e\u05cc\u0001\u0000" +
                    "\u0000\u0000\u059f\u05a0\u0005\f\u0000\u0000\u05a0\u05a1\u0005\u0120\u0000" +
                    "\u0000\u05a1\u05a2\u0003\u00fc~\u0000\u05a2\u05a3\u0005\u0132\u0000\u0000" +
                    "\u05a3\u05cc\u0001\u0000\u0000\u0000\u05a4\u05a5\u0005\f\u0000\u0000\u05a5" +
                    "\u05a6\u0005\u0120\u0000\u0000\u05a6\u05a8\u0003\u00fc~\u0000\u05a7\u05a9" +
                    "\u00036\u001b\u0000\u05a8\u05a7\u0001\u0000\u0000\u0000\u05a8\u05a9\u0001" +
                    "\u0000\u0000\u0000\u05a9\u05aa\u0001\u0000\u0000\u0000\u05aa\u05ab\u0005" +
                    "7\u0000\u0000\u05ab\u05cc\u0001\u0000\u0000\u0000\u05ac\u05ad\u0005\f" +
                    "\u0000\u0000\u05ad\u05ae\u0005\u0120\u0000\u0000\u05ae\u05b0\u0003\u00fc" +
                    "~\u0000\u05af\u05b1\u00036\u001b\u0000\u05b0\u05af\u0001\u0000\u0000\u0000" +
                    "\u05b0\u05b1\u0001\u0000\u0000\u0000\u05b1\u05b2\u0001\u0000\u0000\u0000" +
                    "\u05b2\u05b3\u0005:\u0000\u0000\u05b3\u05cc\u0001\u0000\u0000\u0000\u05b4" +
                    "\u05b5\u0005\f\u0000\u0000\u05b5\u05b6\u0005\u0120\u0000\u0000\u05b6\u05b8" +
                    "\u0003\u00fc~\u0000\u05b7\u05b9\u00036\u001b\u0000\u05b8\u05b7\u0001\u0000" +
                    "\u0000\u0000\u05b8\u05b9\u0001\u0000\u0000\u0000\u05b9\u05ba\u0001\u0000" +
                    "\u0000\u0000\u05ba\u05bb\u0005\u0109\u0000\u0000\u05bb\u05bc\u0005t\u0000" +
                    "\u0000\u05bc\u05cc\u0001\u0000\u0000\u0000\u05bd\u05be\u0005\f\u0000\u0000" +
                    "\u05be\u05bf\u0005\u0120\u0000\u0000\u05bf\u05c1\u0003\u00fc~\u0000\u05c0" +
                    "\u05c2\u00036\u001b\u0000\u05c1\u05c0\u0001\u0000\u0000\u0000\u05c1\u05c2" +
                    "\u0001\u0000\u0000\u0000\u05c2\u05c3\u0001\u0000\u0000\u0000\u05c3\u05c4" +
                    "\u0005\u00f2\u0000\u0000\u05c4\u05c5\u00054\u0000\u0000\u05c5\u05cc\u0001" +
                    "\u0000\u0000\u0000\u05c6\u05c7\u0005\u0115\u0000\u0000\u05c7\u05cc\u0005" +
                    "\u0134\u0000\u0000\u05c8\u05cc\u00056\u0000\u0000\u05c9\u05cc\u0005\u00fb" +
                    "\u0000\u0000\u05ca\u05cc\u0005Z\u0000\u0000\u05cb\u0523\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0525\u0001\u0000\u0000\u0000\u05cb\u0527\u0001\u0000\u0000" +
                    "\u0000\u05cb\u052b\u0001\u0000\u0000\u0000\u05cb\u052f\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0531\u0001\u0000\u0000\u0000\u05cb\u0536\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0538\u0001\u0000\u0000\u0000\u05cb\u053a\u0001\u0000\u0000" +
                    "\u0000\u05cb\u053d\u0001\u0000\u0000\u0000\u05cb\u053f\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0541\u0001\u0000\u0000\u0000\u05cb\u0543\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0546\u0001\u0000\u0000\u0000\u05cb\u0548\u0001\u0000\u0000" +
                    "\u0000\u05cb\u054a\u0001\u0000\u0000\u0000\u05cb\u054c\u0001\u0000\u0000" +
                    "\u0000\u05cb\u054e\u0001\u0000\u0000\u0000\u05cb\u0550\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0552\u0001\u0000\u0000\u0000\u05cb\u0554\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0556\u0001\u0000\u0000\u0000\u05cb\u0558\u0001\u0000\u0000" +
                    "\u0000\u05cb\u055a\u0001\u0000\u0000\u0000\u05cb\u055d\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0560\u0001\u0000\u0000\u0000\u05cb\u0566\u0001\u0000\u0000" +
                    "\u0000\u05cb\u056c\u0001\u0000\u0000\u0000\u05cb\u0572\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0578\u0001\u0000\u0000\u0000\u05cb\u057e\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0586\u0001\u0000\u0000\u0000\u05cb\u058d\u0001\u0000\u0000" +
                    "\u0000\u05cb\u0593\u0001\u0000\u0000\u0000\u05cb\u0599\u0001\u0000\u0000" +
                    "\u0000\u05cb\u059f\u0001\u0000\u0000\u0000\u05cb\u05a4\u0001\u0000\u0000" +
                    "\u0000\u05cb\u05ac\u0001\u0000\u0000\u0000\u05cb\u05b4\u0001\u0000\u0000" +
                    "\u0000\u05cb\u05bd\u0001\u0000\u0000\u0000\u05cb\u05c6\u0001\u0000\u0000" +
                    "\u0000\u05cb\u05c8\u0001\u0000\u0000\u0000\u05cb\u05c9\u0001\u0000\u0000" +
                    "\u0000\u05cb\u05ca\u0001\u0000\u0000\u0000\u05cc!\u0001\u0000\u0000\u0000" +
                    "\u05cd\u05cf\u0005=\u0000\u0000\u05ce\u05d0\u0005\u0125\u0000\u0000\u05cf" +
                    "\u05ce\u0001\u0000\u0000\u0000\u05cf\u05d0\u0001\u0000\u0000\u0000\u05d0" +
                    "\u05d2\u0001\u0000\u0000\u0000\u05d1\u05d3\u0005n\u0000\u0000\u05d2\u05d1" +
                    "\u0001\u0000\u0000\u0000\u05d2\u05d3\u0001\u0000\u0000\u0000\u05d3\u05d4" +
                    "\u0001\u0000\u0000\u0000\u05d4\u05d8\u0005\u0120\u0000\u0000\u05d5\u05d6" +
                    "\u0005\u008a\u0000\u0000\u05d6\u05d7\u0005\u00c4\u0000\u0000\u05d7\u05d9" +
                    "\u0005j\u0000\u0000\u05d8\u05d5\u0001\u0000\u0000\u0000\u05d8\u05d9\u0001" +
                    "\u0000\u0000\u0000\u05d9\u05da\u0001\u0000\u0000\u0000\u05da\u05db\u0003" +
                    "d2\u0000\u05db#\u0001\u0000\u0000\u0000\u05dc\u05dd\u0005=\u0000\u0000" +
                    "\u05dd\u05df\u0005\u00ce\u0000\u0000\u05de\u05dc\u0001\u0000\u0000\u0000" +
                    "\u05de\u05df\u0001\u0000\u0000\u0000\u05df\u05e0\u0001\u0000\u0000\u0000" +
                    "\u05e0\u05e1\u0005\u00f2\u0000\u0000\u05e1\u05e2\u0005\u0120\u0000\u0000" +
                    "\u05e2\u05e3\u0003d2\u0000\u05e3%\u0001\u0000\u0000\u0000\u05e4\u05e5" +
                    "\u0005-\u0000\u0000\u05e5\u05e6\u0005 \u0000\u0000\u05e6\u05e7\u0005\u0002" +
                    "\u0000\u0000\u05e7\u05e8\u0003\u00f4z\u0000\u05e8\u05e9\u0005\u0003\u0000" +
                    "\u0000\u05e9\'\u0001\u0000\u0000\u0000\u05ea\u05eb\u0005.\u0000\u0000" +
                    "\u05eb\u05ec\u0005 \u0000\u0000\u05ec\u05f0\u0003\u00d4j\u0000\u05ed\u05ee" +
                    "\u0005\u0113\u0000\u0000\u05ee\u05ef\u0005 \u0000\u0000\u05ef\u05f1\u0003" +
                    "\u00d8l\u0000\u05f0\u05ed\u0001\u0000\u0000\u0000\u05f0\u05f1\u0001\u0000" +
                    "\u0000\u0000\u05f1\u05f2\u0001\u0000\u0000\u0000\u05f2\u05f3\u0005\u009a" +
                    "\u0000\u0000\u05f3\u05f4\u0005\u017f\u0000\u0000\u05f4\u05f5\u0005\u001f" +
                    "\u0000\u0000\u05f5)\u0001\u0000\u0000\u0000\u05f6\u05f7\u0005\u010f\u0000" +
                    "\u0000\u05f7\u05f8\u0005 \u0000\u0000\u05f8\u05f9\u0003\u00d4j\u0000\u05f9" +
                    "\u05fc\u0005\u00ca\u0000\u0000\u05fa\u05fd\u0003V+\u0000\u05fb\u05fd\u0003" +
                    "X,\u0000\u05fc\u05fa\u0001\u0000\u0000\u0000\u05fc\u05fb\u0001\u0000\u0000" +
                    "\u0000\u05fd\u0601\u0001\u0000\u0000\u0000\u05fe\u05ff\u0005\u0117\u0000" +
                    "\u0000\u05ff\u0600\u0005\u0015\u0000\u0000\u0600\u0602\u0005[\u0000\u0000" +
                    "\u0601\u05fe\u0001\u0000\u0000\u0000\u0601\u0602\u0001\u0000\u0000\u0000" +
                    "\u0602+\u0001\u0000\u0000\u0000\u0603\u0604\u0005\u00ab\u0000\u0000\u0604" +
                    "\u0605\u0003\u0180\u00c0\u0000\u0605-\u0001\u0000\u0000\u0000\u0606\u0607" +
                    "\u00055\u0000\u0000\u0607\u0608\u0003\u0180\u00c0\u0000\u0608/\u0001\u0000" +
                    "\u0000\u0000\u0609\u060b\u0003B!\u0000\u060a\u0609\u0001\u0000\u0000\u0000" +
                    "\u060a\u060b\u0001\u0000\u0000\u0000\u060b\u060c\u0001\u0000\u0000\u0000" +
                    "\u060c\u060d\u0003l6\u0000\u060d\u060e\u0003h4\u0000\u060e1\u0001\u0000" +
                    "\u0000\u0000\u060f\u0610\u0005\u0095\u0000\u0000\u0610\u0612\u0005\u00d6" +
                    "\u0000\u0000\u0611\u0613\u0005\u0120\u0000\u0000\u0612\u0611\u0001\u0000" +
                    "\u0000\u0000\u0612\u0613\u0001\u0000\u0000\u0000\u0613\u0614\u0001\u0000" +
                    "\u0000\u0000\u0614\u061b\u0003d2\u0000\u0615\u0619\u00036\u001b\u0000" +
                    "\u0616\u0617\u0005\u008a\u0000\u0000\u0617\u0618\u0005\u00c4\u0000\u0000" +
                    "\u0618\u061a\u0005j\u0000\u0000\u0619\u0616\u0001\u0000\u0000\u0000\u0619" +
                    "\u061a\u0001\u0000\u0000\u0000\u061a\u061c\u0001\u0000\u0000\u0000\u061b" +
                    "\u0615\u0001\u0000\u0000\u0000\u061b\u061c\u0001\u0000\u0000\u0000\u061c" +
                    "\u0620\u0001\u0000\u0000\u0000\u061d\u061e\u0005 \u0000\u0000\u061e\u0621" +
                    "\u0005\u00bd\u0000\u0000\u061f\u0621\u0003\u00d4j\u0000\u0620\u061d\u0001" +
                    "\u0000\u0000\u0000\u0620\u061f\u0001\u0000\u0000\u0000\u0620\u0621\u0001" +
                    "\u0000\u0000\u0000\u0621\u065a\u0001\u0000\u0000\u0000\u0622\u0623\u0005" +
                    "\u0095\u0000\u0000\u0623\u0625\u0005\u009a\u0000\u0000\u0624\u0626\u0005" +
                    "\u0120\u0000\u0000\u0625\u0624\u0001\u0000\u0000\u0000\u0625\u0626\u0001" +
                    "\u0000\u0000\u0000\u0626\u0627\u0001\u0000\u0000\u0000\u0627\u0629\u0003" +
                    "d2\u0000\u0628\u062a\u00036\u001b\u0000\u0629\u0628\u0001\u0000\u0000" +
                    "\u0000\u0629\u062a\u0001\u0000\u0000\u0000\u062a\u062e\u0001\u0000\u0000" +
                    "\u0000\u062b\u062c\u0005\u008a\u0000\u0000\u062c\u062d\u0005\u00c4\u0000" +
                    "\u0000\u062d\u062f\u0005j\u0000\u0000\u062e\u062b\u0001\u0000\u0000\u0000" +
                    "\u062e\u062f\u0001\u0000\u0000\u0000\u062f\u0633\u0001\u0000\u0000\u0000" +
                    "\u0630\u0631\u0005 \u0000\u0000\u0631\u0634\u0005\u00bd\u0000\u0000\u0632" +
                    "\u0634\u0003\u00d4j\u0000\u0633\u0630\u0001\u0000\u0000\u0000\u0633\u0632" +
                    "\u0001\u0000\u0000\u0000\u0633\u0634\u0001\u0000\u0000\u0000\u0634\u065a" +
                    "\u0001\u0000\u0000\u0000\u0635\u0636\u0005\u0095\u0000\u0000\u0636\u0638" +
                    "\u0005\u009a\u0000\u0000\u0637\u0639\u0005\u0120\u0000\u0000\u0638\u0637" +
                    "\u0001\u0000\u0000\u0000\u0638\u0639\u0001\u0000\u0000\u0000\u0639\u063a" +
                    "\u0001\u0000\u0000\u0000\u063a\u063b\u0003d2\u0000\u063b\u063c\u0005\u00f2" +
                    "\u0000\u0000\u063c\u063d\u0003\u0090H\u0000\u063d\u065a\u0001\u0000\u0000" +
                    "\u0000\u063e\u063f\u0005\u0095\u0000\u0000\u063f\u0641\u0005\u00d6\u0000" +
                    "\u0000\u0640\u0642\u0005\u00aa\u0000\u0000\u0641\u0640\u0001\u0000\u0000" +
                    "\u0000\u0641\u0642\u0001\u0000\u0000\u0000\u0642\u0643\u0001\u0000\u0000" +
                    "\u0000\u0643\u0644\u0005\\\u0000\u0000\u0644\u0646\u0003\u0180\u00c0\u0000" +
                    "\u0645\u0647\u0003\u00f2y\u0000\u0646\u0645\u0001\u0000\u0000\u0000\u0646" +
                    "\u0647\u0001\u0000\u0000\u0000\u0647\u0649\u0001\u0000\u0000\u0000\u0648" +
                    "\u064a\u0003Z-\u0000\u0649\u0648\u0001\u0000\u0000\u0000\u0649\u064a\u0001" +
                    "\u0000\u0000\u0000\u064a\u065a\u0001\u0000\u0000\u0000\u064b\u064c\u0005" +
                    "\u0095\u0000\u0000\u064c\u064e\u0005\u00d6\u0000\u0000\u064d\u064f\u0005" +
                    "\u00aa\u0000\u0000\u064e\u064d\u0001\u0000\u0000\u0000\u064e\u064f\u0001" +
                    "\u0000\u0000\u0000\u064f\u0650\u0001\u0000\u0000\u0000\u0650\u0652\u0005" +
                    "\\\u0000\u0000\u0651\u0653\u0003\u0180\u00c0\u0000\u0652\u0651\u0001\u0000" +
                    "\u0000\u0000\u0652\u0653\u0001\u0000\u0000\u0000\u0653\u0654\u0001\u0000" +
                    "\u0000\u0000\u0654\u0657\u0003F#\u0000\u0655\u0656\u0005\u00cd\u0000\u0000" +
                    "\u0656\u0658\u0003J%\u0000\u0657\u0655\u0001\u0000\u0000\u0000\u0657\u0658" +
                    "\u0001\u0000\u0000\u0000\u0658\u065a\u0001\u0000\u0000\u0000\u0659\u060f" +
                    "\u0001\u0000\u0000\u0000\u0659\u0622\u0001\u0000\u0000\u0000\u0659\u0635" +
                    "\u0001\u0000\u0000\u0000\u0659\u063e\u0001\u0000\u0000\u0000\u0659\u064b" +
                    "\u0001\u0000\u0000\u0000\u065a3\u0001\u0000\u0000\u0000\u065b\u065d\u0003" +
                    "6\u001b\u0000\u065c\u065e\u0003,\u0016\u0000\u065d\u065c\u0001\u0000\u0000" +
                    "\u0000\u065d\u065e\u0001\u0000\u0000\u0000\u065e5\u0001\u0000\u0000\u0000" +
                    "\u065f\u0660\u0005\u00d7\u0000\u0000\u0660\u0661\u0005\u0002\u0000\u0000" +
                    "\u0661\u0666\u00038\u001c\u0000\u0662\u0663\u0005\u0004\u0000\u0000\u0663" +
                    "\u0665\u00038\u001c\u0000\u0664\u0662\u0001\u0000\u0000\u0000\u0665\u0668" +
                    "\u0001\u0000\u0000\u0000\u0666\u0664\u0001\u0000\u0000\u0000\u0666\u0667" +
                    "\u0001\u0000\u0000\u0000\u0667\u0669\u0001\u0000\u0000\u0000\u0668\u0666" +
                    "\u0001\u0000\u0000\u0000\u0669\u066a\u0005\u0003\u0000\u0000\u066a7\u0001" +
                    "\u0000\u0000\u0000\u066b\u066e\u0003\u0174\u00ba\u0000\u066c\u066d\u0005" +
                    "\u0161\u0000\u0000\u066d\u066f\u0003\u0122\u0091\u0000\u066e\u066c\u0001" +
                    "\u0000\u0000\u0000\u066e\u066f\u0001\u0000\u0000\u0000\u066f\u0675\u0001" +
                    "\u0000\u0000\u0000\u0670\u0671\u0003\u0174\u00ba\u0000\u0671\u0672\u0005" +
                    "\u0161\u0000\u0000\u0672\u0673\u0005T\u0000\u0000\u0673\u0675\u0001\u0000" +
                    "\u0000\u0000\u0674\u066b\u0001\u0000\u0000\u0000\u0674\u0670\u0001\u0000" +
                    "\u0000\u0000\u06759\u0001\u0000\u0000\u0000\u0676\u0677\u0007\f\u0000" +
                    "\u0000\u0677;\u0001\u0000\u0000\u0000\u0678\u0679\u0007\r\u0000\u0000" +
                    "\u0679=\u0001\u0000\u0000\u0000\u067a\u0681\u0003d2\u0000\u067b\u0681" +
                    "\u0003\u0180\u00c0\u0000\u067c\u0681\u0003\u0124\u0092\u0000\u067d\u0681" +
                    "\u0003\u0126\u0093\u0000\u067e\u0681\u0003\u0128\u0094\u0000\u067f\u0681" +
                    "\u0005\b\u0000\u0000\u0680\u067a\u0001\u0000\u0000\u0000\u0680\u067b\u0001" +
                    "\u0000\u0000\u0000\u0680\u067c\u0001\u0000\u0000\u0000\u0680\u067d\u0001" +
                    "\u0000\u0000\u0000\u0680\u067e\u0001\u0000\u0000\u0000\u0680\u067f\u0001" +
                    "\u0000\u0000\u0000\u0681?\u0001\u0000\u0000\u0000\u0682\u0687\u0003\u0170" +
                    "\u00b8\u0000\u0683\u0684\u0005\u0005\u0000\u0000\u0684\u0686\u0003\u0170" +
                    "\u00b8\u0000\u0685\u0683\u0001\u0000\u0000\u0000\u0686\u0689\u0001\u0000" +
                    "\u0000\u0000\u0687\u0685\u0001\u0000\u0000\u0000\u0687\u0688\u0001\u0000" +
                    "\u0000\u0000\u0688A\u0001\u0000\u0000\u0000\u0689\u0687\u0001\u0000\u0000" +
                    "\u0000\u068a\u068b\u0005\u0157\u0000\u0000\u068b\u0690\u0003D\"\u0000" +
                    "\u068c\u068d\u0005\u0004\u0000\u0000\u068d\u068f\u0003D\"\u0000\u068e" +
                    "\u068c\u0001\u0000\u0000\u0000\u068f\u0692\u0001\u0000\u0000\u0000\u0690" +
                    "\u068e\u0001\u0000\u0000\u0000\u0690\u0691\u0001\u0000\u0000\u0000\u0691" +
                    "C\u0001\u0000\u0000\u0000\u0692\u0690\u0001\u0000\u0000\u0000\u0693\u0695" +
                    "\u0003\u0170\u00b8\u0000\u0694\u0696\u0003\u00d4j\u0000\u0695\u0694\u0001" +
                    "\u0000\u0000\u0000\u0695\u0696\u0001\u0000\u0000\u0000\u0696\u0698\u0001" +
                    "\u0000\u0000\u0000\u0697\u0699\u0005\u0015\u0000\u0000\u0698\u0697\u0001" +
                    "\u0000\u0000\u0000\u0698\u0699\u0001\u0000\u0000\u0000\u0699\u069a\u0001" +
                    "\u0000\u0000\u0000\u069a\u069b\u0005\u0002\u0000\u0000\u069b\u069c\u0003" +
                    "0\u0018\u0000\u069c\u069d\u0005\u0003\u0000\u0000\u069dE\u0001\u0000\u0000" +
                    "\u0000\u069e\u069f\u0005\u0148\u0000\u0000\u069f\u06a0\u0003\u00f6{\u0000" +
                    "\u06a0G\u0001\u0000\u0000\u0000\u06a1\u06a2\u0005\u00cd\u0000\u0000\u06a2" +
                    "\u06b0\u0003R)\u0000\u06a3\u06a4\u0005\u00d8\u0000\u0000\u06a4\u06a5\u0005" +
                    " \u0000\u0000\u06a5\u06b0\u0003\u0104\u0082\u0000\u06a6\u06b0\u0003*\u0015" +
                    "\u0000\u06a7\u06b0\u0003&\u0013\u0000\u06a8\u06b0\u0003(\u0014\u0000\u06a9" +
                    "\u06b0\u0003\u00f2y\u0000\u06aa\u06b0\u0003Z-\u0000\u06ab\u06b0\u0003" +
                    ",\u0016\u0000\u06ac\u06b0\u0003.\u0017\u0000\u06ad\u06ae\u0005\u0124\u0000" +
                    "\u0000\u06ae\u06b0\u0003J%\u0000\u06af\u06a1\u0001\u0000\u0000\u0000\u06af" +
                    "\u06a3\u0001\u0000\u0000\u0000\u06af\u06a6\u0001\u0000\u0000\u0000\u06af" +
                    "\u06a7\u0001\u0000\u0000\u0000\u06af\u06a8\u0001\u0000\u0000\u0000\u06af" +
                    "\u06a9\u0001\u0000\u0000\u0000\u06af\u06aa\u0001\u0000\u0000\u0000\u06af" +
                    "\u06ab\u0001\u0000\u0000\u0000\u06af\u06ac\u0001\u0000\u0000\u0000\u06af" +
                    "\u06ad\u0001\u0000\u0000\u0000\u06b0\u06b3\u0001\u0000\u0000\u0000\u06b1" +
                    "\u06af\u0001\u0000\u0000\u0000\u06b1\u06b2\u0001\u0000\u0000\u0000\u06b2" +
                    "I\u0001\u0000\u0000\u0000\u06b3\u06b1\u0001\u0000\u0000\u0000\u06b4\u06b5" +
                    "\u0005\u0002\u0000\u0000\u06b5\u06ba\u0003L&\u0000\u06b6\u06b7\u0005\u0004" +
                    "\u0000\u0000\u06b7\u06b9\u0003L&\u0000\u06b8\u06b6\u0001\u0000\u0000\u0000" +
                    "\u06b9\u06bc\u0001\u0000\u0000\u0000\u06ba\u06b8\u0001\u0000\u0000\u0000" +
                    "\u06ba\u06bb\u0001\u0000\u0000\u0000\u06bb\u06bd\u0001\u0000\u0000\u0000" +
                    "\u06bc\u06ba\u0001\u0000\u0000\u0000\u06bd\u06be\u0005\u0003\u0000\u0000" +
                    "\u06beK\u0001\u0000\u0000\u0000\u06bf\u06c4\u0003N\'\u0000\u06c0\u06c2" +
                    "\u0005\u0161\u0000\u0000\u06c1\u06c0\u0001\u0000\u0000\u0000\u06c1\u06c2" +
                    "\u0001\u0000\u0000\u0000\u06c2\u06c3\u0001\u0000\u0000\u0000\u06c3\u06c5" +
                    "\u0003P(\u0000\u06c4\u06c1\u0001\u0000\u0000\u0000\u06c4\u06c5\u0001\u0000" +
                    "\u0000\u0000\u06c5M\u0001\u0000\u0000\u0000\u06c6\u06cb\u0003\u0170\u00b8" +
                    "\u0000\u06c7\u06c8\u0005\u0005\u0000\u0000\u06c8\u06ca\u0003\u0170\u00b8" +
                    "\u0000\u06c9\u06c7\u0001\u0000\u0000\u0000\u06ca\u06cd\u0001\u0000\u0000" +
                    "\u0000\u06cb\u06c9\u0001\u0000\u0000\u0000\u06cb\u06cc\u0001\u0000\u0000" +
                    "\u0000\u06cc\u06d0\u0001\u0000\u0000\u0000\u06cd\u06cb\u0001\u0000\u0000" +
                    "\u0000\u06ce\u06d0\u0003\u0180\u00c0\u0000\u06cf\u06c6\u0001\u0000\u0000" +
                    "\u0000\u06cf\u06ce\u0001\u0000\u0000\u0000\u06d0O\u0001\u0000\u0000\u0000" +
                    "\u06d1\u06d6\u0005\u017f\u0000\u0000\u06d2\u06d6\u0005\u0182\u0000\u0000" +
                    "\u06d3\u06d6\u0003\u012a\u0095\u0000\u06d4\u06d6\u0003\u0180\u00c0\u0000" +
                    "\u06d5\u06d1\u0001\u0000\u0000\u0000\u06d5\u06d2\u0001\u0000\u0000\u0000" +
                    "\u06d5\u06d3\u0001\u0000\u0000\u0000\u06d5\u06d4\u0001\u0000\u0000\u0000" +
                    "\u06d6Q\u0001\u0000\u0000\u0000\u06d7\u06d8\u0005\u0002\u0000\u0000\u06d8" +
                    "\u06dd\u0003T*\u0000\u06d9\u06da\u0005\u0004\u0000\u0000\u06da\u06dc\u0003" +
                    "T*\u0000\u06db\u06d9\u0001\u0000\u0000\u0000\u06dc\u06df\u0001\u0000\u0000" +
                    "\u0000\u06dd\u06db\u0001\u0000\u0000\u0000\u06dd\u06de\u0001\u0000\u0000" +
                    "\u0000\u06de\u06e0\u0001\u0000\u0000\u0000\u06df\u06dd\u0001\u0000\u0000" +
                    "\u0000\u06e0\u06e1\u0005\u0003\u0000\u0000\u06e1S\u0001\u0000\u0000\u0000" +
                    "\u06e2\u06e7\u0003N\'\u0000\u06e3\u06e5\u0005\u0161\u0000\u0000\u06e4" +
                    "\u06e3\u0001\u0000\u0000\u0000\u06e4\u06e5\u0001\u0000\u0000\u0000\u06e5" +
                    "\u06e6\u0001\u0000\u0000\u0000\u06e6\u06e8\u0003\u010c\u0086\u0000\u06e7" +
                    "\u06e4\u0001\u0000\u0000\u0000\u06e7\u06e8\u0001\u0000\u0000\u0000\u06e8" +
                    "U\u0001\u0000\u0000\u0000\u06e9\u06ea\u0005\u0002\u0000\u0000\u06ea\u06ef" +
                    "\u0003\u0122\u0091\u0000\u06eb\u06ec\u0005\u0004\u0000\u0000\u06ec\u06ee" +
                    "\u0003\u0122\u0091\u0000\u06ed\u06eb\u0001\u0000\u0000\u0000\u06ee\u06f1" +
                    "\u0001\u0000\u0000\u0000\u06ef\u06ed\u0001\u0000\u0000\u0000\u06ef\u06f0" +
                    "\u0001\u0000\u0000\u0000\u06f0\u06f2\u0001\u0000\u0000\u0000\u06f1\u06ef" +
                    "\u0001\u0000\u0000\u0000\u06f2\u06f3\u0005\u0003\u0000\u0000\u06f3W\u0001" +
                    "\u0000\u0000\u0000\u06f4\u06f5\u0005\u0002\u0000\u0000\u06f5\u06fa\u0003" +
                    "V+\u0000\u06f6\u06f7\u0005\u0004\u0000\u0000\u06f7\u06f9\u0003V+\u0000" +
                    "\u06f8\u06f6\u0001\u0000\u0000\u0000\u06f9\u06fc\u0001\u0000\u0000\u0000" +
                    "\u06fa\u06f8\u0001\u0000\u0000\u0000\u06fa\u06fb\u0001\u0000\u0000\u0000" +
                    "\u06fb\u06fd\u0001\u0000\u0000\u0000\u06fc\u06fa\u0001\u0000\u0000\u0000" +
                    "\u06fd\u06fe\u0005\u0003\u0000\u0000\u06feY\u0001\u0000\u0000\u0000\u06ff" +
                    "\u0700\u0005\u0117\u0000\u0000\u0700\u0701\u0005\u0015\u0000\u0000\u0701" +
                    "\u0706\u0003\\.\u0000\u0702\u0703\u0005\u0117\u0000\u0000\u0703\u0704" +
                    "\u0005 \u0000\u0000\u0704\u0706\u0003^/\u0000\u0705\u06ff\u0001\u0000" +
                    "\u0000\u0000\u0705\u0702\u0001\u0000\u0000\u0000\u0706[\u0001\u0000\u0000" +
                    "\u0000\u0707\u0708\u0005\u0094\u0000\u0000\u0708\u0709\u0003\u0180\u00c0" +
                    "\u0000\u0709\u070a\u0005\u00d2\u0000\u0000\u070a\u070b\u0003\u0180\u00c0" +
                    "\u0000\u070b\u070e\u0001\u0000\u0000\u0000\u070c\u070e\u0003\u0174\u00ba" +
                    "\u0000\u070d\u0707\u0001\u0000\u0000\u0000\u070d\u070c\u0001\u0000\u0000" +
                    "\u0000\u070e]\u0001\u0000\u0000\u0000\u070f\u0713\u0003\u0180\u00c0\u0000" +
                    "\u0710\u0711\u0005\u0157\u0000\u0000\u0711\u0712\u0005\u0107\u0000\u0000" +
                    "\u0712\u0714\u0003J%\u0000\u0713\u0710\u0001\u0000\u0000\u0000\u0713\u0714" +
                    "\u0001\u0000\u0000\u0000\u0714_\u0001\u0000\u0000\u0000\u0715\u0716\u0003" +
                    "\u0174\u00ba\u0000\u0716\u0717\u0003\u0180\u00c0\u0000\u0717a\u0001\u0000" +
                    "\u0000\u0000\u0718\u0719\u00032\u0019\u0000\u0719\u071a\u00030\u0018\u0000" +
                    "\u071a\u075a\u0001\u0000\u0000\u0000\u071b\u071d\u0003\u0098L\u0000\u071c" +
                    "\u071e\u0003j5\u0000\u071d\u071c\u0001\u0000\u0000\u0000\u071e\u071f\u0001" +
                    "\u0000\u0000\u0000\u071f\u071d\u0001\u0000\u0000\u0000\u071f\u0720\u0001" +
                    "\u0000\u0000\u0000\u0720\u075a\u0001\u0000\u0000\u0000\u0721\u0722\u0005" +
                    "V\u0000\u0000\u0722\u0723\u0005|\u0000\u0000\u0723\u0724\u0003d2\u0000" +
                    "\u0724\u0726\u0003\u00f0x\u0000\u0725\u0727\u0003\u0090H\u0000\u0726\u0725" +
                    "\u0001\u0000\u0000\u0000\u0726\u0727\u0001\u0000\u0000\u0000\u0727\u075a" +
                    "\u0001\u0000\u0000\u0000\u0728\u0729\u0005\u0145\u0000\u0000\u0729\u072a" +
                    "\u0003d2\u0000\u072a\u072b\u0003\u00f0x\u0000\u072b\u0731\u0003|>\u0000" +
                    "\u072c\u072d\u0005 \u0000\u0000\u072d\u0732\u0003\u011a\u008d\u0000\u072e" +
                    "\u0730\u0003\u0090H\u0000\u072f\u072e\u0001\u0000\u0000\u0000\u072f\u0730" +
                    "\u0001\u0000\u0000\u0000\u0730\u0732\u0001\u0000\u0000\u0000\u0731\u072c" +
                    "\u0001\u0000\u0000\u0000\u0731\u072f\u0001\u0000\u0000\u0000\u0732\u075a" +
                    "\u0001\u0000\u0000\u0000\u0733\u0737\u0005\u00b3\u0000\u0000\u0734\u0735" +
                    "\u0005\u0157\u0000\u0000\u0735\u0736\u0005\u0101\u0000\u0000\u0736\u0738" +
                    "\u0005f\u0000\u0000\u0737\u0734\u0001\u0000\u0000\u0000\u0737\u0738\u0001" +
                    "\u0000\u0000\u0000\u0738\u0739\u0001\u0000\u0000\u0000\u0739\u073a\u0005" +
                    "\u009a\u0000\u0000\u073a\u073b\u0003d2\u0000\u073b\u073c\u0003\u00f0x" +
                    "\u0000\u073c\u0742\u0005\u0148\u0000\u0000\u073d\u0743\u0003d2\u0000\u073e" +
                    "\u073f\u0005\u0002\u0000\u0000\u073f\u0740\u00030\u0018\u0000\u0740\u0741" +
                    "\u0005\u0003\u0000\u0000\u0741\u0743\u0001\u0000\u0000\u0000\u0742\u073d" +
                    "\u0001\u0000\u0000\u0000\u0742\u073e\u0001\u0000\u0000\u0000\u0743\u0744" +
                    "\u0001\u0000\u0000\u0000\u0744\u0745\u0003\u00f0x\u0000\u0745\u0746\u0005" +
                    "\u00ca\u0000\u0000\u0746\u074a\u0003\u0114\u008a\u0000\u0747\u0749\u0003" +
                    "~?\u0000\u0748\u0747\u0001\u0000\u0000\u0000\u0749\u074c\u0001\u0000\u0000" +
                    "\u0000\u074a\u0748\u0001\u0000\u0000\u0000\u074a\u074b\u0001\u0000\u0000" +
                    "\u0000\u074b\u0750\u0001\u0000\u0000\u0000\u074c\u074a\u0001\u0000\u0000" +
                    "\u0000\u074d\u074f\u0003\u0080@\u0000\u074e\u074d\u0001\u0000\u0000\u0000" +
                    "\u074f\u0752\u0001\u0000\u0000\u0000\u0750\u074e\u0001\u0000\u0000\u0000" +
                    "\u0750\u0751\u0001\u0000\u0000\u0000\u0751\u0756\u0001\u0000\u0000\u0000" +
                    "\u0752\u0750\u0001\u0000\u0000\u0000\u0753\u0755\u0003\u0082A\u0000\u0754" +
                    "\u0753\u0001\u0000\u0000\u0000\u0755\u0758\u0001\u0000\u0000\u0000\u0756" +
                    "\u0754\u0001\u0000\u0000\u0000\u0756\u0757\u0001\u0000\u0000\u0000\u0757" +
                    "\u075a\u0001\u0000\u0000\u0000\u0758\u0756\u0001\u0000\u0000\u0000\u0759" +
                    "\u0718\u0001\u0000\u0000\u0000\u0759\u071b\u0001\u0000\u0000\u0000\u0759" +
                    "\u0721\u0001\u0000\u0000\u0000\u0759\u0728\u0001\u0000\u0000\u0000\u0759" +
                    "\u0733\u0001\u0000\u0000\u0000\u075ac\u0001\u0000\u0000\u0000\u075b\u075c" +
                    "\u0005\u0089\u0000\u0000\u075c\u075d\u0005\u0002\u0000\u0000\u075d\u075e" +
                    "\u0003\u010c\u0086\u0000\u075e\u075f\u0005\u0003\u0000\u0000\u075f\u0762" +
                    "\u0001\u0000\u0000\u0000\u0760\u0762\u0003\u00f6{\u0000\u0761\u075b\u0001" +
                    "\u0000\u0000\u0000\u0761\u0760\u0001\u0000\u0000\u0000\u0762e\u0001\u0000" +
                    "\u0000\u0000\u0763\u0764\u0005\u017f\u0000\u0000\u0764\u0765\u0005\u0004" +
                    "\u0000\u0000\u0765\u0766\u0005\u017f\u0000\u0000\u0766g\u0001\u0000\u0000" +
                    "\u0000\u0767\u0768\u0005\u00cf\u0000\u0000\u0768\u0769\u0005 \u0000\u0000" +
                    "\u0769\u076e\u0003p8\u0000\u076a\u076b\u0005\u0004\u0000\u0000\u076b\u076d" +
                    "\u0003p8\u0000\u076c\u076a\u0001\u0000\u0000\u0000\u076d\u0770\u0001\u0000" +
                    "\u0000\u0000\u076e\u076c\u0001\u0000\u0000\u0000\u076e\u076f\u0001\u0000" +
                    "\u0000\u0000\u076f\u0772\u0001\u0000\u0000\u0000\u0770\u076e\u0001\u0000" +
                    "\u0000\u0000\u0771\u0767\u0001\u0000\u0000\u0000\u0771\u0772\u0001\u0000" +
                    "\u0000\u0000\u0772\u077d\u0001\u0000\u0000\u0000\u0773\u0774\u0005-\u0000" +
                    "\u0000\u0774\u0775\u0005 \u0000\u0000\u0775\u077a\u0003\u010c\u0086\u0000" +
                    "\u0776\u0777\u0005\u0004\u0000\u0000\u0777\u0779\u0003\u010c\u0086\u0000" +
                    "\u0778\u0776\u0001\u0000\u0000\u0000\u0779\u077c\u0001\u0000\u0000\u0000" +
                    "\u077a\u0778\u0001\u0000\u0000\u0000\u077a\u077b\u0001\u0000\u0000\u0000" +
                    "\u077b\u077e\u0001\u0000\u0000\u0000\u077c\u077a\u0001\u0000\u0000\u0000" +
                    "\u077d\u0773\u0001\u0000\u0000\u0000\u077d\u077e\u0001\u0000\u0000\u0000" +
                    "\u077e\u0789\u0001\u0000\u0000\u0000\u077f\u0780\u0005^\u0000\u0000\u0780" +
                    "\u0781\u0005 \u0000\u0000\u0781\u0786\u0003\u010c\u0086\u0000\u0782\u0783" +
                    "\u0005\u0004\u0000\u0000\u0783\u0785\u0003\u010c\u0086\u0000\u0784\u0782" +
                    "\u0001\u0000\u0000\u0000\u0785\u0788\u0001\u0000\u0000\u0000\u0786\u0784" +
                    "\u0001\u0000\u0000\u0000\u0786\u0787\u0001\u0000\u0000\u0000\u0787\u078a" +
                    "\u0001\u0000\u0000\u0000\u0788\u0786\u0001\u0000\u0000\u0000\u0789\u077f" +
                    "\u0001\u0000\u0000\u0000\u0789\u078a\u0001\u0000\u0000\u0000\u078a\u0795" +
                    "\u0001\u0000\u0000\u0000\u078b\u078c\u0005\u0112\u0000\u0000\u078c\u078d" +
                    "\u0005 \u0000\u0000\u078d\u0792\u0003p8\u0000\u078e\u078f\u0005\u0004" +
                    "\u0000\u0000\u078f\u0791\u0003p8\u0000\u0790\u078e\u0001\u0000\u0000\u0000" +
                    "\u0791\u0794\u0001\u0000\u0000\u0000\u0792\u0790";
    private static final String _serializedATNSegment1 =
            "\u0001\u0000\u0000\u0000\u0792\u0793\u0001\u0000\u0000\u0000\u0793\u0796" +
                    "\u0001\u0000\u0000\u0000\u0794\u0792\u0001\u0000\u0000\u0000\u0795\u078b" +
                    "\u0001\u0000\u0000\u0000\u0795\u0796\u0001\u0000\u0000\u0000\u0796\u0798" +
                    "\u0001\u0000\u0000\u0000\u0797\u0799\u0003\u0160\u00b0\u0000\u0798\u0797" +
                    "\u0001\u0000\u0000\u0000\u0798\u0799\u0001\u0000\u0000\u0000\u0799\u07a0" +
                    "\u0001\u0000\u0000\u0000\u079a\u079e\u0005\u00a6\u0000\u0000\u079b\u079f" +
                    "\u0005\u000b\u0000\u0000\u079c\u079f\u0003\u010c\u0086\u0000\u079d\u079f" +
                    "\u0003f3\u0000\u079e\u079b\u0001\u0000\u0000\u0000\u079e\u079c\u0001\u0000" +
                    "\u0000\u0000\u079e\u079d\u0001\u0000\u0000\u0000\u079f\u07a1\u0001\u0000" +
                    "\u0000\u0000\u07a0\u079a\u0001\u0000\u0000\u0000\u07a0\u07a1\u0001\u0000" +
                    "\u0000\u0000\u07a1\u07a4\u0001\u0000\u0000\u0000\u07a2\u07a3\u0005\u00c9" +
                    "\u0000\u0000\u07a3\u07a5\u0003\u010c\u0086\u0000\u07a4\u07a2\u0001\u0000" +
                    "\u0000\u0000\u07a4\u07a5\u0001\u0000\u0000\u0000\u07a5i\u0001\u0000\u0000" +
                    "\u0000\u07a6\u07a7\u00032\u0019\u0000\u07a7\u07a8\u0003t:\u0000\u07a8" +
                    "k\u0001\u0000\u0000\u0000\u07a9\u07aa\u00066\uffff\uffff\u0000\u07aa\u07ab" +
                    "\u0003n7\u0000\u07ab\u07c3\u0001\u0000\u0000\u0000\u07ac\u07ad\n\u0003" +
                    "\u0000\u0000\u07ad\u07ae\u00046\u0001\u0000\u07ae\u07b0\u0007\u000e\u0000" +
                    "\u0000\u07af\u07b1\u0003\u00c4b\u0000\u07b0\u07af\u0001\u0000\u0000\u0000" +
                    "\u07b0\u07b1\u0001\u0000\u0000\u0000\u07b1\u07b2\u0001\u0000\u0000\u0000" +
                    "\u07b2\u07c2\u0003l6\u0004\u07b3\u07b4\n\u0002\u0000\u0000\u07b4\u07b5" +
                    "\u00046\u0003\u0000\u07b5\u07b7\u0005\u0096\u0000\u0000\u07b6\u07b8\u0003" +
                    "\u00c4b\u0000\u07b7\u07b6\u0001\u0000\u0000\u0000\u07b7\u07b8\u0001\u0000" +
                    "\u0000\u0000\u07b8\u07b9\u0001\u0000\u0000\u0000\u07b9\u07c2\u0003l6\u0003" +
                    "\u07ba\u07bb\n\u0001\u0000\u0000\u07bb\u07bc\u00046\u0005\u0000\u07bc" +
                    "\u07be\u0007\u000f\u0000\u0000\u07bd\u07bf\u0003\u00c4b\u0000\u07be\u07bd" +
                    "\u0001\u0000\u0000\u0000\u07be\u07bf\u0001\u0000\u0000\u0000\u07bf\u07c0" +
                    "\u0001\u0000\u0000\u0000\u07c0\u07c2\u0003l6\u0002\u07c1\u07ac\u0001\u0000" +
                    "\u0000\u0000\u07c1\u07b3\u0001\u0000\u0000\u0000\u07c1\u07ba\u0001\u0000" +
                    "\u0000\u0000\u07c2\u07c5\u0001\u0000\u0000\u0000\u07c3\u07c1\u0001\u0000" +
                    "\u0000\u0000\u07c3\u07c4\u0001\u0000\u0000\u0000\u07c4m\u0001\u0000\u0000" +
                    "\u0000\u07c5\u07c3\u0001\u0000\u0000\u0000\u07c6\u07d0\u0003v;\u0000\u07c7" +
                    "\u07d0\u0003r9\u0000\u07c8\u07c9\u0005\u0120\u0000\u0000\u07c9\u07d0\u0003" +
                    "d2\u0000\u07ca\u07d0\u0003\u00e2q\u0000\u07cb\u07cc\u0005\u0002\u0000" +
                    "\u0000\u07cc\u07cd\u00030\u0018\u0000\u07cd\u07ce\u0005\u0003\u0000\u0000" +
                    "\u07ce\u07d0\u0001\u0000\u0000\u0000\u07cf\u07c6\u0001\u0000\u0000\u0000" +
                    "\u07cf\u07c7\u0001\u0000\u0000\u0000\u07cf\u07c8\u0001\u0000\u0000\u0000" +
                    "\u07cf\u07ca\u0001\u0000\u0000\u0000\u07cf\u07cb\u0001\u0000\u0000\u0000" +
                    "\u07d0o\u0001\u0000\u0000\u0000\u07d1\u07d3\u0003\u010c\u0086\u0000\u07d2" +
                    "\u07d4\u0007\u0010\u0000\u0000\u07d3\u07d2\u0001\u0000\u0000\u0000\u07d3" +
                    "\u07d4\u0001\u0000\u0000\u0000\u07d4\u07d7\u0001\u0000\u0000\u0000\u07d5" +
                    "\u07d6\u0005\u00c6\u0000\u0000\u07d6\u07d8\u0007\u0011\u0000\u0000\u07d7" +
                    "\u07d5\u0001\u0000\u0000\u0000\u07d7\u07d8\u0001\u0000\u0000\u0000\u07d8" +
                    "q\u0001\u0000\u0000\u0000\u07d9\u07db\u0003\u0098L\u0000\u07da\u07dc\u0003" +
                    "t:\u0000\u07db\u07da\u0001\u0000\u0000\u0000\u07dc\u07dd\u0001\u0000\u0000" +
                    "\u0000\u07dd\u07db\u0001\u0000\u0000\u0000\u07dd\u07de\u0001\u0000\u0000" +
                    "\u0000\u07des\u0001\u0000\u0000\u0000\u07df\u07e1\u0003x<\u0000\u07e0" +
                    "\u07e2\u0003\u0090H\u0000\u07e1\u07e0\u0001\u0000\u0000\u0000\u07e1\u07e2" +
                    "\u0001\u0000\u0000\u0000\u07e2\u07e3\u0001\u0000\u0000\u0000\u07e3\u07e4" +
                    "\u0003h4\u0000\u07e4\u07fb\u0001\u0000\u0000\u0000\u07e5\u07e9\u0003z" +
                    "=\u0000\u07e6\u07e8\u0003\u00c2a\u0000\u07e7\u07e6\u0001\u0000\u0000\u0000" +
                    "\u07e8\u07eb\u0001\u0000\u0000\u0000\u07e9\u07e7\u0001\u0000\u0000\u0000" +
                    "\u07e9\u07ea\u0001\u0000\u0000\u0000\u07ea\u07ed\u0001\u0000\u0000\u0000" +
                    "\u07eb\u07e9\u0001\u0000\u0000\u0000\u07ec\u07ee\u0003\u0090H\u0000\u07ed" +
                    "\u07ec\u0001\u0000\u0000\u0000\u07ed\u07ee\u0001\u0000\u0000\u0000\u07ee" +
                    "\u07f0\u0001\u0000\u0000\u0000\u07ef\u07f1\u0003\u009cN\u0000\u07f0\u07ef" +
                    "\u0001\u0000\u0000\u0000\u07f0\u07f1\u0001\u0000\u0000\u0000\u07f1\u07f3" +
                    "\u0001\u0000\u0000\u0000\u07f2\u07f4\u0003\u0092I\u0000\u07f3\u07f2\u0001" +
                    "\u0000\u0000\u0000\u07f3\u07f4\u0001\u0000\u0000\u0000\u07f4\u07f6\u0001" +
                    "\u0000\u0000\u0000\u07f5\u07f7\u0003\u0160\u00b0\u0000\u07f6\u07f5\u0001" +
                    "\u0000\u0000\u0000\u07f6\u07f7\u0001\u0000\u0000\u0000\u07f7\u07f8\u0001" +
                    "\u0000\u0000\u0000\u07f8\u07f9\u0003h4\u0000\u07f9\u07fb\u0001\u0000\u0000" +
                    "\u0000\u07fa\u07df\u0001\u0000\u0000\u0000\u07fa\u07e5\u0001\u0000\u0000" +
                    "\u0000\u07fbu\u0001\u0000\u0000\u0000\u07fc\u07fe\u0003x<\u0000\u07fd" +
                    "\u07ff\u0003\u0098L\u0000\u07fe\u07fd\u0001\u0000\u0000\u0000\u07fe\u07ff" +
                    "\u0001\u0000\u0000\u0000\u07ff\u0803\u0001\u0000\u0000\u0000\u0800\u0802" +
                    "\u0003\u00c2a\u0000\u0801\u0800\u0001\u0000\u0000\u0000\u0802\u0805\u0001" +
                    "\u0000\u0000\u0000\u0803\u0801\u0001\u0000\u0000\u0000\u0803\u0804\u0001" +
                    "\u0000\u0000\u0000\u0804\u0807\u0001\u0000\u0000\u0000\u0805\u0803\u0001" +
                    "\u0000\u0000\u0000\u0806\u0808\u0003\u0090H\u0000\u0807\u0806\u0001\u0000" +
                    "\u0000\u0000\u0807\u0808\u0001\u0000\u0000\u0000\u0808\u080a\u0001\u0000" +
                    "\u0000\u0000\u0809\u080b\u0003\u009cN\u0000\u080a\u0809\u0001\u0000\u0000" +
                    "\u0000\u080a\u080b\u0001\u0000\u0000\u0000\u080b\u080d\u0001\u0000\u0000" +
                    "\u0000\u080c\u080e\u0003\u0092I\u0000\u080d\u080c\u0001\u0000\u0000\u0000" +
                    "\u080d\u080e\u0001\u0000\u0000\u0000\u080e\u0810\u0001\u0000\u0000\u0000" +
                    "\u080f\u0811\u0003\u0160\u00b0\u0000\u0810\u080f\u0001\u0000\u0000\u0000" +
                    "\u0810\u0811\u0001\u0000\u0000\u0000\u0811\u0829\u0001\u0000\u0000\u0000" +
                    "\u0812\u0814\u0003z=\u0000\u0813\u0815\u0003\u0098L\u0000\u0814\u0813" +
                    "\u0001\u0000\u0000\u0000\u0814\u0815\u0001\u0000\u0000\u0000\u0815\u0819" +
                    "\u0001\u0000\u0000\u0000\u0816\u0818\u0003\u00c2a\u0000\u0817\u0816\u0001" +
                    "\u0000\u0000\u0000\u0818\u081b\u0001\u0000\u0000\u0000\u0819\u0817\u0001" +
                    "\u0000\u0000\u0000\u0819\u081a\u0001\u0000\u0000\u0000\u081a\u081d\u0001" +
                    "\u0000\u0000\u0000\u081b\u0819\u0001\u0000\u0000\u0000\u081c\u081e\u0003" +
                    "\u0090H\u0000\u081d\u081c\u0001\u0000\u0000\u0000\u081d\u081e\u0001\u0000" +
                    "\u0000\u0000\u081e\u0820\u0001\u0000\u0000\u0000\u081f\u0821\u0003\u009c" +
                    "N\u0000\u0820\u081f\u0001\u0000\u0000\u0000\u0820\u0821\u0001\u0000\u0000" +
                    "\u0000\u0821\u0823\u0001\u0000\u0000\u0000\u0822\u0824\u0003\u0092I\u0000" +
                    "\u0823\u0822\u0001\u0000\u0000\u0000\u0823\u0824\u0001\u0000\u0000\u0000" +
                    "\u0824\u0826\u0001\u0000\u0000\u0000\u0825\u0827\u0003\u0160\u00b0\u0000" +
                    "\u0826\u0825\u0001\u0000\u0000\u0000\u0826\u0827\u0001\u0000\u0000\u0000" +
                    "\u0827\u0829\u0001\u0000\u0000\u0000\u0828\u07fc\u0001\u0000\u0000\u0000" +
                    "\u0828\u0812\u0001\u0000\u0000\u0000\u0829w\u0001\u0000\u0000\u0000\u082a" +
                    "\u082b\u0005\u0103\u0000\u0000\u082b\u082c\u0005\u0136\u0000\u0000\u082c" +
                    "\u082e\u0005\u0002\u0000\u0000\u082d\u082f\u0003\u00c4b\u0000\u082e\u082d" +
                    "\u0001\u0000\u0000\u0000\u082e\u082f\u0001\u0000\u0000\u0000\u082f\u0830" +
                    "\u0001\u0000\u0000\u0000\u0830\u0831\u0003\u0112\u0089\u0000\u0831\u0832" +
                    "\u0005\u0003\u0000\u0000\u0832\u083e\u0001\u0000\u0000\u0000\u0833\u0835" +
                    "\u0005\u00b1\u0000\u0000\u0834\u0836\u0003\u00c4b\u0000\u0835\u0834\u0001" +
                    "\u0000\u0000\u0000\u0835\u0836\u0001\u0000\u0000\u0000\u0836\u0837\u0001" +
                    "\u0000\u0000\u0000\u0837\u083e\u0003\u0112\u0089\u0000\u0838\u083a\u0005" +
                    "\u00ec\u0000\u0000\u0839\u083b\u0003\u00c4b\u0000\u083a\u0839\u0001\u0000" +
                    "\u0000\u0000\u083a\u083b\u0001\u0000\u0000\u0000\u083b\u083c\u0001\u0000" +
                    "\u0000\u0000\u083c\u083e\u0003\u0112\u0089\u0000\u083d\u082a\u0001\u0000" +
                    "\u0000\u0000\u083d\u0833\u0001\u0000\u0000\u0000\u083d\u0838\u0001\u0000" +
                    "\u0000\u0000\u083e\u0840\u0001\u0000\u0000\u0000\u083f\u0841\u0003\u00f2" +
                    "y\u0000\u0840\u083f\u0001\u0000\u0000\u0000\u0840\u0841\u0001\u0000\u0000" +
                    "\u0000\u0841\u0844\u0001\u0000\u0000\u0000\u0842\u0843\u0005\u00ea\u0000" +
                    "\u0000\u0843\u0845\u0003\u0180\u00c0\u0000\u0844\u0842\u0001\u0000\u0000" +
                    "\u0000\u0844\u0845\u0001\u0000\u0000\u0000\u0845\u0846\u0001\u0000\u0000" +
                    "\u0000\u0846\u0847\u0005\u0148\u0000\u0000\u0847\u0854\u0003\u0180\u00c0" +
                    "\u0000\u0848\u0852\u0005\u0015\u0000\u0000\u0849\u0853\u0003\u00d6k\u0000" +
                    "\u084a\u0853\u0003\u014e\u00a7\u0000\u084b\u084e\u0005\u0002\u0000\u0000" +
                    "\u084c\u084f\u0003\u00d6k\u0000\u084d\u084f\u0003\u014e\u00a7\u0000\u084e" +
                    "\u084c\u0001\u0000\u0000\u0000\u084e\u084d\u0001\u0000\u0000\u0000\u084f" +
                    "\u0850\u0001\u0000\u0000\u0000\u0850\u0851\u0005\u0003\u0000\u0000\u0851" +
                    "\u0853\u0001\u0000\u0000\u0000\u0852\u0849\u0001\u0000\u0000\u0000\u0852" +
                    "\u084a\u0001\u0000\u0000\u0000\u0852\u084b\u0001\u0000\u0000\u0000\u0853" +
                    "\u0855\u0001\u0000\u0000\u0000\u0854\u0848\u0001\u0000\u0000\u0000\u0854" +
                    "\u0855\u0001\u0000\u0000\u0000\u0855\u0857\u0001\u0000\u0000\u0000\u0856" +
                    "\u0858\u0003\u00f2y\u0000\u0857\u0856\u0001\u0000\u0000\u0000\u0857\u0858" +
                    "\u0001\u0000\u0000\u0000\u0858\u085b\u0001\u0000\u0000\u0000\u0859\u085a" +
                    "\u0005\u00e9\u0000\u0000\u085a\u085c\u0003\u0180\u00c0\u0000\u085b\u0859" +
                    "\u0001\u0000\u0000\u0000\u085b\u085c\u0001\u0000\u0000\u0000\u085cy\u0001" +
                    "\u0000\u0000\u0000\u085d\u0861\u0005\u0103\u0000\u0000\u085e\u0860\u0003" +
                    "\u0094J\u0000\u085f\u085e\u0001\u0000\u0000\u0000\u0860\u0863\u0001\u0000" +
                    "\u0000\u0000\u0861\u085f\u0001\u0000\u0000\u0000\u0861\u0862\u0001\u0000" +
                    "\u0000\u0000\u0862\u0865\u0001\u0000\u0000\u0000\u0863\u0861\u0001\u0000" +
                    "\u0000\u0000\u0864\u0866\u0003\u00c4b\u0000\u0865\u0864\u0001\u0000\u0000" +
                    "\u0000\u0865\u0866\u0001\u0000\u0000\u0000\u0866\u0867\u0001\u0000\u0000" +
                    "\u0000\u0867\u0868\u0003\u0102\u0081\u0000\u0868{\u0001\u0000\u0000\u0000" +
                    "\u0869\u086a\u0005\u0109\u0000\u0000\u086a\u086b\u0003\u008cF\u0000\u086b" +
                    "}\u0001\u0000\u0000\u0000\u086c\u086d\u0005\u0154\u0000\u0000\u086d\u0870" +
                    "\u0005\u00b2\u0000\u0000\u086e\u086f\u0005\u000f\u0000\u0000\u086f\u0871" +
                    "\u0003\u0114\u008a\u0000\u0870\u086e\u0001\u0000\u0000\u0000\u0870\u0871" +
                    "\u0001\u0000\u0000\u0000\u0871\u0872\u0001\u0000\u0000\u0000\u0872\u0873" +
                    "\u0005\u0127\u0000\u0000\u0873\u0874\u0003\u0084B\u0000\u0874\u007f\u0001" +
                    "\u0000\u0000\u0000\u0875\u0876\u0005\u0154\u0000\u0000\u0876\u0877\u0005" +
                    "\u00c4\u0000\u0000\u0877\u087a\u0005\u00b2\u0000\u0000\u0878\u0879\u0005" +
                    " \u0000\u0000\u0879\u087b\u0005\u0123\u0000\u0000\u087a\u0878\u0001\u0000" +
                    "\u0000\u0000\u087a\u087b\u0001\u0000\u0000\u0000\u087b\u087e\u0001\u0000" +
                    "\u0000\u0000\u087c\u087d\u0005\u000f\u0000\u0000\u087d\u087f\u0003\u0114" +
                    "\u008a\u0000\u087e\u087c\u0001\u0000\u0000\u0000\u087e\u087f\u0001\u0000" +
                    "\u0000\u0000\u087f\u0880\u0001\u0000\u0000\u0000\u0880\u0881\u0005\u0127" +
                    "\u0000\u0000\u0881\u0882\u0003\u0086C\u0000\u0882\u0081\u0001\u0000\u0000" +
                    "\u0000\u0883\u0884\u0005\u0154\u0000\u0000\u0884\u0885\u0005\u00c4\u0000" +
                    "\u0000\u0885\u0886\u0005\u00b2\u0000\u0000\u0886\u0887\u0005 \u0000\u0000" +
                    "\u0887\u088a\u0005\u0114\u0000\u0000\u0888\u0889\u0005\u000f\u0000\u0000" +
                    "\u0889\u088b\u0003\u0114\u008a\u0000\u088a\u0888\u0001\u0000\u0000\u0000" +
                    "\u088a\u088b\u0001\u0000\u0000\u0000\u088b\u088c\u0001\u0000\u0000\u0000" +
                    "\u088c\u088d\u0005\u0127\u0000\u0000\u088d\u088e\u0003\u0088D\u0000\u088e" +
                    "\u0083\u0001\u0000\u0000\u0000\u088f\u0897\u0005V\u0000\u0000\u0890\u0891" +
                    "\u0005\u0145\u0000\u0000\u0891\u0892\u0005\u0109\u0000\u0000\u0892\u0897" +
                    "\u0005\u016b\u0000\u0000\u0893\u0894\u0005\u0145\u0000\u0000\u0894\u0895" +
                    "\u0005\u0109\u0000\u0000\u0895\u0897\u0003\u008cF\u0000\u0896\u088f\u0001" +
                    "\u0000\u0000\u0000\u0896\u0890\u0001\u0000\u0000\u0000\u0896\u0893\u0001" +
                    "\u0000\u0000\u0000\u0897\u0085\u0001\u0000\u0000\u0000\u0898\u0899\u0005" +
                    "\u0095\u0000\u0000\u0899\u08ab\u0005\u016b\u0000\u0000\u089a\u089b\u0005" +
                    "\u0095\u0000\u0000\u089b\u089c\u0005\u0002\u0000\u0000\u089c\u089d\u0003" +
                    "\u00f4z\u0000\u089d\u089e\u0005\u0003\u0000\u0000\u089e\u089f\u0005\u0149" +
                    "\u0000\u0000\u089f\u08a0\u0005\u0002\u0000\u0000\u08a0\u08a5\u0003\u010c" +
                    "\u0086\u0000\u08a1\u08a2\u0005\u0004\u0000\u0000\u08a2\u08a4\u0003\u010c" +
                    "\u0086\u0000\u08a3\u08a1\u0001\u0000\u0000\u0000\u08a4\u08a7\u0001\u0000" +
                    "\u0000\u0000\u08a5\u08a3\u0001\u0000\u0000\u0000\u08a5\u08a6\u0001\u0000" +
                    "\u0000\u0000\u08a6\u08a8\u0001\u0000\u0000\u0000\u08a7\u08a5\u0001\u0000" +
                    "\u0000\u0000\u08a8\u08a9\u0005\u0003\u0000\u0000\u08a9\u08ab\u0001\u0000" +
                    "\u0000\u0000\u08aa\u0898\u0001\u0000\u0000\u0000\u08aa\u089a\u0001\u0000" +
                    "\u0000\u0000\u08ab\u0087\u0001\u0000\u0000\u0000\u08ac\u08b1\u0005V\u0000" +
                    "\u0000\u08ad\u08ae\u0005\u0145\u0000\u0000\u08ae\u08af\u0005\u0109\u0000" +
                    "\u0000\u08af\u08b1\u0003\u008cF\u0000\u08b0\u08ac\u0001\u0000\u0000\u0000" +
                    "\u08b0\u08ad\u0001\u0000\u0000\u0000\u08b1\u0089\u0001\u0000\u0000\u0000" +
                    "\u08b2\u08b3\u0005g\u0000\u0000\u08b3\u08b4\u0005\u0002\u0000\u0000\u08b4" +
                    "\u08b5\u0003\u00f4z\u0000\u08b5\u08b6\u0005\u0003\u0000\u0000\u08b6\u008b" +
                    "\u0001\u0000\u0000\u0000\u08b7\u08bc\u0003\u008eG\u0000\u08b8\u08b9\u0005" +
                    "\u0004\u0000\u0000\u08b9\u08bb\u0003\u008eG\u0000\u08ba\u08b8\u0001\u0000" +
                    "\u0000\u0000\u08bb\u08be\u0001\u0000\u0000\u0000\u08bc\u08ba\u0001\u0000" +
                    "\u0000\u0000\u08bc\u08bd\u0001\u0000\u0000\u0000\u08bd\u008d\u0001\u0000" +
                    "\u0000\u0000\u08be\u08bc\u0001\u0000\u0000\u0000\u08bf\u08c0\u0003\u00f6" +
                    "{\u0000\u08c0\u08c1\u0005\u0161\u0000\u0000\u08c1\u08c2\u0003\u010c\u0086" +
                    "\u0000\u08c2\u008f\u0001\u0000\u0000\u0000\u08c3\u08c4\u0005\u0155\u0000" +
                    "\u0000\u08c4\u08c5\u0003\u0114\u008a\u0000\u08c5\u0091\u0001\u0000\u0000" +
                    "\u0000\u08c6\u08c7\u0005\u0085\u0000\u0000\u08c7\u08c8\u0003\u0114\u008a" +
                    "\u0000\u08c8\u0093\u0001\u0000\u0000\u0000\u08c9\u08ca\u0005\u0177\u0000" +
                    "\u0000\u08ca\u08d1\u0003\u0096K\u0000\u08cb\u08cd\u0005\u0004\u0000\u0000" +
                    "\u08cc\u08cb\u0001\u0000\u0000\u0000\u08cc\u08cd\u0001\u0000\u0000\u0000" +
                    "\u08cd\u08ce\u0001\u0000\u0000\u0000\u08ce\u08d0\u0003\u0096K\u0000\u08cf" +
                    "\u08cc\u0001\u0000\u0000\u0000\u08d0\u08d3\u0001\u0000\u0000\u0000\u08d1" +
                    "\u08cf\u0001\u0000\u0000\u0000\u08d1\u08d2\u0001\u0000\u0000\u0000\u08d2" +
                    "\u08d4\u0001\u0000\u0000\u0000\u08d3\u08d1\u0001\u0000\u0000\u0000\u08d4" +
                    "\u08d5\u0005\u0178\u0000\u0000\u08d5\u0095\u0001\u0000\u0000\u0000\u08d6" +
                    "\u08e4\u0003\u0174\u00ba\u0000\u08d7\u08d8\u0003\u0174\u00ba\u0000\u08d8" +
                    "\u08d9\u0005\u0002\u0000\u0000\u08d9\u08de\u0003\u011e\u008f\u0000\u08da" +
                    "\u08db\u0005\u0004\u0000\u0000\u08db\u08dd\u0003\u011e\u008f\u0000\u08dc" +
                    "\u08da\u0001\u0000\u0000\u0000\u08dd\u08e0\u0001\u0000\u0000\u0000\u08de" +
                    "\u08dc\u0001\u0000\u0000\u0000\u08de\u08df\u0001\u0000\u0000\u0000\u08df" +
                    "\u08e1\u0001\u0000\u0000\u0000\u08e0\u08de\u0001\u0000\u0000\u0000\u08e1" +
                    "\u08e2\u0005\u0003\u0000\u0000\u08e2\u08e4\u0001\u0000\u0000\u0000\u08e3" +
                    "\u08d6\u0001\u0000\u0000\u0000\u08e3\u08d7\u0001\u0000\u0000\u0000\u08e4" +
                    "\u0097\u0001\u0000\u0000\u0000\u08e5\u08e6\u0005|\u0000\u0000\u08e6\u08eb" +
                    "\u0003\u00c6c\u0000\u08e7\u08e8\u0005\u0004\u0000\u0000\u08e8\u08ea\u0003" +
                    "\u00c6c\u0000\u08e9\u08e7\u0001\u0000\u0000\u0000\u08ea\u08ed\u0001\u0000" +
                    "\u0000\u0000\u08eb\u08e9\u0001\u0000\u0000\u0000\u08eb\u08ec\u0001\u0000" +
                    "\u0000\u0000\u08ec\u08f1\u0001\u0000\u0000\u0000\u08ed\u08eb\u0001\u0000" +
                    "\u0000\u0000\u08ee\u08f0\u0003\u00c2a\u0000\u08ef\u08ee\u0001\u0000\u0000" +
                    "\u0000\u08f0\u08f3\u0001\u0000\u0000\u0000\u08f1\u08ef\u0001\u0000\u0000" +
                    "\u0000\u08f1\u08f2\u0001\u0000\u0000\u0000\u08f2\u08f5\u0001\u0000\u0000" +
                    "\u0000\u08f3\u08f1\u0001\u0000\u0000\u0000\u08f4\u08f6\u0003\u00a6S\u0000" +
                    "\u08f5\u08f4\u0001\u0000\u0000\u0000\u08f5\u08f6\u0001\u0000\u0000\u0000" +
                    "\u08f6\u08f8\u0001\u0000\u0000\u0000\u08f7\u08f9\u0003\u00acV\u0000\u08f8" +
                    "\u08f7\u0001\u0000\u0000\u0000\u08f8\u08f9\u0001\u0000\u0000\u0000\u08f9" +
                    "\u0099\u0001\u0000\u0000\u0000\u08fa\u08fc\u0005x\u0000\u0000\u08fb\u08fa" +
                    "\u0001\u0000\u0000\u0000\u08fb\u08fc\u0001\u0000\u0000\u0000\u08fc\u08fd" +
                    "\u0001\u0000\u0000\u0000\u08fd\u08fe\u0007\u0012\u0000\u0000\u08fe\u08ff" +
                    "\u0005\u0015\u0000\u0000\u08ff\u0900\u0005\u00c8\u0000\u0000\u0900\u0909" +
                    "\u0003\u0184\u00c2\u0000\u0901\u0903\u0005x\u0000\u0000\u0902\u0901\u0001" +
                    "\u0000\u0000\u0000\u0902\u0903\u0001\u0000\u0000\u0000\u0903\u0904\u0001" +
                    "\u0000\u0000\u0000\u0904\u0905\u0007\u0013\u0000\u0000\u0905\u0906\u0005" +
                    "\u0015\u0000\u0000\u0906\u0907\u0005\u00c8\u0000\u0000\u0907\u0909\u0003" +
                    "\u011a\u008d\u0000\u0908\u08fb\u0001\u0000\u0000\u0000\u0908\u0902\u0001" +
                    "\u0000\u0000\u0000\u0909\u009b\u0001\u0000\u0000\u0000\u090a\u090b\u0005" +
                    "\u0083\u0000\u0000\u090b\u090c\u0005 \u0000\u0000\u090c\u0911\u0003\u009e" +
                    "O\u0000\u090d\u090e\u0005\u0004\u0000\u0000\u090e\u0910\u0003\u009eO\u0000" +
                    "\u090f\u090d\u0001\u0000\u0000\u0000\u0910\u0913\u0001\u0000\u0000\u0000" +
                    "\u0911\u090f\u0001\u0000\u0000\u0000\u0911\u0912\u0001\u0000\u0000\u0000" +
                    "\u0912\u0932\u0001\u0000\u0000\u0000\u0913\u0911\u0001\u0000\u0000\u0000" +
                    "\u0914\u0915\u0005\u0083\u0000\u0000\u0915\u0916\u0005 \u0000\u0000\u0916" +
                    "\u091b\u0003\u010c\u0086\u0000\u0917\u0918\u0005\u0004\u0000\u0000\u0918" +
                    "\u091a\u0003\u010c\u0086\u0000\u0919\u0917\u0001\u0000\u0000\u0000\u091a" +
                    "\u091d\u0001\u0000\u0000\u0000\u091b\u0919\u0001\u0000\u0000\u0000\u091b" +
                    "\u091c\u0001\u0000\u0000\u0000\u091c\u092f\u0001\u0000\u0000\u0000\u091d" +
                    "\u091b\u0001\u0000\u0000\u0000\u091e\u091f\u0005\u0157\u0000\u0000\u091f" +
                    "\u0930\u0005\u00fc\u0000\u0000\u0920\u0921\u0005\u0157\u0000\u0000\u0921" +
                    "\u0930\u0005?\u0000\u0000\u0922\u0923\u0005\u0084\u0000\u0000\u0923\u0924" +
                    "\u0005\u010b\u0000\u0000\u0924\u0925\u0005\u0002\u0000\u0000\u0925\u092a" +
                    "\u0003\u00a4R\u0000\u0926\u0927\u0005\u0004\u0000\u0000\u0927\u0929\u0003" +
                    "\u00a4R\u0000\u0928\u0926\u0001\u0000\u0000\u0000\u0929\u092c\u0001\u0000" +
                    "\u0000\u0000\u092a\u0928\u0001\u0000\u0000\u0000\u092a\u092b\u0001\u0000" +
                    "\u0000\u0000\u092b\u092d\u0001\u0000\u0000\u0000\u092c\u092a\u0001\u0000" +
                    "\u0000\u0000\u092d\u092e\u0005\u0003\u0000\u0000\u092e\u0930\u0001\u0000" +
                    "\u0000\u0000\u092f\u091e\u0001\u0000\u0000\u0000\u092f\u0920\u0001\u0000" +
                    "\u0000\u0000\u092f\u0922\u0001\u0000\u0000\u0000\u092f\u0930\u0001\u0000" +
                    "\u0000\u0000\u0930\u0932\u0001\u0000\u0000\u0000\u0931\u090a\u0001\u0000" +
                    "\u0000\u0000\u0931\u0914\u0001\u0000\u0000\u0000\u0932\u009d\u0001\u0000" +
                    "\u0000\u0000\u0933\u0936\u0003\u00a0P\u0000\u0934\u0936\u0003\u010c\u0086" +
                    "\u0000\u0935\u0933\u0001\u0000\u0000\u0000\u0935\u0934\u0001\u0000\u0000" +
                    "\u0000\u0936\u009f\u0001\u0000\u0000\u0000\u0937\u0938\u0007\u0014\u0000" +
                    "\u0000\u0938\u0939\u0005\u0002\u0000\u0000\u0939\u093e\u0003\u00a4R\u0000" +
                    "\u093a\u093b\u0005\u0004\u0000\u0000\u093b\u093d\u0003\u00a4R\u0000\u093c" +
                    "\u093a\u0001\u0000\u0000\u0000\u093d\u0940\u0001\u0000\u0000\u0000\u093e" +
                    "\u093c\u0001\u0000\u0000\u0000\u093e\u093f\u0001\u0000\u0000\u0000\u093f" +
                    "\u0941\u0001\u0000\u0000\u0000\u0940\u093e\u0001\u0000\u0000\u0000\u0941" +
                    "\u0942\u0005\u0003\u0000\u0000\u0942\u0951\u0001\u0000\u0000\u0000\u0943" +
                    "\u0944\u0005\u0084\u0000\u0000\u0944\u0945\u0005\u010b\u0000\u0000\u0945" +
                    "\u0946\u0005\u0002\u0000\u0000\u0946\u094b\u0003\u00a2Q\u0000\u0947\u0948" +
                    "\u0005\u0004\u0000\u0000\u0948\u094a\u0003\u00a2Q\u0000\u0949\u0947\u0001" +
                    "\u0000\u0000\u0000\u094a\u094d\u0001\u0000\u0000\u0000\u094b\u0949\u0001" +
                    "\u0000\u0000\u0000\u094b\u094c\u0001\u0000\u0000\u0000\u094c\u094e\u0001" +
                    "\u0000\u0000\u0000\u094d\u094b\u0001\u0000\u0000\u0000\u094e\u094f\u0005" +
                    "\u0003\u0000\u0000\u094f\u0951\u0001\u0000\u0000\u0000\u0950\u0937\u0001" +
                    "\u0000\u0000\u0000\u0950\u0943\u0001\u0000\u0000\u0000\u0951\u00a1\u0001" +
                    "\u0000\u0000\u0000\u0952\u0955\u0003\u00a0P\u0000\u0953\u0955\u0003\u00a4" +
                    "R\u0000\u0954\u0952\u0001\u0000\u0000\u0000\u0954\u0953\u0001\u0000\u0000" +
                    "\u0000\u0955\u00a3\u0001\u0000\u0000\u0000\u0956\u095f\u0005\u0002\u0000" +
                    "\u0000\u0957\u095c\u0003\u010c\u0086\u0000\u0958\u0959\u0005\u0004\u0000" +
                    "\u0000\u0959\u095b\u0003\u010c\u0086\u0000\u095a\u0958\u0001\u0000\u0000" +
                    "\u0000\u095b\u095e\u0001\u0000\u0000\u0000\u095c\u095a\u0001\u0000\u0000" +
                    "\u0000\u095c\u095d\u0001\u0000\u0000\u0000\u095d\u0960\u0001\u0000\u0000" +
                    "\u0000\u095e\u095c\u0001\u0000\u0000\u0000\u095f\u0957\u0001\u0000\u0000" +
                    "\u0000\u095f\u0960\u0001\u0000\u0000\u0000\u0960\u0961\u0001\u0000\u0000" +
                    "\u0000\u0961\u0964\u0005\u0003\u0000\u0000\u0962\u0964\u0003\u010c\u0086" +
                    "\u0000\u0963\u0956\u0001\u0000\u0000\u0000\u0963\u0962\u0001\u0000\u0000" +
                    "\u0000\u0964\u00a5\u0001\u0000\u0000\u0000\u0965\u0966\u0005\u00dd\u0000" +
                    "\u0000\u0966\u0967\u0005\u0002\u0000\u0000\u0967\u0968\u0003\u0102\u0081" +
                    "\u0000\u0968\u0969\u0005x\u0000\u0000\u0969\u096a\u0003\u00a8T\u0000\u096a" +
                    "\u096b\u0005\u008e\u0000\u0000\u096b\u096c\u0005\u0002\u0000\u0000\u096c" +
                    "\u0971\u0003\u00aaU\u0000\u096d\u096e\u0005\u0004\u0000\u0000\u096e\u0970" +
                    "\u0003\u00aaU\u0000\u096f\u096d\u0001\u0000\u0000\u0000\u0970\u0973\u0001" +
                    "\u0000\u0000\u0000\u0971\u096f\u0001\u0000\u0000\u0000\u0971\u0972\u0001" +
                    "\u0000\u0000\u0000\u0972\u0974\u0001\u0000\u0000\u0000\u0973\u0971\u0001" +
                    "\u0000\u0000\u0000\u0974\u0975\u0005\u0003\u0000\u0000\u0975\u0976\u0005" +
                    "\u0003\u0000\u0000\u0976\u00a7\u0001\u0000\u0000\u0000\u0977\u0984\u0003" +
                    "\u0170\u00b8\u0000\u0978\u0979\u0005\u0002\u0000\u0000\u0979\u097e\u0003" +
                    "\u0170\u00b8\u0000\u097a\u097b\u0005\u0004\u0000\u0000\u097b\u097d\u0003" +
                    "\u0170\u00b8\u0000\u097c\u097a\u0001\u0000\u0000\u0000\u097d\u0980\u0001" +
                    "\u0000\u0000\u0000\u097e\u097c\u0001\u0000\u0000\u0000\u097e\u097f\u0001" +
                    "\u0000\u0000\u0000\u097f\u0981\u0001\u0000\u0000\u0000\u0980\u097e\u0001" +
                    "\u0000\u0000\u0000\u0981\u0982\u0005\u0003\u0000\u0000\u0982\u0984\u0001" +
                    "\u0000\u0000\u0000\u0983\u0977\u0001\u0000\u0000\u0000\u0983\u0978\u0001" +
                    "\u0000\u0000\u0000\u0984\u00a9\u0001\u0000\u0000\u0000\u0985\u098a\u0003" +
                    "\u010c\u0086\u0000\u0986\u0988\u0005\u0015\u0000\u0000\u0987\u0986\u0001" +
                    "\u0000\u0000\u0000\u0987\u0988\u0001\u0000\u0000\u0000\u0988\u0989\u0001" +
                    "\u0000\u0000\u0000\u0989\u098b\u0003\u0170\u00b8\u0000\u098a\u0987\u0001" +
                    "\u0000\u0000\u0000\u098a\u098b\u0001\u0000\u0000\u0000\u098b\u00ab\u0001" +
                    "\u0000\u0000\u0000\u098c\u098e\u0005\u0143\u0000\u0000\u098d\u098f\u0003" +
                    "\u00aeW\u0000\u098e\u098d\u0001\u0000\u0000\u0000\u098e\u098f\u0001\u0000" +
                    "\u0000\u0000\u098f\u0990\u0001\u0000\u0000\u0000\u0990\u0991\u0005\u0002" +
                    "\u0000\u0000\u0991\u0992\u0003\u00b0X\u0000\u0992\u0997\u0005\u0003\u0000" +
                    "\u0000\u0993\u0995\u0005\u0015\u0000\u0000\u0994\u0993\u0001\u0000\u0000" +
                    "\u0000\u0994\u0995\u0001\u0000\u0000\u0000\u0995\u0996\u0001\u0000\u0000" +
                    "\u0000\u0996\u0998\u0003\u0170\u00b8\u0000\u0997\u0994\u0001\u0000\u0000" +
                    "\u0000\u0997\u0998\u0001\u0000\u0000\u0000\u0998\u00ad\u0001\u0000\u0000" +
                    "\u0000\u0999\u099a\u0007\u0015\u0000\u0000\u099a\u099b\u0005\u00c6\u0000" +
                    "\u0000\u099b\u00af\u0001\u0000\u0000\u0000\u099c\u099f\u0003\u00b2Y\u0000" +
                    "\u099d\u099f\u0003\u00b4Z\u0000\u099e\u099c\u0001\u0000\u0000\u0000\u099e" +
                    "\u099d\u0001\u0000\u0000\u0000\u099f\u00b1\u0001\u0000\u0000\u0000\u09a0" +
                    "\u09a1\u0003\u00b8\\\u0000\u09a1\u09a2\u0005x\u0000\u0000\u09a2\u09a3" +
                    "\u0003\u00ba]\u0000\u09a3\u09a4\u0005\u008e\u0000\u0000\u09a4\u09a5\u0005" +
                    "\u0002\u0000\u0000\u09a5\u09aa\u0003\u00bc^\u0000\u09a6\u09a7\u0005\u0004" +
                    "\u0000\u0000\u09a7\u09a9\u0003\u00bc^\u0000\u09a8\u09a6\u0001\u0000\u0000" +
                    "\u0000\u09a9\u09ac\u0001\u0000\u0000\u0000\u09aa\u09a8\u0001\u0000\u0000" +
                    "\u0000\u09aa\u09ab\u0001\u0000\u0000\u0000\u09ab\u09ad\u0001\u0000\u0000" +
                    "\u0000\u09ac\u09aa\u0001\u0000\u0000\u0000\u09ad\u09ae\u0005\u0003\u0000" +
                    "\u0000\u09ae\u00b3\u0001\u0000\u0000\u0000\u09af\u09b0\u0005\u0002\u0000" +
                    "\u0000\u09b0\u09b5\u0003\u00b8\\\u0000\u09b1\u09b2\u0005\u0004\u0000\u0000" +
                    "\u09b2\u09b4\u0003\u00b8\\\u0000\u09b3\u09b1\u0001\u0000\u0000\u0000\u09b4" +
                    "\u09b7\u0001\u0000\u0000\u0000\u09b5\u09b3\u0001\u0000\u0000\u0000\u09b5" +
                    "\u09b6\u0001\u0000\u0000\u0000\u09b6\u09b8\u0001\u0000\u0000\u0000\u09b7" +
                    "\u09b5\u0001\u0000\u0000\u0000\u09b8\u09b9\u0005\u0003\u0000\u0000\u09b9" +
                    "\u09ba\u0005x\u0000\u0000\u09ba\u09bb\u0003\u00ba]\u0000\u09bb\u09bc\u0005" +
                    "\u008e\u0000\u0000\u09bc\u09bd\u0005\u0002\u0000\u0000\u09bd\u09c2\u0003" +
                    "\u00b6[\u0000\u09be\u09bf\u0005\u0004\u0000\u0000\u09bf\u09c1\u0003\u00b6" +
                    "[\u0000\u09c0\u09be\u0001\u0000\u0000\u0000\u09c1\u09c4\u0001\u0000\u0000" +
                    "\u0000\u09c2\u09c0\u0001\u0000\u0000\u0000\u09c2\u09c3\u0001\u0000\u0000" +
                    "\u0000\u09c3\u09c5\u0001\u0000\u0000\u0000\u09c4\u09c2\u0001\u0000\u0000" +
                    "\u0000\u09c5\u09c6\u0005\u0003\u0000\u0000\u09c6\u00b5\u0001\u0000\u0000" +
                    "\u0000\u09c7\u09c8\u0005\u0002\u0000\u0000\u09c8\u09cd\u0003\u00be_\u0000" +
                    "\u09c9\u09ca\u0005\u0004\u0000\u0000\u09ca\u09cc\u0003\u00be_\u0000\u09cb" +
                    "\u09c9\u0001\u0000\u0000\u0000\u09cc\u09cf\u0001\u0000\u0000\u0000\u09cd" +
                    "\u09cb\u0001\u0000\u0000\u0000\u09cd\u09ce\u0001\u0000\u0000\u0000\u09ce" +
                    "\u09d0\u0001\u0000\u0000\u0000\u09cf\u09cd\u0001\u0000\u0000\u0000\u09d0" +
                    "\u09d2\u0005\u0003\u0000\u0000\u09d1\u09d3\u0003\u00c0`\u0000\u09d2\u09d1" +
                    "\u0001\u0000\u0000\u0000\u09d2\u09d3\u0001\u0000\u0000\u0000\u09d3\u00b7" +
                    "\u0001\u0000\u0000\u0000\u09d4\u09d5\u0003\u0174\u00ba\u0000\u09d5\u00b9" +
                    "\u0001\u0000\u0000\u0000\u09d6\u09d7\u0003\u0174\u00ba\u0000\u09d7\u00bb" +
                    "\u0001\u0000\u0000\u0000\u09d8\u09da\u0003\u00be_\u0000\u09d9\u09db\u0003" +
                    "\u00c0`\u0000\u09da\u09d9\u0001\u0000\u0000\u0000\u09da\u09db\u0001\u0000" +
                    "\u0000\u0000\u09db\u00bd\u0001\u0000\u0000\u0000\u09dc\u09dd\u0003\u00f6" +
                    "{\u0000\u09dd\u00bf\u0001\u0000\u0000\u0000\u09de\u09e0\u0005\u0015\u0000" +
                    "\u0000\u09df\u09de\u0001\u0000\u0000\u0000\u09df\u09e0\u0001\u0000\u0000" +
                    "\u0000\u09e0\u09e1\u0001\u0000\u0000\u0000\u09e1\u09e2\u0003\u0170\u00b8" +
                    "\u0000\u09e2\u00c1\u0001\u0000\u0000\u0000\u09e3\u09e4\u0005\u00a0\u0000" +
                    "\u0000\u09e4\u09e6\u0005\u014f\u0000\u0000\u09e5\u09e7\u0005\u00d1\u0000" +
                    "\u0000\u09e6\u09e5\u0001\u0000\u0000\u0000\u09e6\u09e7\u0001\u0000\u0000" +
                    "\u0000\u09e7\u09e8\u0001\u0000\u0000\u0000\u09e8\u09e9\u0003\u016e\u00b7" +
                    "\u0000\u09e9\u09f2\u0005\u0002\u0000\u0000\u09ea\u09ef\u0003\u010c\u0086" +
                    "\u0000\u09eb\u09ec\u0005\u0004\u0000\u0000\u09ec\u09ee\u0003\u010c\u0086" +
                    "\u0000\u09ed\u09eb\u0001\u0000\u0000\u0000\u09ee\u09f1\u0001\u0000\u0000" +
                    "\u0000\u09ef\u09ed\u0001\u0000\u0000\u0000\u09ef\u09f0\u0001\u0000\u0000" +
                    "\u0000\u09f0\u09f3\u0001\u0000\u0000\u0000\u09f1\u09ef\u0001\u0000\u0000" +
                    "\u0000\u09f2\u09ea\u0001\u0000\u0000\u0000\u09f2\u09f3\u0001\u0000\u0000" +
                    "\u0000\u09f3\u09f4\u0001\u0000\u0000\u0000\u09f4\u09f5\u0005\u0003\u0000" +
                    "\u0000\u09f5\u0a01\u0003\u0174\u00ba\u0000\u09f6\u09f8\u0005\u0015\u0000" +
                    "\u0000\u09f7\u09f6\u0001\u0000\u0000\u0000\u09f7\u09f8\u0001\u0000\u0000" +
                    "\u0000\u09f8\u09f9\u0001\u0000\u0000\u0000\u09f9\u09fe\u0003\u0174\u00ba" +
                    "\u0000\u09fa\u09fb\u0005\u0004\u0000\u0000\u09fb\u09fd\u0003\u0174\u00ba" +
                    "\u0000\u09fc\u09fa\u0001\u0000\u0000\u0000\u09fd\u0a00\u0001\u0000\u0000" +
                    "\u0000\u09fe\u09fc\u0001\u0000\u0000\u0000\u09fe\u09ff\u0001\u0000\u0000" +
                    "\u0000\u09ff\u0a02\u0001\u0000\u0000\u0000\u0a00\u09fe\u0001\u0000\u0000" +
                    "\u0000\u0a01\u09f7\u0001\u0000\u0000\u0000\u0a01\u0a02\u0001\u0000\u0000" +
                    "\u0000\u0a02\u00c3\u0001\u0000\u0000\u0000\u0a03\u0a04\u0007\u0016\u0000" +
                    "\u0000\u0a04\u00c5\u0001\u0000\u0000\u0000\u0a05\u0a07\u0005\u00a0\u0000" +
                    "\u0000\u0a06\u0a05\u0001\u0000\u0000\u0000\u0a06\u0a07\u0001\u0000\u0000" +
                    "\u0000\u0a07\u0a08\u0001\u0000\u0000\u0000\u0a08\u0a0c\u0003\u00e0p\u0000" +
                    "\u0a09\u0a0b\u0003\u00c8d\u0000\u0a0a\u0a09\u0001\u0000\u0000\u0000\u0a0b" +
                    "\u0a0e\u0001\u0000\u0000\u0000\u0a0c\u0a0a\u0001\u0000\u0000\u0000\u0a0c" +
                    "\u0a0d\u0001\u0000\u0000\u0000\u0a0d\u00c7\u0001\u0000\u0000\u0000\u0a0e" +
                    "\u0a0c\u0001\u0000\u0000\u0000\u0a0f\u0a13\u0003\u00cae\u0000\u0a10\u0a13" +
                    "\u0003\u00a6S\u0000\u0a11\u0a13\u0003\u00acV\u0000\u0a12\u0a0f\u0001\u0000" +
                    "\u0000\u0000\u0a12\u0a10\u0001\u0000\u0000\u0000\u0a12\u0a11\u0001\u0000" +
                    "\u0000\u0000\u0a13\u00c9\u0001\u0000\u0000\u0000\u0a14\u0a15\u0003\u00cc" +
                    "f\u0000\u0a15\u0a17\u0005\u009d\u0000\u0000\u0a16\u0a18\u0005\u00a0\u0000" +
                    "\u0000\u0a17\u0a16\u0001\u0000\u0000\u0000\u0a17\u0a18\u0001\u0000\u0000" +
                    "\u0000\u0a18\u0a19\u0001\u0000\u0000\u0000\u0a19\u0a1b\u0003\u00e0p\u0000" +
                    "\u0a1a\u0a1c\u0003\u00ceg\u0000\u0a1b\u0a1a\u0001\u0000\u0000\u0000\u0a1b" +
                    "\u0a1c\u0001\u0000\u0000\u0000\u0a1c\u0a26\u0001\u0000\u0000\u0000\u0a1d" +
                    "\u0a1e\u0005\u00c2\u0000\u0000\u0a1e\u0a1f\u0003\u00ccf\u0000\u0a1f\u0a21" +
                    "\u0005\u009d\u0000\u0000\u0a20\u0a22\u0005\u00a0\u0000\u0000\u0a21\u0a20" +
                    "\u0001\u0000\u0000\u0000\u0a21\u0a22\u0001\u0000\u0000\u0000\u0a22\u0a23" +
                    "\u0001\u0000\u0000\u0000\u0a23\u0a24\u0003\u00e0p\u0000\u0a24\u0a26\u0001" +
                    "\u0000\u0000\u0000\u0a25\u0a14\u0001\u0000\u0000\u0000\u0a25\u0a1d\u0001" +
                    "\u0000\u0000\u0000\u0a26\u00cb\u0001\u0000\u0000\u0000\u0a27\u0a29\u0005" +
                    "\u0092\u0000\u0000\u0a28\u0a27\u0001\u0000\u0000\u0000\u0a28\u0a29\u0001" +
                    "\u0000\u0000\u0000\u0a29\u0a40\u0001\u0000\u0000\u0000\u0a2a\u0a40\u0005" +
                    ">\u0000\u0000\u0a2b\u0a2d\u0005\u00a3\u0000\u0000\u0a2c\u0a2e\u0005\u00d1" +
                    "\u0000\u0000\u0a2d\u0a2c\u0001\u0000\u0000\u0000\u0a2d\u0a2e\u0001\u0000" +
                    "\u0000\u0000\u0a2e\u0a40\u0001\u0000\u0000\u0000\u0a2f\u0a31\u0005\u00a3" +
                    "\u0000\u0000\u0a30\u0a2f\u0001\u0000\u0000\u0000\u0a30\u0a31\u0001\u0000" +
                    "\u0000\u0000\u0a31\u0a32\u0001\u0000\u0000\u0000\u0a32\u0a40\u0005\u0104" +
                    "\u0000\u0000\u0a33\u0a35\u0005\u00f7\u0000\u0000\u0a34\u0a36\u0005\u00d1" +
                    "\u0000\u0000\u0a35\u0a34\u0001\u0000\u0000\u0000\u0a35\u0a36\u0001\u0000" +
                    "\u0000\u0000\u0a36\u0a40\u0001\u0000\u0000\u0000\u0a37\u0a39\u0005}\u0000" +
                    "\u0000\u0a38\u0a3a\u0005\u00d1\u0000\u0000\u0a39\u0a38\u0001\u0000\u0000" +
                    "\u0000\u0a39\u0a3a\u0001\u0000\u0000\u0000\u0a3a\u0a40\u0001\u0000\u0000" +
                    "\u0000\u0a3b\u0a3d\u0005\u00a3\u0000\u0000\u0a3c\u0a3b\u0001\u0000\u0000" +
                    "\u0000\u0a3c\u0a3d\u0001\u0000\u0000\u0000\u0a3d\u0a3e\u0001\u0000\u0000" +
                    "\u0000\u0a3e\u0a40\u0005\u0010\u0000\u0000\u0a3f\u0a28\u0001\u0000\u0000" +
                    "\u0000\u0a3f\u0a2a\u0001\u0000\u0000\u0000\u0a3f\u0a2b\u0001\u0000\u0000" +
                    "\u0000\u0a3f\u0a30\u0001\u0000\u0000\u0000\u0a3f\u0a33\u0001\u0000\u0000" +
                    "\u0000\u0a3f\u0a37\u0001\u0000\u0000\u0000\u0a3f\u0a3c\u0001\u0000\u0000" +
                    "\u0000\u0a40\u00cd\u0001\u0000\u0000\u0000\u0a41\u0a42\u0005\u00ca\u0000" +
                    "\u0000\u0a42\u0a46\u0003\u0114\u008a\u0000\u0a43\u0a44\u0005\u0148\u0000" +
                    "\u0000\u0a44\u0a46\u0003\u00d4j\u0000\u0a45\u0a41\u0001\u0000\u0000\u0000" +
                    "\u0a45\u0a43\u0001\u0000\u0000\u0000\u0a46\u00cf\u0001\u0000\u0000\u0000" +
                    "\u0a47\u0a48\u0005\u0122\u0000\u0000\u0a48\u0a4a\u0005\u0002\u0000\u0000" +
                    "\u0a49\u0a4b\u0003\u00d2i\u0000\u0a4a\u0a49\u0001\u0000\u0000\u0000\u0a4a" +
                    "\u0a4b\u0001\u0000\u0000\u0000\u0a4b\u0a4c\u0001\u0000\u0000\u0000\u0a4c" +
                    "\u0a51\u0005\u0003\u0000\u0000\u0a4d\u0a4e\u0005\u00f1\u0000\u0000\u0a4e" +
                    "\u0a4f\u0005\u0002\u0000\u0000\u0a4f\u0a50\u0005\u017f\u0000\u0000\u0a50" +
                    "\u0a52\u0005\u0003\u0000\u0000\u0a51\u0a4d\u0001\u0000\u0000\u0000\u0a51" +
                    "\u0a52\u0001\u0000\u0000\u0000\u0a52\u00d1\u0001\u0000\u0000\u0000\u0a53" +
                    "\u0a55\u0005\u016a\u0000\u0000\u0a54\u0a53\u0001\u0000\u0000\u0000\u0a54" +
                    "\u0a55\u0001\u0000\u0000\u0000\u0a55\u0a56\u0001\u0000\u0000\u0000\u0a56" +
                    "\u0a57\u0007\u0017\u0000\u0000\u0a57\u0a6c\u0005\u00dc\u0000\u0000\u0a58" +
                    "\u0a59\u0003\u010c\u0086\u0000\u0a59\u0a5a\u0005\u00fe\u0000\u0000\u0a5a" +
                    "\u0a6c\u0001\u0000\u0000\u0000\u0a5b\u0a5c\u0005\u001e\u0000\u0000\u0a5c" +
                    "\u0a5d\u0005\u017f\u0000\u0000\u0a5d\u0a5e\u0005\u00d0\u0000\u0000\u0a5e" +
                    "\u0a5f\u0005\u00c8\u0000\u0000\u0a5f\u0a68\u0005\u017f\u0000\u0000\u0a60" +
                    "\u0a66\u0005\u00ca\u0000\u0000\u0a61\u0a67\u0003\u0174\u00ba\u0000\u0a62" +
                    "\u0a63\u0003\u016e\u00b7\u0000\u0a63\u0a64\u0005\u0002\u0000\u0000\u0a64" +
                    "\u0a65\u0005\u0003\u0000\u0000\u0a65\u0a67\u0001\u0000\u0000\u0000\u0a66" +
                    "\u0a61\u0001\u0000\u0000\u0000\u0a66\u0a62\u0001\u0000\u0000\u0000\u0a67" +
                    "\u0a69\u0001\u0000\u0000\u0000\u0a68\u0a60\u0001\u0000\u0000\u0000\u0a68" +
                    "\u0a69\u0001\u0000\u0000\u0000\u0a69\u0a6c\u0001\u0000\u0000\u0000\u0a6a" +
                    "\u0a6c\u0003\u010c\u0086\u0000\u0a6b\u0a54\u0001\u0000\u0000\u0000\u0a6b" +
                    "\u0a58\u0001\u0000\u0000\u0000\u0a6b\u0a5b\u0001\u0000\u0000\u0000\u0a6b" +
                    "\u0a6a\u0001\u0000\u0000\u0000\u0a6c\u00d3\u0001\u0000\u0000\u0000\u0a6d" +
                    "\u0a6e\u0005\u0002\u0000\u0000\u0a6e\u0a6f\u0003\u00d6k\u0000\u0a6f\u0a70" +
                    "\u0005\u0003\u0000\u0000\u0a70\u00d5\u0001\u0000\u0000\u0000\u0a71\u0a76" +
                    "\u0003\u0170\u00b8\u0000\u0a72\u0a73\u0005\u0004\u0000\u0000\u0a73\u0a75" +
                    "\u0003\u0170\u00b8\u0000\u0a74\u0a72\u0001\u0000\u0000\u0000\u0a75\u0a78" +
                    "\u0001\u0000\u0000\u0000\u0a76\u0a74\u0001\u0000\u0000\u0000\u0a76\u0a77" +
                    "\u0001\u0000\u0000\u0000\u0a77\u00d7\u0001\u0000\u0000\u0000\u0a78\u0a76" +
                    "\u0001\u0000\u0000\u0000\u0a79\u0a7a\u0005\u0002\u0000\u0000\u0a7a\u0a7f" +
                    "\u0003\u00dam\u0000\u0a7b\u0a7c\u0005\u0004\u0000\u0000\u0a7c\u0a7e\u0003" +
                    "\u00dam\u0000\u0a7d\u0a7b\u0001\u0000\u0000\u0000\u0a7e\u0a81\u0001\u0000" +
                    "\u0000\u0000\u0a7f\u0a7d\u0001\u0000\u0000\u0000\u0a7f\u0a80\u0001\u0000" +
                    "\u0000\u0000\u0a80\u0a82\u0001\u0000\u0000\u0000\u0a81\u0a7f\u0001\u0000" +
                    "\u0000\u0000\u0a82\u0a83\u0005\u0003\u0000\u0000\u0a83\u00d9\u0001\u0000" +
                    "\u0000\u0000\u0a84\u0a86\u0003\u0170\u00b8\u0000\u0a85\u0a87\u0007\u0010" +
                    "\u0000\u0000\u0a86\u0a85\u0001\u0000\u0000\u0000\u0a86\u0a87\u0001\u0000" +
                    "\u0000\u0000\u0a87\u00db\u0001\u0000\u0000\u0000\u0a88\u0a89\u0005\u0002" +
                    "\u0000\u0000\u0a89\u0a8e\u0003\u00deo\u0000\u0a8a\u0a8b\u0005\u0004\u0000" +
                    "\u0000\u0a8b\u0a8d\u0003\u00deo\u0000\u0a8c\u0a8a\u0001\u0000\u0000\u0000" +
                    "\u0a8d\u0a90\u0001\u0000\u0000\u0000\u0a8e\u0a8c\u0001\u0000\u0000\u0000" +
                    "\u0a8e\u0a8f\u0001\u0000\u0000\u0000\u0a8f\u0a91\u0001\u0000\u0000\u0000" +
                    "\u0a90\u0a8e\u0001\u0000\u0000\u0000\u0a91\u0a92\u0005\u0003\u0000\u0000" +
                    "\u0a92\u00dd\u0001\u0000\u0000\u0000\u0a93\u0a95\u0003\u0174\u00ba\u0000" +
                    "\u0a94\u0a96\u0003.\u0017\u0000\u0a95\u0a94\u0001\u0000\u0000\u0000\u0a95" +
                    "\u0a96\u0001\u0000\u0000\u0000\u0a96\u00df\u0001\u0000\u0000\u0000\u0a97" +
                    "\u0a99\u0003d2\u0000\u0a98\u0a9a\u0003\u009aM\u0000\u0a99\u0a98\u0001" +
                    "\u0000\u0000\u0000\u0a99\u0a9a\u0001\u0000\u0000\u0000\u0a9a\u0a9c\u0001" +
                    "\u0000\u0000\u0000\u0a9b\u0a9d\u0003\u00d0h\u0000\u0a9c\u0a9b\u0001\u0000" +
                    "\u0000\u0000\u0a9c\u0a9d\u0001\u0000\u0000\u0000\u0a9d\u0a9e\u0001\u0000" +
                    "\u0000\u0000\u0a9e\u0a9f\u0003\u00f0x\u0000\u0a9f\u0ab3\u0001\u0000\u0000" +
                    "\u0000\u0aa0\u0aa1\u0005\u0002\u0000\u0000\u0aa1\u0aa2\u00030\u0018\u0000" +
                    "\u0aa2\u0aa4\u0005\u0003\u0000\u0000\u0aa3\u0aa5\u0003\u00d0h\u0000\u0aa4" +
                    "\u0aa3\u0001\u0000\u0000\u0000\u0aa4\u0aa5\u0001\u0000\u0000\u0000\u0aa5" +
                    "\u0aa6\u0001\u0000\u0000\u0000\u0aa6\u0aa7\u0003\u00f0x\u0000\u0aa7\u0ab3" +
                    "\u0001\u0000\u0000\u0000\u0aa8\u0aa9\u0005\u0002\u0000\u0000\u0aa9\u0aaa" +
                    "\u0003\u00c6c\u0000\u0aaa\u0aac\u0005\u0003\u0000\u0000\u0aab\u0aad\u0003" +
                    "\u00d0h\u0000\u0aac\u0aab\u0001\u0000\u0000\u0000\u0aac\u0aad\u0001\u0000" +
                    "\u0000\u0000\u0aad\u0aae\u0001\u0000\u0000\u0000\u0aae\u0aaf\u0003\u00f0" +
                    "x\u0000\u0aaf\u0ab3\u0001\u0000\u0000\u0000\u0ab0\u0ab3\u0003\u00e2q\u0000" +
                    "\u0ab1\u0ab3\u0003\u00eew\u0000\u0ab2\u0a97\u0001\u0000\u0000\u0000\u0ab2" +
                    "\u0aa0\u0001\u0000\u0000\u0000\u0ab2\u0aa8\u0001\u0000\u0000\u0000\u0ab2" +
                    "\u0ab0\u0001\u0000\u0000\u0000\u0ab2\u0ab1\u0001\u0000\u0000\u0000\u0ab3" +
                    "\u00e1\u0001\u0000\u0000\u0000\u0ab4\u0ab5\u0005\u0149\u0000\u0000\u0ab5" +
                    "\u0aba\u0003\u010c\u0086\u0000\u0ab6\u0ab7\u0005\u0004\u0000\u0000\u0ab7" +
                    "\u0ab9\u0003\u010c\u0086\u0000\u0ab8\u0ab6\u0001\u0000\u0000\u0000\u0ab9" +
                    "\u0abc\u0001\u0000\u0000\u0000\u0aba\u0ab8\u0001\u0000\u0000\u0000\u0aba" +
                    "\u0abb\u0001\u0000\u0000\u0000\u0abb\u0abd\u0001\u0000\u0000\u0000\u0abc" +
                    "\u0aba\u0001\u0000\u0000\u0000\u0abd\u0abe\u0003\u00f0x\u0000\u0abe\u00e3" +
                    "\u0001\u0000\u0000\u0000\u0abf\u0ac0\u0005\u0120\u0000\u0000\u0ac0\u0ac2" +
                    "\u0003d2\u0000\u0ac1\u0ac3\u0003\u00e6s\u0000\u0ac2\u0ac1\u0001\u0000" +
                    "\u0000\u0000\u0ac2\u0ac3\u0001\u0000\u0000\u0000\u0ac3\u0ad3\u0001\u0000" +
                    "\u0000\u0000\u0ac4\u0ac5\u0005\u0120\u0000\u0000\u0ac5\u0ac6\u0005\u0002" +
                    "\u0000\u0000\u0ac6\u0ac7\u0003d2\u0000\u0ac7\u0ac9\u0005\u0003\u0000\u0000" +
                    "\u0ac8\u0aca\u0003\u00e6s\u0000\u0ac9\u0ac8\u0001\u0000\u0000\u0000\u0ac9" +
                    "\u0aca\u0001\u0000\u0000\u0000\u0aca\u0ad3\u0001\u0000\u0000\u0000\u0acb" +
                    "\u0acc\u0005\u0120\u0000\u0000\u0acc\u0acd\u0005\u0002\u0000\u0000\u0acd" +
                    "\u0ace\u00030\u0018\u0000\u0ace\u0ad0\u0005\u0003\u0000\u0000\u0acf\u0ad1" +
                    "\u0003\u00e6s\u0000\u0ad0\u0acf\u0001\u0000\u0000\u0000\u0ad0\u0ad1\u0001" +
                    "\u0000\u0000\u0000\u0ad1\u0ad3\u0001\u0000\u0000\u0000\u0ad2\u0abf\u0001" +
                    "\u0000\u0000\u0000\u0ad2\u0ac4\u0001\u0000\u0000\u0000\u0ad2\u0acb\u0001" +
                    "\u0000\u0000\u0000\u0ad3\u00e5\u0001\u0000\u0000\u0000\u0ad4\u0ad5\u0005" +
                    "\u0157\u0000\u0000\u0ad5\u0ad6\u0005\u010e\u0000\u0000\u0ad6\u0ae8\u0005" +
                    "\u00d7\u0000\u0000\u0ad7\u0ad8\u0007\u0018\u0000\u0000\u0ad8\u0ae5\u0005" +
                    " \u0000\u0000\u0ad9\u0ada\u0005\u0002\u0000\u0000\u0ada\u0adf\u0003\u010c" +
                    "\u0086\u0000\u0adb\u0adc\u0005\u0004\u0000\u0000\u0adc\u0ade\u0003\u010c" +
                    "\u0086\u0000\u0add\u0adb\u0001\u0000\u0000\u0000\u0ade\u0ae1\u0001\u0000" +
                    "\u0000\u0000\u0adf\u0add\u0001\u0000\u0000\u0000\u0adf\u0ae0\u0001\u0000" +
                    "\u0000\u0000\u0ae0\u0ae2\u0001\u0000\u0000\u0000\u0ae1\u0adf\u0001\u0000" +
                    "\u0000\u0000\u0ae2\u0ae3\u0005\u0003\u0000\u0000\u0ae3\u0ae6\u0001\u0000" +
                    "\u0000\u0000\u0ae4\u0ae6\u0003\u010c\u0086\u0000\u0ae5\u0ad9\u0001\u0000" +
                    "\u0000\u0000\u0ae5\u0ae4\u0001\u0000\u0000\u0000\u0ae6\u0ae8\u0001\u0000" +
                    "\u0000\u0000\u0ae7\u0ad4\u0001\u0000\u0000\u0000\u0ae7\u0ad7\u0001\u0000" +
                    "\u0000\u0000\u0ae8\u0af9\u0001\u0000\u0000\u0000\u0ae9\u0aea\u0007\u0019" +
                    "\u0000\u0000\u0aea\u0af7\u0005 \u0000\u0000\u0aeb\u0aec\u0005\u0002\u0000" +
                    "\u0000\u0aec\u0af1\u0003p8\u0000\u0aed\u0aee\u0005\u0004\u0000\u0000\u0aee" +
                    "\u0af0\u0003p8\u0000\u0aef\u0aed\u0001\u0000\u0000\u0000\u0af0\u0af3\u0001" +
                    "\u0000\u0000\u0000\u0af1\u0aef\u0001\u0000\u0000\u0000\u0af1\u0af2\u0001" +
                    "\u0000\u0000\u0000\u0af2\u0af4\u0001\u0000\u0000\u0000\u0af3\u0af1\u0001" +
                    "\u0000\u0000\u0000\u0af4\u0af5\u0005\u0003\u0000\u0000\u0af5\u0af8\u0001" +
                    "\u0000\u0000\u0000\u0af6\u0af8\u0003p8\u0000\u0af7\u0aeb\u0001\u0000\u0000" +
                    "\u0000\u0af7\u0af6\u0001\u0000\u0000\u0000\u0af8\u0afa\u0001\u0000\u0000" +
                    "\u0000\u0af9\u0ae9\u0001\u0000\u0000\u0000\u0af9\u0afa\u0001\u0000\u0000" +
                    "\u0000\u0afa\u00e7\u0001\u0000\u0000\u0000\u0afb\u0afc\u0003\u0174\u00ba" +
                    "\u0000\u0afc\u0afd\u0005\u0176\u0000\u0000\u0afd\u0afe\u0003\u00e4r\u0000" +
                    "\u0afe\u00e9\u0001\u0000\u0000\u0000\u0aff\u0b02\u0003\u00e4r\u0000\u0b00" +
                    "\u0b02\u0003\u00e8t\u0000\u0b01\u0aff\u0001\u0000\u0000\u0000\u0b01\u0b00" +
                    "\u0001\u0000\u0000\u0000\u0b02\u00eb\u0001\u0000\u0000\u0000\u0b03\u0b06" +
                    "\u0003\u00eau\u0000\u0b04\u0b06\u0003\u0110\u0088\u0000\u0b05\u0b03\u0001" +
                    "\u0000\u0000\u0000\u0b05\u0b04\u0001\u0000\u0000\u0000\u0b06\u00ed\u0001" +
                    "\u0000\u0000\u0000\u0b07\u0b08\u0003\u016c\u00b6\u0000\u0b08\u0b11\u0005" +
                    "\u0002\u0000\u0000\u0b09\u0b0e\u0003\u00ecv\u0000\u0b0a\u0b0b\u0005\u0004" +
                    "\u0000\u0000\u0b0b\u0b0d\u0003\u00ecv\u0000\u0b0c\u0b0a\u0001\u0000\u0000" +
                    "\u0000\u0b0d\u0b10\u0001\u0000\u0000\u0000\u0b0e\u0b0c\u0001\u0000\u0000" +
                    "\u0000\u0b0e\u0b0f\u0001\u0000\u0000\u0000\u0b0f\u0b12\u0001\u0000\u0000" +
                    "\u0000\u0b10\u0b0e\u0001\u0000\u0000\u0000\u0b11\u0b09\u0001\u0000\u0000" +
                    "\u0000\u0b11\u0b12\u0001\u0000\u0000\u0000\u0b12\u0b13\u0001\u0000\u0000" +
                    "\u0000\u0b13\u0b14\u0005\u0003\u0000\u0000\u0b14\u0b15\u0003\u00f0x\u0000" +
                    "\u0b15\u00ef\u0001\u0000\u0000\u0000\u0b16\u0b18\u0005\u0015\u0000\u0000" +
                    "\u0b17\u0b16\u0001\u0000\u0000\u0000\u0b17\u0b18\u0001\u0000\u0000\u0000" +
                    "\u0b18\u0b19\u0001\u0000\u0000\u0000\u0b19\u0b1b\u0003\u0176\u00bb\u0000" +
                    "\u0b1a\u0b1c\u0003\u00d4j\u0000\u0b1b\u0b1a\u0001\u0000\u0000\u0000\u0b1b" +
                    "\u0b1c\u0001\u0000\u0000\u0000\u0b1c\u0b1e\u0001\u0000\u0000\u0000\u0b1d" +
                    "\u0b17\u0001\u0000\u0000\u0000\u0b1d\u0b1e\u0001\u0000\u0000\u0000\u0b1e" +
                    "\u00f1\u0001\u0000\u0000\u0000\u0b1f\u0b20\u0005\u00fd\u0000\u0000\u0b20" +
                    "\u0b21\u0005z\u0000\u0000\u0b21\u0b22\u0005\u0106\u0000\u0000\u0b22\u0b26" +
                    "\u0003\u0180\u00c0\u0000\u0b23\u0b24\u0005\u0157\u0000\u0000\u0b24\u0b25" +
                    "\u0005\u0107\u0000\u0000\u0b25\u0b27\u0003J%\u0000\u0b26\u0b23\u0001\u0000" +
                    "\u0000\u0000\u0b26\u0b27\u0001\u0000\u0000\u0000\u0b27\u0b51\u0001\u0000" +
                    "\u0000\u0000\u0b28\u0b29\u0005\u00fd\u0000\u0000\u0b29\u0b2a\u0005z\u0000" +
                    "\u0000\u0b2a\u0b34\u0005W\u0000\u0000\u0b2b\u0b2c\u0005r\u0000\u0000\u0b2c" +
                    "\u0b2d\u0005\u0126\u0000\u0000\u0b2d\u0b2e\u0005 \u0000\u0000\u0b2e\u0b32" +
                    "\u0003\u0180\u00c0\u0000\u0b2f\u0b30\u0005e\u0000\u0000\u0b30\u0b31\u0005" +
                    " \u0000\u0000\u0b31\u0b33\u0003\u0180\u00c0\u0000\u0b32\u0b2f\u0001\u0000" +
                    "\u0000\u0000\u0b32\u0b33\u0001\u0000\u0000\u0000\u0b33\u0b35\u0001\u0000" +
                    "\u0000\u0000\u0b34\u0b2b\u0001\u0000\u0000\u0000\u0b34\u0b35\u0001\u0000" +
                    "\u0000\u0000\u0b35\u0b3b\u0001\u0000\u0000\u0000\u0b36\u0b37\u00052\u0000" +
                    "\u0000\u0b37\u0b38\u0005\u009c\u0000\u0000\u0b38\u0b39\u0005\u0126\u0000" +
                    "\u0000\u0b39\u0b3a\u0005 \u0000\u0000\u0b3a\u0b3c\u0003\u0180\u00c0\u0000" +
                    "\u0b3b\u0b36\u0001\u0000\u0000\u0000\u0b3b\u0b3c\u0001\u0000\u0000\u0000" +
                    "\u0b3c\u0b42\u0001\u0000\u0000\u0000\u0b3d\u0b3e\u0005\u00b1\u0000\u0000" +
                    "\u0b3e\u0b3f\u0005\u009e\u0000\u0000\u0b3f\u0b40\u0005\u0126\u0000\u0000" +
                    "\u0b40\u0b41\u0005 \u0000\u0000\u0b41\u0b43\u0003\u0180\u00c0\u0000\u0b42" +
                    "\u0b3d\u0001\u0000\u0000\u0000\u0b42\u0b43\u0001\u0000\u0000\u0000\u0b43" +
                    "\u0b48\u0001\u0000\u0000\u0000\u0b44\u0b45\u0005\u00a7\u0000\u0000\u0b45" +
                    "\u0b46\u0005\u0126\u0000\u0000\u0b46\u0b47\u0005 \u0000\u0000\u0b47\u0b49" +
                    "\u0003\u0180\u00c0\u0000\u0b48\u0b44\u0001\u0000\u0000\u0000\u0b48\u0b49" +
                    "\u0001\u0000\u0000\u0000\u0b49\u0b4e\u0001\u0000\u0000\u0000\u0b4a\u0b4b" +
                    "\u0005\u00c5\u0000\u0000\u0b4b\u0b4c\u0005U\u0000\u0000\u0b4c\u0b4d\u0005" +
                    "\u0015\u0000\u0000\u0b4d\u0b4f\u0003\u0180\u00c0\u0000\u0b4e\u0b4a\u0001" +
                    "\u0000\u0000\u0000\u0b4e\u0b4f\u0001\u0000\u0000\u0000\u0b4f\u0b51\u0001" +
                    "\u0000\u0000\u0000\u0b50\u0b1f\u0001\u0000\u0000\u0000\u0b50\u0b28\u0001" +
                    "\u0000\u0000\u0000\u0b51\u00f3\u0001\u0000\u0000\u0000\u0b52\u0b57\u0003" +
                    "\u00f6{\u0000\u0b53\u0b54\u0005\u0004\u0000\u0000\u0b54\u0b56\u0003\u00f6" +
                    "{\u0000\u0b55\u0b53\u0001\u0000\u0000\u0000\u0b56\u0b59\u0001\u0000\u0000" +
                    "\u0000\u0b57\u0b55\u0001\u0000\u0000\u0000\u0b57\u0b58\u0001\u0000\u0000" +
                    "\u0000\u0b58\u00f5\u0001\u0000\u0000\u0000\u0b59\u0b57\u0001\u0000\u0000" +
                    "\u0000\u0b5a\u0b5f\u0003\u0170\u00b8\u0000\u0b5b\u0b5c\u0005\u0005\u0000" +
                    "\u0000\u0b5c\u0b5e\u0003\u0170\u00b8\u0000\u0b5d\u0b5b\u0001\u0000\u0000" +
                    "\u0000\u0b5e\u0b61\u0001\u0000\u0000\u0000\u0b5f\u0b5d\u0001\u0000\u0000" +
                    "\u0000\u0b5f\u0b60\u0001\u0000\u0000\u0000\u0b60\u00f7\u0001\u0000\u0000" +
                    "\u0000\u0b61\u0b5f\u0001\u0000\u0000\u0000\u0b62\u0b67\u0003\u00fa}\u0000" +
                    "\u0b63\u0b64\u0005\u0004\u0000\u0000\u0b64\u0b66\u0003\u00fa}\u0000\u0b65" +
                    "\u0b63\u0001\u0000\u0000\u0000\u0b66\u0b69\u0001\u0000\u0000\u0000\u0b67" +
                    "\u0b65\u0001\u0000\u0000\u0000\u0b67\u0b68\u0001\u0000\u0000\u0000\u0b68" +
                    "\u00f9\u0001\u0000\u0000\u0000\u0b69\u0b67\u0001\u0000\u0000\u0000\u0b6a" +
                    "\u0b6d\u0003\u00f6{\u0000\u0b6b\u0b6c\u0005\u00cd\u0000\u0000\u0b6c\u0b6e" +
                    "\u0003J%\u0000\u0b6d\u0b6b\u0001\u0000\u0000\u0000\u0b6d\u0b6e\u0001\u0000" +
                    "\u0000\u0000\u0b6e\u00fb\u0001\u0000\u0000\u0000\u0b6f\u0b70\u0003\u0170" +
                    "\u00b8\u0000\u0b70\u0b71\u0005\u0005\u0000\u0000\u0b71\u0b73\u0001\u0000" +
                    "\u0000\u0000\u0b72\u0b6f\u0001\u0000\u0000\u0000\u0b72\u0b73\u0001\u0000" +
                    "\u0000\u0000\u0b73\u0b74\u0001\u0000\u0000\u0000\u0b74\u0b75\u0003\u0170" +
                    "\u00b8\u0000\u0b75\u00fd\u0001\u0000\u0000\u0000\u0b76\u0b77\u0003\u0170" +
                    "\u00b8\u0000\u0b77\u0b78\u0005\u0005\u0000\u0000\u0b78\u0b7a\u0001\u0000" +
                    "\u0000\u0000\u0b79\u0b76\u0001\u0000\u0000\u0000\u0b79\u0b7a\u0001\u0000" +
                    "\u0000\u0000\u0b7a\u0b7b\u0001\u0000\u0000\u0000\u0b7b\u0b7c\u0003\u0170" +
                    "\u00b8\u0000\u0b7c\u00ff\u0001\u0000\u0000\u0000\u0b7d\u0b85\u0003\u010c" +
                    "\u0086\u0000\u0b7e\u0b80\u0005\u0015\u0000\u0000\u0b7f\u0b7e\u0001\u0000" +
                    "\u0000\u0000\u0b7f\u0b80\u0001\u0000\u0000\u0000\u0b80\u0b83\u0001\u0000" +
                    "\u0000\u0000\u0b81\u0b84\u0003\u0170\u00b8\u0000\u0b82\u0b84\u0003\u00d4" +
                    "j\u0000\u0b83\u0b81\u0001\u0000\u0000\u0000\u0b83\u0b82\u0001\u0000\u0000" +
                    "\u0000\u0b84\u0b86\u0001\u0000\u0000\u0000\u0b85\u0b7f\u0001\u0000\u0000" +
                    "\u0000\u0b85\u0b86\u0001\u0000\u0000\u0000\u0b86\u0101\u0001\u0000\u0000" +
                    "\u0000\u0b87\u0b8c\u0003\u0100\u0080\u0000\u0b88\u0b89\u0005\u0004\u0000" +
                    "\u0000\u0b89\u0b8b\u0003\u0100\u0080\u0000\u0b8a\u0b88\u0001\u0000\u0000" +
                    "\u0000\u0b8b\u0b8e\u0001\u0000\u0000\u0000\u0b8c\u0b8a\u0001\u0000\u0000" +
                    "\u0000\u0b8c\u0b8d\u0001\u0000\u0000\u0000\u0b8d\u0103\u0001\u0000\u0000" +
                    "\u0000\u0b8e\u0b8c\u0001\u0000\u0000\u0000\u0b8f\u0b90\u0005\u0002\u0000" +
                    "\u0000\u0b90\u0b95\u0003\u0106\u0083\u0000\u0b91\u0b92\u0005\u0004\u0000" +
                    "\u0000\u0b92\u0b94\u0003\u0106\u0083\u0000\u0b93\u0b91\u0001\u0000\u0000" +
                    "\u0000\u0b94\u0b97\u0001\u0000\u0000\u0000\u0b95\u0b93\u0001\u0000\u0000" +
                    "\u0000\u0b95\u0b96\u0001\u0000\u0000\u0000\u0b96\u0b98\u0001\u0000\u0000" +
                    "\u0000\u0b97\u0b95\u0001\u0000\u0000\u0000\u0b98\u0b99\u0005\u0003\u0000" +
                    "\u0000\u0b99\u0105\u0001\u0000\u0000\u0000\u0b9a\u0b9d\u0003\u0108\u0084" +
                    "\u0000\u0b9b\u0b9d\u0003\u0150\u00a8\u0000\u0b9c\u0b9a\u0001\u0000\u0000" +
                    "\u0000\u0b9c\u0b9b\u0001\u0000\u0000\u0000\u0b9d\u0107\u0001\u0000\u0000" +
                    "\u0000\u0b9e\u0bac\u0003\u016e\u00b7\u0000\u0b9f\u0ba0\u0003\u0174\u00ba" +
                    "\u0000\u0ba0\u0ba1\u0005\u0002\u0000\u0000\u0ba1\u0ba6\u0003\u010a\u0085" +
                    "\u0000\u0ba2\u0ba3\u0005\u0004\u0000\u0000\u0ba3\u0ba5\u0003\u010a\u0085" +
                    "\u0000\u0ba4\u0ba2\u0001\u0000\u0000\u0000\u0ba5\u0ba8\u0001\u0000\u0000" +
                    "\u0000\u0ba6\u0ba4\u0001\u0000\u0000\u0000\u0ba6\u0ba7\u0001\u0000\u0000" +
                    "\u0000\u0ba7\u0ba9\u0001\u0000\u0000\u0000\u0ba8\u0ba6\u0001\u0000\u0000" +
                    "\u0000\u0ba9\u0baa\u0005\u0003\u0000\u0000\u0baa\u0bac\u0001\u0000\u0000" +
                    "\u0000\u0bab\u0b9e\u0001\u0000\u0000\u0000\u0bab\u0b9f\u0001\u0000\u0000" +
                    "\u0000\u0bac\u0109\u0001\u0000\u0000\u0000\u0bad\u0bb0\u0003\u016e\u00b7" +
                    "\u0000\u0bae\u0bb0\u0003\u0122\u0091\u0000\u0baf\u0bad\u0001\u0000\u0000" +
                    "\u0000\u0baf\u0bae\u0001\u0000\u0000\u0000\u0bb0\u010b\u0001\u0000\u0000" +
                    "\u0000\u0bb1\u0bb2\u0003\u0114\u008a\u0000\u0bb2\u010d\u0001\u0000\u0000" +
                    "\u0000\u0bb3\u0bb4\u0003\u0174\u00ba\u0000\u0bb4\u0bb5\u0005\u0176\u0000" +
                    "\u0000\u0bb5\u0bb6\u0003\u010c\u0086\u0000\u0bb6\u010f\u0001\u0000\u0000" +
                    "\u0000\u0bb7\u0bba\u0003\u010c\u0086\u0000\u0bb8\u0bba\u0003\u010e\u0087" +
                    "\u0000\u0bb9\u0bb7\u0001\u0000\u0000\u0000\u0bb9\u0bb8\u0001\u0000\u0000" +
                    "\u0000\u0bba\u0111\u0001\u0000\u0000\u0000\u0bbb\u0bc0\u0003\u010c\u0086" +
                    "\u0000\u0bbc\u0bbd\u0005\u0004\u0000\u0000\u0bbd\u0bbf\u0003\u010c\u0086" +
                    "\u0000\u0bbe\u0bbc\u0001\u0000\u0000\u0000\u0bbf\u0bc2\u0001\u0000\u0000" +
                    "\u0000\u0bc0\u0bbe\u0001\u0000\u0000\u0000\u0bc0\u0bc1\u0001\u0000\u0000" +
                    "\u0000\u0bc1\u0113\u0001\u0000\u0000\u0000\u0bc2\u0bc0\u0001\u0000\u0000" +
                    "\u0000\u0bc3\u0bc4\u0006\u008a\uffff\uffff\u0000\u0bc4\u0bc5\u0007\u001a" +
                    "\u0000\u0000\u0bc5\u0bd0\u0003\u0114\u008a\u0005\u0bc6\u0bc7\u0005j\u0000" +
                    "\u0000\u0bc7\u0bc8\u0005\u0002\u0000\u0000\u0bc8\u0bc9\u00030\u0018\u0000" +
                    "\u0bc9\u0bca\u0005\u0003\u0000\u0000\u0bca\u0bd0\u0001\u0000\u0000\u0000" +
                    "\u0bcb\u0bcd\u0003\u011a\u008d\u0000\u0bcc\u0bce\u0003\u0118\u008c\u0000" +
                    "\u0bcd\u0bcc\u0001\u0000\u0000\u0000\u0bcd\u0bce\u0001\u0000\u0000\u0000" +
                    "\u0bce\u0bd0\u0001\u0000\u0000\u0000\u0bcf\u0bc3\u0001\u0000\u0000\u0000" +
                    "\u0bcf\u0bc6\u0001\u0000\u0000\u0000\u0bcf\u0bcb\u0001\u0000\u0000\u0000" +
                    "\u0bd0\u0bd9\u0001\u0000\u0000\u0000\u0bd1\u0bd2\n\u0002\u0000\u0000\u0bd2" +
                    "\u0bd3\u0005\u000f\u0000\u0000\u0bd3\u0bd8\u0003\u0114\u008a\u0003\u0bd4" +
                    "\u0bd5\n\u0001\u0000\u0000\u0bd5\u0bd6\u0005\u00ce\u0000\u0000\u0bd6\u0bd8" +
                    "\u0003\u0114\u008a\u0002\u0bd7\u0bd1\u0001\u0000\u0000\u0000\u0bd7\u0bd4" +
                    "\u0001\u0000\u0000\u0000\u0bd8\u0bdb\u0001\u0000\u0000\u0000\u0bd9\u0bd7" +
                    "\u0001\u0000\u0000\u0000\u0bd9\u0bda\u0001\u0000\u0000\u0000\u0bda\u0115" +
                    "\u0001\u0000\u0000\u0000\u0bdb\u0bd9\u0001\u0000\u0000\u0000\u0bdc\u0bdd" +
                    "\u0007\u001b\u0000\u0000\u0bdd\u0117\u0001\u0000\u0000\u0000\u0bde\u0be0" +
                    "\u0005\u00c4\u0000\u0000\u0bdf\u0bde\u0001\u0000\u0000\u0000\u0bdf\u0be0" +
                    "\u0001\u0000\u0000\u0000\u0be0\u0be1\u0001\u0000\u0000\u0000\u0be1\u0be2" +
                    "\u0005\u0019\u0000\u0000\u0be2\u0be3\u0003\u011a\u008d\u0000\u0be3\u0be4" +
                    "\u0005\u000f\u0000\u0000\u0be4\u0be5\u0003\u011a\u008d\u0000\u0be5\u0c31" +
                    "\u0001\u0000\u0000\u0000\u0be6\u0be8\u0005\u00c4\u0000\u0000\u0be7\u0be6" +
                    "\u0001\u0000\u0000\u0000\u0be7\u0be8\u0001\u0000\u0000\u0000\u0be8\u0be9" +
                    "\u0001\u0000\u0000\u0000\u0be9\u0bea\u0005\u008e\u0000\u0000\u0bea\u0beb" +
                    "\u0005\u0002\u0000\u0000\u0beb\u0bf0\u0003\u010c\u0086\u0000\u0bec\u0bed" +
                    "\u0005\u0004\u0000\u0000\u0bed\u0bef\u0003\u010c\u0086\u0000\u0bee\u0bec" +
                    "\u0001\u0000\u0000\u0000\u0bef\u0bf2\u0001\u0000\u0000\u0000\u0bf0\u0bee" +
                    "\u0001\u0000\u0000\u0000\u0bf0\u0bf1\u0001\u0000\u0000\u0000\u0bf1\u0bf3" +
                    "\u0001\u0000\u0000\u0000\u0bf2\u0bf0\u0001\u0000\u0000\u0000\u0bf3\u0bf4" +
                    "\u0005\u0003\u0000\u0000\u0bf4\u0c31\u0001\u0000\u0000\u0000\u0bf5\u0bf7" +
                    "\u0005\u00c4\u0000\u0000\u0bf6\u0bf5\u0001\u0000\u0000\u0000\u0bf6\u0bf7" +
                    "\u0001\u0000\u0000\u0000\u0bf7\u0bf8\u0001\u0000\u0000\u0000\u0bf8\u0bf9" +
                    "\u0005\u008e\u0000\u0000\u0bf9\u0bfa\u0005\u0002\u0000\u0000\u0bfa\u0bfb" +
                    "\u00030\u0018\u0000\u0bfb\u0bfc\u0005\u0003\u0000\u0000\u0bfc\u0c31\u0001" +
                    "\u0000\u0000\u0000\u0bfd\u0bff\u0005\u00c4\u0000\u0000\u0bfe\u0bfd\u0001" +
                    "\u0000\u0000\u0000\u0bfe\u0bff\u0001\u0000\u0000\u0000\u0bff\u0c00\u0001" +
                    "\u0000\u0000\u0000\u0c00\u0c01\u0005\u00f8\u0000\u0000\u0c01\u0c31\u0003" +
                    "\u011a\u008d\u0000\u0c02\u0c04\u0005\u00c4\u0000\u0000\u0c03\u0c02\u0001" +
                    "\u0000\u0000\u0000\u0c03\u0c04\u0001\u0000\u0000\u0000\u0c04\u0c05\u0001" +
                    "\u0000\u0000\u0000\u0c05\u0c06\u0007\u001c\u0000\u0000\u0c06\u0c14\u0007" +
                    "\u001d\u0000\u0000\u0c07\u0c08\u0005\u0002\u0000\u0000\u0c08\u0c15\u0005" +
                    "\u0003\u0000\u0000\u0c09\u0c0a\u0005\u0002\u0000\u0000\u0c0a\u0c0f\u0003" +
                    "\u010c\u0086\u0000\u0c0b\u0c0c\u0005\u0004\u0000\u0000\u0c0c\u0c0e\u0003" +
                    "\u010c\u0086\u0000\u0c0d\u0c0b\u0001\u0000\u0000\u0000\u0c0e\u0c11\u0001" +
                    "\u0000\u0000\u0000\u0c0f\u0c0d\u0001\u0000\u0000\u0000\u0c0f\u0c10\u0001" +
                    "\u0000\u0000\u0000\u0c10\u0c12\u0001\u0000\u0000\u0000\u0c11\u0c0f\u0001" +
                    "\u0000\u0000\u0000\u0c12\u0c13\u0005\u0003\u0000\u0000\u0c13\u0c15\u0001" +
                    "\u0000\u0000\u0000\u0c14\u0c07\u0001\u0000\u0000\u0000\u0c14\u0c09\u0001" +
                    "\u0000\u0000\u0000\u0c15\u0c31\u0001\u0000\u0000\u0000\u0c16\u0c18\u0005" +
                    "\u00c4\u0000\u0000\u0c17\u0c16\u0001\u0000\u0000\u0000\u0c17\u0c18\u0001" +
                    "\u0000\u0000\u0000\u0c18\u0c19\u0001\u0000\u0000\u0000\u0c19\u0c1a\u0007" +
                    "\u001c\u0000\u0000\u0c1a\u0c1d\u0003\u011a\u008d\u0000\u0c1b\u0c1c\u0005" +
                    "d\u0000\u0000\u0c1c\u0c1e\u0003\u0180\u00c0\u0000\u0c1d\u0c1b\u0001\u0000" +
                    "\u0000\u0000\u0c1d\u0c1e\u0001\u0000\u0000\u0000\u0c1e\u0c31\u0001\u0000" +
                    "\u0000\u0000\u0c1f\u0c21\u0005\u009b\u0000\u0000\u0c20\u0c22\u0005\u00c4" +
                    "\u0000\u0000\u0c21\u0c20\u0001\u0000\u0000\u0000\u0c21\u0c22\u0001\u0000" +
                    "\u0000\u0000\u0c22\u0c23\u0001\u0000\u0000\u0000\u0c23\u0c31\u0005\u00c5" +
                    "\u0000\u0000\u0c24\u0c26\u0005\u009b\u0000\u0000\u0c25\u0c27\u0005\u00c4" +
                    "\u0000\u0000\u0c26\u0c25\u0001\u0000\u0000\u0000\u0c26\u0c27\u0001\u0000" +
                    "\u0000\u0000\u0c27\u0c28\u0001\u0000\u0000\u0000\u0c28\u0c31\u0007\u001e" +
                    "\u0000\u0000\u0c29\u0c2b\u0005\u009b\u0000\u0000\u0c2a\u0c2c\u0005\u00c4" +
                    "\u0000\u0000\u0c2b\u0c2a\u0001\u0000\u0000\u0000\u0c2b\u0c2c\u0001\u0000" +
                    "\u0000\u0000\u0c2c\u0c2d\u0001\u0000\u0000\u0000\u0c2d\u0c2e\u0005]\u0000" +
                    "\u0000\u0c2e\u0c2f\u0005|\u0000\u0000\u0c2f\u0c31\u0003\u011a\u008d\u0000" +
                    "\u0c30\u0bdf\u0001\u0000\u0000\u0000\u0c30\u0be7\u0001\u0000\u0000\u0000" +
                    "\u0c30\u0bf6\u0001\u0000\u0000\u0000\u0c30\u0bfe\u0001\u0000\u0000\u0000" +
                    "\u0c30\u0c03\u0001\u0000\u0000\u0000\u0c30\u0c17\u0001\u0000\u0000\u0000" +
                    "\u0c30\u0c1f\u0001\u0000\u0000\u0000\u0c30\u0c24\u0001\u0000\u0000\u0000" +
                    "\u0c30\u0c29\u0001\u0000\u0000\u0000\u0c31\u0119\u0001\u0000\u0000\u0000" +
                    "\u0c32\u0c33\u0006\u008d\uffff\uffff\u0000\u0c33\u0c37\u0003\u011e\u008f" +
                    "\u0000\u0c34\u0c35\u0007\u001f\u0000\u0000\u0c35\u0c37\u0003\u011a\u008d" +
                    "\u0007\u0c36\u0c32\u0001\u0000\u0000\u0000\u0c36\u0c34\u0001\u0000\u0000" +
                    "\u0000\u0c37\u0c4d\u0001\u0000\u0000\u0000\u0c38\u0c39\n\u0006\u0000\u0000" +
                    "\u0c39\u0c3a\u0007 \u0000\u0000\u0c3a\u0c4c\u0003\u011a\u008d\u0007\u0c3b" +
                    "\u0c3c\n\u0005\u0000\u0000\u0c3c\u0c3d\u0007!\u0000\u0000\u0c3d\u0c4c" +
                    "\u0003\u011a\u008d\u0006\u0c3e\u0c3f\n\u0004\u0000\u0000\u0c3f\u0c40\u0005" +
                    "\u016f\u0000\u0000\u0c40\u0c4c\u0003\u011a\u008d\u0005\u0c41\u0c42\n\u0003" +
                    "\u0000\u0000\u0c42\u0c43\u0005\u0172\u0000\u0000\u0c43\u0c4c\u0003\u011a" +
                    "\u008d\u0004\u0c44\u0c45\n\u0002\u0000\u0000\u0c45\u0c46\u0005\u0170\u0000" +
                    "\u0000\u0c46\u0c4c\u0003\u011a\u008d\u0003\u0c47\u0c48\n\u0001\u0000\u0000" +
                    "\u0c48\u0c49\u0003\u0124\u0092\u0000\u0c49\u0c4a\u0003\u011a\u008d\u0002" +
                    "\u0c4a\u0c4c\u0001\u0000\u0000\u0000\u0c4b\u0c38\u0001\u0000\u0000\u0000" +
                    "\u0c4b\u0c3b\u0001\u0000\u0000\u0000\u0c4b\u0c3e\u0001\u0000\u0000\u0000" +
                    "\u0c4b\u0c41\u0001\u0000\u0000\u0000\u0c4b\u0c44\u0001\u0000\u0000\u0000" +
                    "\u0c4b\u0c47\u0001\u0000\u0000\u0000\u0c4c\u0c4f\u0001\u0000\u0000\u0000" +
                    "\u0c4d\u0c4b\u0001\u0000\u0000\u0000\u0c4d\u0c4e\u0001\u0000\u0000\u0000" +
                    "\u0c4e\u011b\u0001\u0000\u0000\u0000\u0c4f\u0c4d\u0001\u0000\u0000\u0000" +
                    "\u0c50\u0c51\u0007\"\u0000\u0000\u0c51\u011d\u0001\u0000\u0000\u0000\u0c52" +
                    "\u0c53\u0006\u008f\uffff\uffff\u0000\u0c53\u0d46\u0007#\u0000\u0000\u0c54" +
                    "\u0c55\u0007$\u0000\u0000\u0c55\u0c58\u0005\u0002\u0000\u0000\u0c56\u0c59" +
                    "\u0003\u011c\u008e\u0000\u0c57\u0c59\u0003\u0180\u00c0\u0000\u0c58\u0c56" +
                    "\u0001\u0000\u0000\u0000\u0c58\u0c57\u0001\u0000\u0000\u0000\u0c59\u0c5a" +
                    "\u0001\u0000\u0000\u0000\u0c5a\u0c5b\u0005\u0004\u0000\u0000\u0c5b\u0c5c" +
                    "\u0003\u011a\u008d\u0000\u0c5c\u0c5d\u0005\u0004\u0000\u0000\u0c5d\u0c5e" +
                    "\u0003\u011a\u008d\u0000\u0c5e\u0c5f\u0005\u0003\u0000\u0000\u0c5f\u0d46" +
                    "\u0001\u0000\u0000\u0000\u0c60\u0c61\u0007%\u0000\u0000\u0c61\u0c64\u0005" +
                    "\u0002\u0000\u0000\u0c62\u0c65\u0003\u011c\u008e\u0000\u0c63\u0c65\u0003" +
                    "\u0180\u00c0\u0000\u0c64\u0c62\u0001\u0000\u0000\u0000\u0c64\u0c63\u0001" +
                    "\u0000\u0000\u0000\u0c65\u0c66\u0001\u0000\u0000\u0000\u0c66\u0c67\u0005" +
                    "\u0004\u0000\u0000\u0c67\u0c68\u0003\u011a\u008d\u0000\u0c68\u0c69\u0005" +
                    "\u0004\u0000\u0000\u0c69\u0c6a\u0003\u011a\u008d\u0000\u0c6a\u0c6b\u0005" +
                    "\u0003\u0000\u0000\u0c6b\u0d46\u0001\u0000\u0000\u0000\u0c6c\u0c6e\u0005" +
                    "$\u0000\u0000\u0c6d\u0c6f\u0003\u015e\u00af\u0000\u0c6e\u0c6d\u0001\u0000" +
                    "\u0000\u0000\u0c6f\u0c70\u0001\u0000\u0000\u0000\u0c70\u0c6e\u0001\u0000" +
                    "\u0000\u0000\u0c70\u0c71\u0001\u0000\u0000\u0000\u0c71\u0c74\u0001\u0000" +
                    "\u0000\u0000\u0c72\u0c73\u0005b\u0000\u0000\u0c73\u0c75\u0003\u010c\u0086" +
                    "\u0000\u0c74\u0c72\u0001\u0000\u0000\u0000\u0c74\u0c75\u0001\u0000\u0000" +
                    "\u0000\u0c75\u0c76\u0001\u0000\u0000\u0000\u0c76\u0c77\u0005c\u0000\u0000" +
                    "\u0c77\u0d46\u0001\u0000\u0000\u0000\u0c78\u0c79\u0005$\u0000\u0000\u0c79" +
                    "\u0c7b\u0003\u010c\u0086\u0000\u0c7a\u0c7c\u0003\u015e\u00af\u0000\u0c7b" +
                    "\u0c7a\u0001\u0000\u0000\u0000\u0c7c\u0c7d\u0001\u0000\u0000\u0000\u0c7d" +
                    "\u0c7b\u0001\u0000\u0000\u0000\u0c7d\u0c7e\u0001\u0000\u0000\u0000\u0c7e" +
                    "\u0c81\u0001\u0000\u0000\u0000\u0c7f\u0c80\u0005b\u0000\u0000\u0c80\u0c82" +
                    "\u0003\u010c\u0086\u0000\u0c81\u0c7f\u0001\u0000\u0000\u0000\u0c81\u0c82" +
                    "\u0001\u0000\u0000\u0000\u0c82\u0c83\u0001\u0000\u0000\u0000\u0c83\u0c84" +
                    "\u0005c\u0000\u0000\u0c84\u0d46\u0001\u0000\u0000\u0000\u0c85\u0c86\u0007" +
                    "&\u0000\u0000\u0c86\u0c87\u0005\u0002\u0000\u0000\u0c87\u0c88\u0003\u010c" +
                    "\u0086\u0000\u0c88\u0c89\u0005\u0015\u0000\u0000\u0c89\u0c8a\u0003\u0142" +
                    "\u00a1\u0000\u0c8a\u0c8b\u0005\u0003\u0000\u0000\u0c8b\u0d46\u0001\u0000" +
                    "\u0000\u0000\u0c8c\u0c8d\u0005\u011a\u0000\u0000\u0c8d\u0c96\u0005\u0002" +
                    "\u0000\u0000\u0c8e\u0c93\u0003\u0100\u0080\u0000\u0c8f\u0c90\u0005\u0004" +
                    "\u0000\u0000\u0c90\u0c92\u0003\u0100\u0080\u0000\u0c91\u0c8f\u0001\u0000" +
                    "\u0000\u0000\u0c92\u0c95\u0001\u0000\u0000\u0000\u0c93\u0c91\u0001\u0000" +
                    "\u0000\u0000\u0c93\u0c94\u0001\u0000\u0000\u0000\u0c94\u0c97\u0001\u0000" +
                    "\u0000\u0000\u0c95\u0c93\u0001\u0000\u0000\u0000\u0c96\u0c8e\u0001\u0000" +
                    "\u0000\u0000\u0c96\u0c97\u0001\u0000\u0000\u0000\u0c97\u0c98\u0001\u0000" +
                    "\u0000\u0000\u0c98\u0d46\u0005\u0003\u0000\u0000\u0c99\u0c9a\u0005u\u0000" +
                    "\u0000\u0c9a\u0c9b\u0005\u0002\u0000\u0000\u0c9b\u0c9e\u0003\u010c\u0086" +
                    "\u0000\u0c9c\u0c9d\u0005\u008b\u0000\u0000\u0c9d\u0c9f\u0005\u00c6\u0000" +
                    "\u0000\u0c9e\u0c9c\u0001\u0000\u0000\u0000\u0c9e\u0c9f\u0001\u0000\u0000" +
                    "\u0000\u0c9f\u0ca0\u0001\u0000\u0000\u0000\u0ca0\u0ca1\u0005\u0003\u0000" +
                    "\u0000\u0ca1\u0d46\u0001\u0000\u0000\u0000\u0ca2\u0ca3\u0005\u0012\u0000" +
                    "\u0000\u0ca3\u0ca4\u0005\u0002\u0000\u0000\u0ca4\u0ca7\u0003\u010c\u0086" +
                    "\u0000\u0ca5\u0ca6\u0005\u008b\u0000\u0000\u0ca6\u0ca8\u0005\u00c6\u0000" +
                    "\u0000\u0ca7\u0ca5\u0001\u0000\u0000\u0000\u0ca7\u0ca8\u0001\u0000\u0000" +
                    "\u0000\u0ca8\u0ca9\u0001\u0000\u0000\u0000\u0ca9\u0caa\u0005\u0003\u0000" +
                    "\u0000\u0caa\u0d46\u0001\u0000\u0000\u0000\u0cab\u0cac\u0005\u009f\u0000" +
                    "\u0000\u0cac\u0cad\u0005\u0002\u0000\u0000\u0cad\u0cb0\u0003\u010c\u0086" +
                    "\u0000\u0cae\u0caf\u0005\u008b\u0000\u0000\u0caf\u0cb1\u0005\u00c6\u0000" +
                    "\u0000\u0cb0\u0cae\u0001\u0000\u0000\u0000\u0cb0\u0cb1\u0001\u0000\u0000" +
                    "\u0000\u0cb1\u0cb2\u0001\u0000\u0000\u0000\u0cb2\u0cb3\u0005\u0003\u0000" +
                    "\u0000\u0cb3\u0d46\u0001\u0000\u0000\u0000\u0cb4\u0cb5\u0005\u00df\u0000" +
                    "\u0000\u0cb5\u0cb6\u0005\u0002\u0000\u0000\u0cb6\u0cb7\u0003\u011a\u008d" +
                    "\u0000\u0cb7\u0cb8\u0005\u008e\u0000\u0000\u0cb8\u0cb9\u0003\u011a\u008d" +
                    "\u0000\u0cb9\u0cba\u0005\u0003\u0000\u0000\u0cba\u0d46\u0001\u0000\u0000" +
                    "\u0000\u0cbb\u0d46\u0003\u0122\u0091\u0000\u0cbc\u0cbe\u0005\u016b\u0000" +
                    "\u0000\u0cbd\u0cbf\u0003\u008aE\u0000\u0cbe\u0cbd\u0001\u0000\u0000\u0000" +
                    "\u0cbe\u0cbf\u0001\u0000\u0000\u0000\u0cbf\u0d46\u0001\u0000\u0000\u0000" +
                    "\u0cc0\u0cc1\u0003\u016e\u00b7\u0000\u0cc1\u0cc2\u0005\u0005\u0000\u0000" +
                    "\u0cc2\u0cc4\u0005\u016b\u0000\u0000\u0cc3\u0cc5\u0003\u008aE\u0000\u0cc4" +
                    "\u0cc3\u0001\u0000\u0000\u0000\u0cc4\u0cc5\u0001\u0000\u0000\u0000\u0cc5" +
                    "\u0d46\u0001\u0000\u0000\u0000\u0cc6\u0cc7\u0005\u0002\u0000\u0000\u0cc7" +
                    "\u0cca\u0003\u0100\u0080\u0000\u0cc8\u0cc9\u0005\u0004\u0000\u0000\u0cc9" +
                    "\u0ccb\u0003\u0100\u0080\u0000\u0cca\u0cc8\u0001\u0000\u0000\u0000\u0ccb" +
                    "\u0ccc\u0001\u0000\u0000\u0000\u0ccc\u0cca\u0001\u0000\u0000\u0000\u0ccc" +
                    "\u0ccd\u0001\u0000\u0000\u0000\u0ccd\u0cce\u0001\u0000\u0000\u0000\u0cce" +
                    "\u0ccf\u0005\u0003\u0000\u0000\u0ccf\u0d46\u0001\u0000\u0000\u0000\u0cd0" +
                    "\u0cd1\u0005\u0002\u0000\u0000\u0cd1\u0cd2\u00030\u0018\u0000\u0cd2\u0cd3" +
                    "\u0005\u0003\u0000\u0000\u0cd3\u0d46\u0001\u0000\u0000\u0000\u0cd4\u0cd5" +
                    "\u0003\u016c\u00b6\u0000\u0cd5\u0ce1\u0005\u0002\u0000\u0000\u0cd6\u0cd8" +
                    "\u0003\u00c4b\u0000\u0cd7\u0cd6\u0001\u0000\u0000\u0000\u0cd7\u0cd8\u0001" +
                    "\u0000\u0000\u0000\u0cd8\u0cd9\u0001\u0000\u0000\u0000\u0cd9\u0cde\u0003" +
                    "\u0110\u0088\u0000\u0cda\u0cdb\u0005\u0004\u0000\u0000\u0cdb\u0cdd\u0003" +
                    "\u0110\u0088\u0000\u0cdc\u0cda\u0001\u0000\u0000\u0000\u0cdd\u0ce0\u0001" +
                    "\u0000\u0000\u0000\u0cde\u0cdc\u0001\u0000\u0000\u0000\u0cde\u0cdf\u0001" +
                    "\u0000\u0000\u0000\u0cdf\u0ce2\u0001\u0000\u0000\u0000\u0ce0\u0cde\u0001" +
                    "\u0000\u0000\u0000\u0ce1\u0cd7\u0001\u0000\u0000\u0000\u0ce1\u0ce2\u0001" +
                    "\u0000\u0000\u0000\u0ce2\u0ce3\u0001\u0000\u0000\u0000\u0ce3\u0cf3\u0005" +
                    "\u0003\u0000\u0000\u0ce4\u0ce5\u0005\u0158\u0000\u0000\u0ce5\u0ce6\u0005" +
                    "\u0083\u0000\u0000\u0ce6\u0ce7\u0005\u0002\u0000\u0000\u0ce7\u0ce8\u0005" +
                    "\u00cf\u0000\u0000\u0ce8\u0ce9\u0005 \u0000\u0000\u0ce9\u0cee\u0003p8" +
                    "\u0000\u0cea\u0ceb\u0005\u0004\u0000\u0000\u0ceb\u0ced\u0003p8\u0000\u0cec" +
                    "\u0cea\u0001\u0000\u0000\u0000\u0ced\u0cf0\u0001\u0000\u0000\u0000\u0cee" +
                    "\u0cec\u0001\u0000\u0000\u0000\u0cee\u0cef\u0001\u0000\u0000\u0000\u0cef" +
                    "\u0cf1\u0001\u0000\u0000\u0000\u0cf0\u0cee\u0001\u0000\u0000\u0000\u0cf1" +
                    "\u0cf2\u0005\u0003\u0000\u0000\u0cf2\u0cf4\u0001\u0000\u0000\u0000\u0cf3" +
                    "\u0ce4\u0001\u0000\u0000\u0000\u0cf3\u0cf4\u0001\u0000\u0000\u0000\u0cf4" +
                    "\u0cfb\u0001\u0000\u0000\u0000\u0cf5\u0cf6\u0005s\u0000\u0000\u0cf6\u0cf7" +
                    "\u0005\u0002\u0000\u0000\u0cf7\u0cf8\u0005\u0155\u0000\u0000\u0cf8\u0cf9" +
                    "\u0003\u0114\u008a\u0000\u0cf9\u0cfa\u0005\u0003\u0000\u0000\u0cfa\u0cfc" +
                    "\u0001\u0000\u0000\u0000\u0cfb\u0cf5\u0001\u0000\u0000\u0000\u0cfb\u0cfc" +
                    "\u0001\u0000\u0000\u0000\u0cfc\u0cff\u0001\u0000\u0000\u0000\u0cfd\u0cfe" +
                    "\u0007\'\u0000\u0000\u0cfe\u0d00\u0005\u00c6\u0000\u0000\u0cff\u0cfd\u0001" +
                    "\u0000\u0000\u0000\u0cff\u0d00\u0001\u0000\u0000\u0000\u0d00\u0d03\u0001" +
                    "\u0000\u0000\u0000\u0d01\u0d02\u0005\u00d3\u0000\u0000\u0d02\u0d04\u0003" +
                    "\u0164\u00b2\u0000\u0d03\u0d01\u0001\u0000\u0000\u0000\u0d03\u0d04\u0001" +
                    "\u0000\u0000\u0000\u0d04\u0d46\u0001\u0000\u0000\u0000\u0d05\u0d06\u0003" +
                    "\u0174\u00ba\u0000\u0d06\u0d07\u0005\u0175\u0000\u0000\u0d07\u0d08\u0003" +
                    "\u010c\u0086\u0000\u0d08\u0d46\u0001\u0000\u0000\u0000\u0d09\u0d0a\u0005" +
                    "\u0002\u0000\u0000\u0d0a\u0d0d\u0003\u0174\u00ba\u0000\u0d0b\u0d0c\u0005" +
                    "\u0004\u0000\u0000\u0d0c\u0d0e\u0003\u0174\u00ba\u0000\u0d0d\u0d0b\u0001" +
                    "\u0000\u0000\u0000\u0d0e\u0d0f\u0001\u0000\u0000\u0000\u0d0f\u0d0d\u0001" +
                    "\u0000\u0000\u0000\u0d0f\u0d10\u0001\u0000\u0000\u0000\u0d10\u0d11\u0001" +
                    "\u0000\u0000\u0000\u0d11\u0d12\u0005\u0003\u0000\u0000\u0d12\u0d13\u0005" +
                    "\u0175\u0000\u0000\u0d13\u0d14\u0003\u010c\u0086\u0000\u0d14\u0d46\u0001" +
                    "\u0000\u0000\u0000\u0d15\u0d46\u0003\u0174\u00ba\u0000\u0d16\u0d17\u0005" +
                    "\u0002\u0000\u0000\u0d17\u0d18\u0003\u010c\u0086\u0000\u0d18\u0d19\u0005" +
                    "\u0003\u0000\u0000\u0d19\u0d46\u0001\u0000\u0000\u0000\u0d1a\u0d1b\u0005" +
                    "o\u0000\u0000\u0d1b\u0d1c\u0005\u0002\u0000\u0000\u0d1c\u0d1d\u0003\u0174" +
                    "\u00ba\u0000\u0d1d\u0d1e\u0005|\u0000\u0000\u0d1e\u0d1f\u0003\u011a\u008d" +
                    "\u0000\u0d1f\u0d20\u0005\u0003\u0000\u0000\u0d20\u0d46\u0001\u0000\u0000" +
                    "\u0000\u0d21\u0d22\u0007(\u0000\u0000\u0d22\u0d23\u0005\u0002\u0000\u0000" +
                    "\u0d23\u0d24\u0003\u011a\u008d\u0000\u0d24\u0d25\u0007)\u0000\u0000\u0d25" +
                    "\u0d28\u0003\u011a\u008d\u0000\u0d26\u0d27\u0007*\u0000\u0000\u0d27\u0d29" +
                    "\u0003\u011a\u008d\u0000\u0d28\u0d26\u0001\u0000\u0000\u0000\u0d28\u0d29" +
                    "\u0001\u0000\u0000\u0000\u0d29\u0d2a\u0001\u0000\u0000\u0000\u0d2a\u0d2b" +
                    "\u0005\u0003\u0000\u0000\u0d2b\u0d46\u0001\u0000\u0000\u0000\u0d2c\u0d2d" +
                    "\u0005\u0137\u0000\u0000\u0d2d\u0d2f\u0005\u0002\u0000\u0000\u0d2e\u0d30" +
                    "\u0007+\u0000\u0000\u0d2f\u0d2e\u0001\u0000\u0000\u0000\u0d2f\u0d30\u0001" +
                    "\u0000\u0000\u0000\u0d30\u0d32\u0001\u0000\u0000\u0000\u0d31\u0d33\u0003" +
                    "\u011a\u008d\u0000\u0d32\u0d31\u0001\u0000\u0000\u0000\u0d32\u0d33\u0001" +
                    "\u0000\u0000\u0000\u0d33\u0d34\u0001\u0000\u0000\u0000\u0d34\u0d35\u0005" +
                    "|\u0000\u0000\u0d35\u0d36\u0003\u011a\u008d\u0000\u0d36\u0d37\u0005\u0003" +
                    "\u0000\u0000\u0d37\u0d46\u0001\u0000\u0000\u0000\u0d38\u0d39\u0005\u00d5" +
                    "\u0000\u0000\u0d39\u0d3a\u0005\u0002\u0000\u0000\u0d3a\u0d3b\u0003\u011a" +
                    "\u008d\u0000\u0d3b\u0d3c\u0005\u00de\u0000\u0000\u0d3c\u0d3d\u0003\u011a" +
                    "\u008d\u0000\u0d3d\u0d3e\u0005|\u0000\u0000\u0d3e\u0d41\u0003\u011a\u008d" +
                    "\u0000\u0d3f\u0d40\u0005x\u0000\u0000\u0d40\u0d42\u0003\u011a\u008d\u0000" +
                    "\u0d41\u0d3f\u0001\u0000\u0000\u0000\u0d41\u0d42\u0001\u0000\u0000\u0000" +
                    "\u0d42\u0d43\u0001\u0000\u0000\u0000\u0d43\u0d44\u0005\u0003\u0000\u0000" +
                    "\u0d44\u0d46\u0001\u0000\u0000\u0000\u0d45\u0c52\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0c54\u0001\u0000\u0000\u0000\u0d45\u0c60\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0c6c\u0001\u0000\u0000\u0000\u0d45\u0c78\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0c85\u0001\u0000\u0000\u0000\u0d45\u0c8c\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0c99\u0001\u0000\u0000\u0000\u0d45\u0ca2\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0cab\u0001\u0000\u0000\u0000\u0d45\u0cb4\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0cbb\u0001\u0000\u0000\u0000\u0d45\u0cbc\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0cc0\u0001\u0000\u0000\u0000\u0d45\u0cc6\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0cd0\u0001\u0000\u0000\u0000\u0d45\u0cd4\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0d05\u0001\u0000\u0000\u0000\u0d45\u0d09\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0d15\u0001\u0000\u0000\u0000\u0d45\u0d16\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0d1a\u0001\u0000\u0000\u0000\u0d45\u0d21\u0001\u0000\u0000\u0000" +
                    "\u0d45\u0d2c\u0001\u0000\u0000\u0000\u0d45\u0d38\u0001\u0000\u0000\u0000" +
                    "\u0d46\u0d56\u0001\u0000\u0000\u0000\u0d47\u0d48\n\u0017\u0000\u0000\u0d48" +
                    "\u0d55\u0003\u013e\u009f\u0000\u0d49\u0d4a\n\u0016\u0000\u0000\u0d4a\u0d4b" +
                    "\u0005\u0174\u0000\u0000\u0d4b\u0d55\u0003\u0142\u00a1\u0000\u0d4c\u0d4d" +
                    "\n\b\u0000\u0000\u0d4d\u0d4e\u0005\u0006\u0000\u0000\u0d4e\u0d4f\u0003" +
                    "\u011a\u008d\u0000\u0d4f\u0d50\u0005\u0007\u0000\u0000\u0d50\u0d55\u0001" +
                    "\u0000\u0000\u0000\u0d51\u0d52\n\u0006\u0000\u0000\u0d52\u0d53\u0005\u0005" +
                    "\u0000\u0000\u0d53\u0d55\u0003\u0174\u00ba\u0000\u0d54\u0d47\u0001\u0000" +
                    "\u0000\u0000\u0d54\u0d49\u0001\u0000\u0000\u0000\u0d54\u0d4c\u0001\u0000" +
                    "\u0000\u0000\u0d54\u0d51\u0001\u0000\u0000\u0000\u0d55\u0d58\u0001\u0000" +
                    "\u0000\u0000\u0d56\u0d54\u0001\u0000\u0000\u0000\u0d56\u0d57\u0001\u0000" +
                    "\u0000\u0000\u0d57\u011f\u0001\u0000\u0000\u0000\u0d58\u0d56\u0001\u0000" +
                    "\u0000\u0000\u0d59\u0d61\u0005I\u0000\u0000\u0d5a\u0d61\u0005\u012a\u0000" +
                    "\u0000\u0d5b\u0d61\u0005\u012b\u0000\u0000\u0d5c\u0d61\u0005\u012c\u0000" +
                    "\u0000\u0d5d\u0d61\u0005\u0097\u0000\u0000\u0d5e\u0d61\u0005\u0086\u0000" +
                    "\u0000\u0d5f\u0d61\u0003\u0174\u00ba\u0000\u0d60\u0d59\u0001\u0000\u0000" +
                    "\u0000\u0d60\u0d5a\u0001\u0000\u0000\u0000\u0d60\u0d5b\u0001\u0000\u0000" +
                    "\u0000\u0d60\u0d5c\u0001\u0000\u0000\u0000\u0d60\u0d5d\u0001\u0000\u0000" +
                    "\u0000\u0d60\u0d5e\u0001\u0000\u0000\u0000\u0d60\u0d5f\u0001\u0000\u0000" +
                    "\u0000\u0d61\u0121\u0001\u0000\u0000\u0000\u0d62\u0d72\u0005\u00c5\u0000" +
                    "\u0000\u0d63\u0d72\u0005\u0179\u0000\u0000\u0d64\u0d65\u0005\u0173\u0000" +
                    "\u0000\u0d65\u0d72\u0003\u0174\u00ba\u0000\u0d66\u0d72\u0003\u012c\u0096" +
                    "\u0000\u0d67\u0d68\u0003\u0120\u0090\u0000\u0d68\u0d69\u0003\u0180\u00c0" +
                    "\u0000\u0d69\u0d72\u0001\u0000\u0000\u0000\u0d6a\u0d72\u0003\u017c\u00be" +
                    "\u0000\u0d6b\u0d72\u0003\u012a\u0095\u0000\u0d6c\u0d6e\u0003\u0180\u00c0" +
                    "\u0000\u0d6d\u0d6c\u0001\u0000\u0000\u0000\u0d6e\u0d6f\u0001\u0000\u0000" +
                    "\u0000\u0d6f\u0d6d\u0001\u0000\u0000\u0000\u0d6f\u0d70\u0001\u0000\u0000" +
                    "\u0000\u0d70\u0d72\u0001\u0000\u0000\u0000\u0d71\u0d62\u0001\u0000\u0000" +
                    "\u0000\u0d71\u0d63\u0001\u0000\u0000\u0000\u0d71\u0d64\u0001\u0000\u0000" +
                    "\u0000\u0d71\u0d66\u0001\u0000\u0000\u0000\u0d71\u0d67\u0001\u0000\u0000" +
                    "\u0000\u0d71\u0d6a\u0001\u0000\u0000\u0000\u0d71\u0d6b\u0001\u0000\u0000" +
                    "\u0000\u0d71\u0d6d\u0001\u0000\u0000\u0000\u0d72\u0123\u0001\u0000\u0000" +
                    "\u0000\u0d73\u0d74\u0007,\u0000\u0000\u0d74\u0125\u0001\u0000\u0000\u0000" +
                    "\u0d75\u0d76\u0007-\u0000\u0000\u0d76\u0127\u0001\u0000\u0000\u0000\u0d77" +
                    "\u0d78\u0007.\u0000\u0000\u0d78\u0129\u0001\u0000\u0000\u0000\u0d79\u0d7a" +
                    "\u0007/\u0000\u0000\u0d7a\u012b\u0001\u0000\u0000\u0000\u0d7b\u0d7e\u0005" +
                    "\u0097\u0000\u0000\u0d7c\u0d7f\u0003\u012e\u0097\u0000\u0d7d\u0d7f\u0003" +
                    "\u0132\u0099\u0000\u0d7e\u0d7c\u0001\u0000\u0000\u0000\u0d7e\u0d7d\u0001" +
                    "\u0000\u0000\u0000\u0d7f\u012d\u0001\u0000\u0000\u0000\u0d80\u0d82\u0003" +
                    "\u0130\u0098\u0000\u0d81\u0d83\u0003\u0134\u009a\u0000\u0d82\u0d81\u0001" +
                    "\u0000\u0000\u0000\u0d82\u0d83\u0001\u0000\u0000\u0000\u0d83\u012f\u0001" +
                    "\u0000\u0000\u0000\u0d84\u0d85\u0003\u0136\u009b\u0000\u0d85\u0d86\u0003" +
                    "\u0138\u009c\u0000\u0d86\u0d88\u0001\u0000\u0000\u0000\u0d87\u0d84\u0001" +
                    "\u0000\u0000\u0000\u0d88\u0d89\u0001\u0000\u0000\u0000\u0d89\u0d87\u0001" +
                    "\u0000\u0000\u0000\u0d89\u0d8a\u0001\u0000\u0000\u0000\u0d8a\u0131\u0001" +
                    "\u0000\u0000\u0000\u0d8b\u0d8e\u0003\u0134\u009a\u0000\u0d8c\u0d8f\u0003" +
                    "\u0130\u0098\u0000\u0d8d\u0d8f\u0003\u0134\u009a\u0000\u0d8e\u0d8c\u0001" +
                    "\u0000\u0000\u0000\u0d8e\u0d8d\u0001\u0000\u0000\u0000\u0d8e\u0d8f\u0001" +
                    "\u0000\u0000\u0000\u0d8f\u0133\u0001\u0000\u0000\u0000\u0d90\u0d91\u0003" +
                    "\u0136\u009b\u0000\u0d91\u0d92\u0003\u013a\u009d\u0000\u0d92\u0d93\u0005" +
                    "\u0130\u0000\u0000\u0d93\u0d94\u0003\u013a\u009d\u0000\u0d94\u0135\u0001" +
                    "\u0000\u0000\u0000\u0d95\u0d97\u00070\u0000\u0000\u0d96\u0d95\u0001\u0000" +
                    "\u0000\u0000\u0d96\u0d97\u0001\u0000\u0000\u0000\u0d97\u0d9b\u0001\u0000" +
                    "\u0000\u0000\u0d98\u0d9c\u0005\u017f\u0000\u0000\u0d99\u0d9c\u0005\u0182" +
                    "\u0000\u0000\u0d9a\u0d9c\u0003\u0180\u00c0\u0000\u0d9b\u0d98\u0001\u0000" +
                    "\u0000\u0000\u0d9b\u0d99\u0001\u0000\u0000\u0000\u0d9b\u0d9a\u0001\u0000" +
                    "\u0000\u0000\u0d9c\u0137\u0001\u0000\u0000\u0000\u0d9d\u0d9e\u00071\u0000" +
                    "\u0000\u0d9e\u0139\u0001\u0000\u0000\u0000\u0d9f\u0da0\u00072\u0000\u0000" +
                    "\u0da0\u013b\u0001\u0000\u0000\u0000\u0da1\u0da5\u0005u\u0000\u0000\u0da2" +
                    "\u0da3\u0005\n\u0000\u0000\u0da3\u0da5\u0003\u0170\u00b8\u0000\u0da4\u0da1" +
                    "\u0001\u0000\u0000\u0000\u0da4\u0da2\u0001\u0000\u0000\u0000\u0da5\u013d" +
                    "\u0001\u0000\u0000\u0000\u0da6\u0da7\u00050\u0000\u0000\u0da7\u0da8\u0003" +
                    "\u0174\u00ba\u0000\u0da8\u013f\u0001\u0000\u0000\u0000\u0da9\u0dcc\u0005" +
                    "\u001c\u0000\u0000\u0daa\u0dcc\u0005\u012f\u0000\u0000\u0dab\u0dcc\u0005" +
                    "!\u0000\u0000\u0dac\u0dcc\u0005\u0110\u0000\u0000\u0dad\u0dcc\u0005\u010c" +
                    "\u0000\u0000\u0dae\u0dcc\u0005\u0098\u0000\u0000\u0daf\u0dcc\u0005\u0099" +
                    "\u0000\u0000\u0db0\u0dcc\u0005\u001a\u0000\u0000\u0db1\u0dcc\u0005\u00af" +
                    "\u0000\u0000\u0db2\u0dcc\u0005v\u0000\u0000\u0db3\u0dcc\u0005\u00e8\u0000" +
                    "\u0000\u0db4\u0dcc\u0005`\u0000\u0000\u0db5\u0dcc\u0005I\u0000\u0000\u0db6" +
                    "\u0dcc\u0005\u012a\u0000\u0000\u0db7\u0dcc\u0005\u012c\u0000\u0000\u0db8" +
                    "\u0dcc\u0005\u012b\u0000\u0000\u0db9\u0dbb\u0005\u0119\u0000\u0000\u0dba" +
                    "\u0dbc\u0003\u013e\u009f\u0000\u0dbb\u0dba\u0001\u0000\u0000\u0000\u0dbb" +
                    "\u0dbc\u0001\u0000\u0000\u0000\u0dbc\u0dcc\u0001\u0000\u0000\u0000\u0dbd" +
                    "\u0dcc\u0005*\u0000\u0000\u0dbe\u0dcc\u0005)\u0000\u0000\u0dbf\u0dcc\u0005" +
                    "\u014a\u0000\u0000\u0dc0\u0dcc\u0005\u001b\u0000\u0000\u0dc1\u0dcc\u0005" +
                    "R\u0000\u0000\u0dc2\u0dcc\u0005Q\u0000\u0000\u0dc3\u0dcc\u0005\u00c7\u0000" +
                    "\u0000\u0dc4\u0dcc\u0005\u0151\u0000\u0000\u0dc5\u0dcc\u0005\u0097\u0000" +
                    "\u0000\u0dc6\u0dcc\u0005\u014d\u0000\u0000\u0dc7\u0dcc\u0005\u0014\u0000" +
                    "\u0000\u0dc8\u0dcc\u0005\u011a\u0000\u0000\u0dc9\u0dcc\u0005\u00b1\u0000" +
                    "\u0000\u0dca\u0dcc\u0003\u0174\u00ba\u0000\u0dcb\u0da9\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0daa\u0001\u0000\u0000\u0000\u0dcb\u0dab\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dac\u0001\u0000\u0000\u0000\u0dcb\u0dad\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dae\u0001\u0000\u0000\u0000\u0dcb\u0daf\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0db0\u0001\u0000\u0000\u0000\u0dcb\u0db1\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0db2\u0001\u0000\u0000\u0000\u0dcb\u0db3\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0db4\u0001\u0000\u0000\u0000\u0dcb\u0db5\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0db6\u0001\u0000\u0000\u0000\u0dcb\u0db7\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0db8\u0001\u0000\u0000\u0000\u0dcb\u0db9\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dbd\u0001\u0000\u0000\u0000\u0dcb\u0dbe\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dbf\u0001\u0000\u0000\u0000\u0dcb\u0dc0\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dc1\u0001\u0000\u0000\u0000\u0dcb\u0dc2\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dc3\u0001\u0000\u0000\u0000\u0dcb\u0dc4\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dc5\u0001\u0000\u0000\u0000\u0dcb\u0dc6\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dc7\u0001\u0000\u0000\u0000\u0dcb\u0dc8\u0001\u0000\u0000" +
                    "\u0000\u0dcb\u0dc9\u0001\u0000\u0000\u0000\u0dcb\u0dca\u0001\u0000\u0000" +
                    "\u0000\u0dcc\u0141\u0001\u0000\u0000\u0000\u0dcd\u0dce\u0005\u0014\u0000" +
                    "\u0000\u0dce\u0dcf\u0005\u0165\u0000\u0000\u0dcf\u0dd0\u0003\u0142\u00a1" +
                    "\u0000\u0dd0\u0dd1\u0005\u0167\u0000\u0000\u0dd1\u0dfc\u0001\u0000\u0000" +
                    "\u0000\u0dd2\u0dd3\u0005\u00b1\u0000\u0000\u0dd3\u0dd4\u0005\u0165\u0000" +
                    "\u0000\u0dd4\u0dd5\u0003\u0142\u00a1\u0000\u0dd5\u0dd6\u0005\u0004\u0000" +
                    "\u0000\u0dd6\u0dd7\u0003\u0142\u00a1\u0000\u0dd7\u0dd8\u0005\u0167\u0000" +
                    "\u0000\u0dd8\u0dfc\u0001\u0000\u0000\u0000\u0dd9\u0de0\u0005\u011a\u0000" +
                    "\u0000\u0dda\u0ddc\u0005\u0165\u0000\u0000\u0ddb\u0ddd\u0003\u015a\u00ad" +
                    "\u0000\u0ddc\u0ddb\u0001\u0000\u0000\u0000\u0ddc\u0ddd\u0001\u0000\u0000" +
                    "\u0000\u0ddd\u0dde\u0001\u0000\u0000\u0000\u0dde\u0de1\u0005\u0167\u0000" +
                    "\u0000\u0ddf\u0de1\u0005\u0163\u0000\u0000\u0de0\u0dda\u0001\u0000\u0000" +
                    "\u0000\u0de0\u0ddf\u0001\u0000\u0000\u0000\u0de1\u0dfc\u0001\u0000\u0000" +
                    "\u0000\u0de2\u0de3\u0005\u0097\u0000\u0000\u0de3\u0de6\u00073\u0000\u0000" +
                    "\u0de4\u0de5\u0005\u0130\u0000\u0000\u0de5\u0de7\u0005\u00ba\u0000\u0000" +
                    "\u0de6\u0de4\u0001\u0000\u0000\u0000\u0de6\u0de7\u0001\u0000\u0000\u0000" +
                    "\u0de7\u0dfc\u0001\u0000\u0000\u0000\u0de8\u0de9\u0005\u0097\u0000\u0000" +
                    "\u0de9\u0dec\u00074\u0000\u0000\u0dea\u0deb\u0005\u0130\u0000\u0000\u0deb" +
                    "\u0ded\u00075\u0000\u0000\u0dec\u0dea\u0001\u0000\u0000\u0000\u0dec\u0ded" +
                    "\u0001\u0000\u0000\u0000\u0ded\u0dfc\u0001\u0000\u0000\u0000\u0dee\u0df9" +
                    "\u0003\u0140\u00a0\u0000\u0def\u0df0\u0005\u0002\u0000\u0000\u0df0\u0df5" +
                    "\u0005\u017f\u0000\u0000\u0df1\u0df2\u0005\u0004\u0000\u0000\u0df2\u0df4" +
                    "\u0005\u017f\u0000\u0000\u0df3\u0df1\u0001\u0000\u0000\u0000\u0df4\u0df7" +
                    "\u0001\u0000\u0000\u0000\u0df5\u0df3\u0001\u0000\u0000\u0000\u0df5\u0df6" +
                    "\u0001\u0000\u0000\u0000\u0df6\u0df8\u0001\u0000\u0000\u0000\u0df7\u0df5" +
                    "\u0001\u0000\u0000\u0000\u0df8\u0dfa\u0005\u0003\u0000\u0000\u0df9\u0def" +
                    "\u0001\u0000\u0000\u0000\u0df9\u0dfa\u0001\u0000\u0000\u0000\u0dfa\u0dfc" +
                    "\u0001\u0000\u0000\u0000\u0dfb\u0dcd\u0001\u0000\u0000\u0000\u0dfb\u0dd2" +
                    "\u0001\u0000\u0000\u0000\u0dfb\u0dd9\u0001\u0000\u0000\u0000\u0dfb\u0de2" +
                    "\u0001\u0000\u0000\u0000\u0dfb\u0de8\u0001\u0000\u0000\u0000\u0dfb\u0dee" +
                    "\u0001\u0000\u0000\u0000\u0dfc\u0143\u0001\u0000\u0000\u0000\u0dfd\u0e02" +
                    "\u0003\u0146\u00a3\u0000\u0dfe\u0dff\u0005\u0004\u0000\u0000\u0dff\u0e01" +
                    "\u0003\u0146\u00a3\u0000\u0e00\u0dfe\u0001\u0000\u0000\u0000\u0e01\u0e04" +
                    "\u0001\u0000\u0000\u0000\u0e02\u0e00\u0001\u0000\u0000\u0000\u0e02\u0e03" +
                    "\u0001\u0000\u0000\u0000\u0e03\u0145\u0001\u0000\u0000\u0000\u0e04\u0e02" +
                    "\u0001\u0000\u0000\u0000\u0e05\u0e06\u0003\u00f6{\u0000\u0e06\u0e0a\u0003" +
                    "\u0142\u00a1\u0000\u0e07\u0e09\u0003\u0148\u00a4\u0000\u0e08\u0e07\u0001" +
                    "\u0000\u0000\u0000\u0e09\u0e0c\u0001\u0000\u0000\u0000\u0e0a\u0e08\u0001" +
                    "\u0000\u0000\u0000\u0e0a\u0e0b\u0001\u0000\u0000\u0000\u0e0b\u0147\u0001" +
                    "\u0000\u0000\u0000\u0e0c\u0e0a\u0001\u0000\u0000\u0000\u0e0d\u0e0e\u0005" +
                    "\u00c4\u0000\u0000\u0e0e\u0e13\u0005\u00c5\u0000\u0000\u0e0f\u0e13\u0003" +
                    "\u014a\u00a5\u0000\u0e10\u0e13\u0003.\u0017\u0000\u0e11\u0e13\u0003\u013c" +
                    "\u009e\u0000\u0e12\u0e0d\u0001\u0000\u0000\u0000\u0e12\u0e0f\u0001\u0000" +
                    "\u0000\u0000\u0e12\u0e10\u0001\u0000\u0000\u0000\u0e12\u0e11\u0001\u0000" +
                    "\u0000\u0000\u0e13\u0149\u0001\u0000\u0000\u0000\u0e14\u0e15\u0005T\u0000" +
                    "\u0000\u0e15\u0e16\u0003\u010c\u0086\u0000\u0e16\u014b\u0001\u0000\u0000" +
                    "\u0000\u0e17\u0e18\u00076\u0000\u0000\u0e18\u0e19\u0003\u010c\u0086\u0000" +
                    "\u0e19\u014d\u0001\u0000\u0000\u0000\u0e1a\u0e1f\u0003\u0150\u00a8\u0000" +
                    "\u0e1b\u0e1c\u0005\u0004\u0000\u0000\u0e1c\u0e1e\u0003\u0150\u00a8\u0000" +
                    "\u0e1d\u0e1b\u0001\u0000\u0000\u0000\u0e1e\u0e21\u0001\u0000\u0000\u0000" +
                    "\u0e1f\u0e1d\u0001\u0000\u0000\u0000\u0e1f\u0e20\u0001\u0000\u0000\u0000" +
                    "\u0e20\u014f\u0001\u0000\u0000\u0000\u0e21\u0e1f\u0001\u0000\u0000\u0000" +
                    "\u0e22\u0e23\u0003\u0170\u00b8\u0000\u0e23\u0e26\u0003\u0142\u00a1\u0000" +
                    "\u0e24\u0e25\u0005\u00c4\u0000\u0000\u0e25\u0e27\u0005\u00c5\u0000\u0000" +
                    "\u0e26\u0e24\u0001\u0000\u0000\u0000\u0e26\u0e27\u0001\u0000\u0000\u0000" +
                    "\u0e27\u0e29\u0001\u0000\u0000\u0000\u0e28\u0e2a\u0003.\u0017\u0000\u0e29" +
                    "\u0e28\u0001\u0000\u0000\u0000\u0e29\u0e2a\u0001\u0000\u0000\u0000\u0e2a" +
                    "\u0151\u0001\u0000\u0000\u0000\u0e2b\u0e30\u0003\u0154\u00aa\u0000\u0e2c" +
                    "\u0e2d\u0005\u0004\u0000\u0000\u0e2d\u0e2f\u0003\u0154\u00aa\u0000\u0e2e" +
                    "\u0e2c\u0001\u0000\u0000\u0000\u0e2f\u0e32\u0001\u0000\u0000\u0000\u0e30" +
                    "\u0e2e\u0001\u0000\u0000\u0000\u0e30\u0e31\u0001\u0000\u0000\u0000\u0e31" +
                    "\u0153\u0001\u0000\u0000\u0000\u0e32\u0e30\u0001\u0000\u0000\u0000\u0e33" +
                    "\u0e34\u0003\u0170\u00b8\u0000\u0e34\u0e38\u0003\u0142\u00a1\u0000\u0e35" +
                    "\u0e37\u0003\u0156\u00ab\u0000\u0e36\u0e35\u0001\u0000\u0000\u0000\u0e37" +
                    "\u0e3a\u0001\u0000\u0000\u0000\u0e38\u0e36\u0001\u0000\u0000\u0000\u0e38" +
                    "\u0e39\u0001\u0000\u0000\u0000\u0e39\u0155\u0001\u0000\u0000\u0000\u0e3a" +
                    "\u0e38\u0001\u0000\u0000\u0000\u0e3b\u0e3c\u0005\u00c4\u0000\u0000\u0e3c" +
                    "\u0e41\u0005\u00c5\u0000\u0000\u0e3d\u0e41\u0003\u014a\u00a5\u0000\u0e3e" +
                    "\u0e41\u0003\u0158\u00ac\u0000\u0e3f\u0e41\u0003.\u0017\u0000\u0e40\u0e3b" +
                    "\u0001\u0000\u0000\u0000\u0e40\u0e3d\u0001\u0000\u0000\u0000\u0e40\u0e3e" +
                    "\u0001\u0000\u0000\u0000\u0e40\u0e3f\u0001\u0000\u0000\u0000\u0e41\u0157" +
                    "\u0001\u0000\u0000\u0000\u0e42\u0e43\u0005\u0080\u0000\u0000\u0e43\u0e44" +
                    "\u0005\r\u0000\u0000\u0e44\u0e45\u0005\u0015\u0000\u0000\u0e45\u0e46\u0005" +
                    "\u0002\u0000\u0000\u0e46\u0e47\u0003\u010c\u0086\u0000\u0e47\u0e48\u0005" +
                    "\u0003\u0000\u0000\u0e48\u0159\u0001\u0000\u0000\u0000\u0e49\u0e4e\u0003" +
                    "\u015c\u00ae\u0000\u0e4a\u0e4b\u0005\u0004\u0000\u0000\u0e4b\u0e4d\u0003" +
                    "\u015c\u00ae\u0000\u0e4c\u0e4a\u0001\u0000\u0000\u0000\u0e4d\u0e50\u0001" +
                    "\u0000\u0000\u0000\u0e4e\u0e4c\u0001\u0000\u0000\u0000\u0e4e\u0e4f\u0001" +
                    "\u0000\u0000\u0000\u0e4f\u015b\u0001\u0000\u0000\u0000\u0e50\u0e4e\u0001" +
                    "\u0000\u0000\u0000\u0e51\u0e53\u0003\u0170\u00b8\u0000\u0e52\u0e54\u0005" +
                    "\u0173\u0000\u0000\u0e53\u0e52\u0001\u0000\u0000\u0000\u0e53\u0e54\u0001" +
                    "\u0000\u0000\u0000\u0e54\u0e55\u0001\u0000\u0000\u0000\u0e55\u0e58\u0003" +
                    "\u0142\u00a1\u0000\u0e56\u0e57\u0005\u00c4\u0000\u0000\u0e57\u0e59\u0005" +
                    "\u00c5\u0000\u0000\u0e58\u0e56\u0001\u0000\u0000\u0000\u0e58\u0e59\u0001" +
                    "\u0000\u0000\u0000\u0e59\u0e5b\u0001\u0000\u0000\u0000\u0e5a\u0e5c\u0003" +
                    ".\u0017\u0000\u0e5b\u0e5a\u0001\u0000\u0000\u0000\u0e5b\u0e5c\u0001\u0000" +
                    "\u0000\u0000\u0e5c\u015d\u0001\u0000\u0000\u0000\u0e5d\u0e5e\u0005\u0154" +
                    "\u0000\u0000\u0e5e\u0e5f\u0003\u010c\u0086\u0000\u0e5f\u0e60\u0005\u0127" +
                    "\u0000\u0000\u0e60\u0e61\u0003\u010c\u0086\u0000\u0e61\u015f\u0001\u0000" +
                    "\u0000\u0000\u0e62\u0e63\u0005\u0156\u0000\u0000\u0e63\u0e68\u0003\u0162" +
                    "\u00b1\u0000\u0e64\u0e65\u0005\u0004\u0000\u0000\u0e65\u0e67\u0003\u0162" +
                    "\u00b1\u0000\u0e66\u0e64\u0001\u0000\u0000\u0000\u0e67\u0e6a\u0001\u0000" +
                    "\u0000\u0000\u0e68\u0e66\u0001\u0000\u0000\u0000\u0e68\u0e69\u0001\u0000" +
                    "\u0000\u0000\u0e69\u0161\u0001\u0000\u0000\u0000\u0e6a\u0e68\u0001\u0000" +
                    "\u0000\u0000\u0e6b\u0e6c\u0003\u0170\u00b8\u0000\u0e6c\u0e6d\u0005\u0015" +
                    "\u0000\u0000\u0e6d\u0e6e\u0003\u0164\u00b2\u0000\u0e6e\u0163\u0001\u0000" +
                    "\u0000\u0000\u0e6f\u0e9e\u0003\u0170\u00b8\u0000\u0e70\u0e71\u0005\u0002" +
                    "\u0000\u0000\u0e71\u0e72\u0003\u0170\u00b8\u0000\u0e72\u0e73\u0005\u0003" +
                    "\u0000\u0000\u0e73\u0e9e\u0001\u0000\u0000\u0000\u0e74\u0e97\u0005\u0002" +
                    "\u0000\u0000\u0e75\u0e76\u0005-\u0000\u0000\u0e76\u0e77\u0005 \u0000\u0000" +
                    "\u0e77\u0e7c\u0003\u010c\u0086\u0000\u0e78\u0e79\u0005\u0004\u0000\u0000" +
                    "\u0e79\u0e7b\u0003\u010c\u0086\u0000\u0e7a\u0e78\u0001\u0000\u0000\u0000" +
                    "\u0e7b\u0e7e\u0001\u0000\u0000\u0000\u0e7c\u0e7a\u0001\u0000\u0000\u0000" +
                    "\u0e7c\u0e7d\u0001\u0000\u0000\u0000\u0e7d\u0e98\u0001\u0000\u0000\u0000" +
                    "\u0e7e\u0e7c\u0001\u0000\u0000\u0000\u0e7f\u0e80\u0007\u0018\u0000\u0000" +
                    "\u0e80\u0e81\u0005 \u0000\u0000\u0e81\u0e86\u0003\u010c\u0086\u0000\u0e82" +
                    "\u0e83\u0005\u0004\u0000\u0000\u0e83\u0e85\u0003\u010c\u0086\u0000\u0e84" +
                    "\u0e82\u0001\u0000\u0000\u0000\u0e85\u0e88\u0001\u0000\u0000\u0000\u0e86" +
                    "\u0e84\u0001\u0000\u0000\u0000\u0e86\u0e87\u0001\u0000\u0000\u0000\u0e87" +
                    "\u0e8a\u0001\u0000\u0000\u0000\u0e88\u0e86\u0001\u0000\u0000\u0000\u0e89" +
                    "\u0e7f\u0001\u0000\u0000\u0000\u0e89\u0e8a\u0001\u0000\u0000\u0000\u0e8a" +
                    "\u0e95\u0001\u0000\u0000\u0000\u0e8b\u0e8c\u0007\u0019\u0000\u0000\u0e8c" +
                    "\u0e8d\u0005 \u0000\u0000\u0e8d\u0e92\u0003p8\u0000\u0e8e\u0e8f\u0005" +
                    "\u0004\u0000\u0000\u0e8f\u0e91\u0003p8\u0000\u0e90\u0e8e\u0001\u0000\u0000" +
                    "\u0000\u0e91\u0e94\u0001\u0000\u0000\u0000\u0e92\u0e90\u0001\u0000\u0000" +
                    "\u0000\u0e92\u0e93\u0001\u0000\u0000\u0000\u0e93\u0e96\u0001\u0000\u0000" +
                    "\u0000\u0e94\u0e92\u0001\u0000\u0000\u0000\u0e95\u0e8b\u0001\u0000\u0000" +
                    "\u0000\u0e95\u0e96\u0001\u0000\u0000\u0000\u0e96\u0e98\u0001\u0000\u0000" +
                    "\u0000\u0e97\u0e75\u0001\u0000\u0000\u0000\u0e97\u0e89\u0001\u0000\u0000" +
                    "\u0000\u0e98\u0e9a\u0001\u0000\u0000\u0000\u0e99\u0e9b\u0003\u0166\u00b3" +
                    "\u0000\u0e9a\u0e99\u0001\u0000\u0000\u0000\u0e9a\u0e9b\u0001\u0000\u0000" +
                    "\u0000\u0e9b\u0e9c\u0001\u0000\u0000\u0000\u0e9c\u0e9e\u0005\u0003\u0000" +
                    "\u0000\u0e9d\u0e6f\u0001\u0000\u0000\u0000\u0e9d\u0e70\u0001\u0000\u0000" +
                    "\u0000\u0e9d\u0e74\u0001\u0000\u0000\u0000\u0e9e\u0165\u0001\u0000\u0000" +
                    "\u0000\u0e9f\u0ea0\u0005\u00e7\u0000\u0000\u0ea0\u0eb0\u0003\u0168\u00b4" +
                    "\u0000\u0ea1\u0ea2\u0005\u00fe\u0000\u0000\u0ea2\u0eb0\u0003\u0168\u00b4" +
                    "\u0000\u0ea3\u0ea4\u0005\u00e7\u0000\u0000\u0ea4\u0ea5\u0005\u0019\u0000" +
                    "\u0000\u0ea5\u0ea6\u0003\u0168\u00b4\u0000\u0ea6\u0ea7\u0005\u000f\u0000" +
                    "\u0000\u0ea7\u0ea8\u0003\u0168\u00b4\u0000\u0ea8\u0eb0\u0001\u0000\u0000" +
                    "\u0000\u0ea9\u0eaa\u0005\u00fe\u0000\u0000\u0eaa\u0eab\u0005\u0019\u0000" +
                    "\u0000\u0eab\u0eac\u0003\u0168\u00b4\u0000\u0eac\u0ead\u0005\u000f\u0000" +
                    "\u0000\u0ead\u0eae\u0003\u0168\u00b4\u0000\u0eae\u0eb0\u0001\u0000\u0000" +
                    "\u0000\u0eaf\u0e9f\u0001\u0000\u0000\u0000\u0eaf\u0ea1\u0001\u0000\u0000" +
                    "\u0000\u0eaf\u0ea3\u0001\u0000\u0000\u0000\u0eaf\u0ea9\u0001\u0000\u0000" +
                    "\u0000\u0eb0\u0167\u0001\u0000\u0000\u0000\u0eb1\u0eb2\u0005\u013d\u0000" +
                    "\u0000\u0eb2\u0eb9\u00077\u0000\u0000\u0eb3\u0eb4\u0005@\u0000\u0000\u0eb4" +
                    "\u0eb9\u0005\u00fd\u0000\u0000\u0eb5\u0eb6\u0003\u010c\u0086\u0000\u0eb6" +
                    "\u0eb7\u00077\u0000\u0000\u0eb7\u0eb9\u0001\u0000\u0000\u0000\u0eb8\u0eb1" +
                    "\u0001\u0000\u0000\u0000\u0eb8\u0eb3\u0001\u0000\u0000\u0000\u0eb8\u0eb5" +
                    "\u0001\u0000\u0000\u0000\u0eb9\u0169\u0001\u0000\u0000\u0000\u0eba\u0ebf" +
                    "\u0003\u016e\u00b7\u0000\u0ebb\u0ebc\u0005\u0004\u0000\u0000\u0ebc\u0ebe" +
                    "\u0003\u016e\u00b7\u0000\u0ebd\u0ebb\u0001\u0000\u0000\u0000\u0ebe\u0ec1" +
                    "\u0001\u0000\u0000\u0000\u0ebf\u0ebd\u0001\u0000\u0000\u0000\u0ebf\u0ec0" +
                    "\u0001\u0000\u0000\u0000\u0ec0\u016b\u0001\u0000\u0000\u0000\u0ec1\u0ebf" +
                    "\u0001\u0000\u0000\u0000\u0ec2\u0ec3\u0005\u0089\u0000\u0000\u0ec3\u0ec4" +
                    "\u0005\u0002\u0000\u0000\u0ec4\u0ec5\u0003\u010c\u0086\u0000\u0ec5\u0ec6" +
                    "\u0005\u0003\u0000\u0000\u0ec6\u0ecd\u0001\u0000\u0000\u0000\u0ec7\u0ecd" +
                    "\u0005\u0089\u0000\u0000\u0ec8\u0ecd\u0003\u016e\u00b7\u0000\u0ec9\u0ecd" +
                    "\u0005s\u0000\u0000\u0eca\u0ecd\u0005\u00a3\u0000\u0000\u0ecb\u0ecd\u0005" +
                    "\u00f7\u0000\u0000\u0ecc\u0ec2\u0001\u0000\u0000\u0000\u0ecc\u0ec7\u0001" +
                    "\u0000\u0000\u0000\u0ecc\u0ec8\u0001\u0000\u0000\u0000\u0ecc\u0ec9\u0001" +
                    "\u0000\u0000\u0000\u0ecc\u0eca\u0001\u0000\u0000\u0000\u0ecc\u0ecb\u0001" +
                    "\u0000\u0000\u0000\u0ecd\u016d\u0001\u0000\u0000\u0000\u0ece\u0ed3\u0003" +
                    "\u0174\u00ba\u0000\u0ecf\u0ed0\u0005\u0005\u0000\u0000\u0ed0\u0ed2\u0003" +
                    "\u0174\u00ba\u0000\u0ed1\u0ecf\u0001\u0000\u0000\u0000\u0ed2\u0ed5\u0001" +
                    "\u0000\u0000\u0000\u0ed3\u0ed1\u0001\u0000\u0000\u0000\u0ed3\u0ed4\u0001" +
                    "\u0000\u0000\u0000\u0ed4\u016f\u0001\u0000\u0000\u0000\u0ed5\u0ed3\u0001" +
                    "\u0000\u0000\u0000\u0ed6\u0ed7\u0003\u0174\u00ba\u0000\u0ed7\u0ed8\u0003" +
                    "\u0172\u00b9\u0000\u0ed8\u0171\u0001\u0000\u0000\u0000\u0ed9\u0eda\u0005" +
                    "\u016a\u0000\u0000\u0eda\u0edc\u0003\u0174\u00ba\u0000\u0edb\u0ed9\u0001" +
                    "\u0000\u0000\u0000\u0edc\u0edd\u0001\u0000\u0000\u0000\u0edd\u0edb\u0001" +
                    "\u0000\u0000\u0000\u0edd\u0ede\u0001\u0000\u0000\u0000\u0ede\u0ee1\u0001" +
                    "\u0000\u0000\u0000\u0edf\u0ee1\u0001\u0000\u0000\u0000\u0ee0\u0edb\u0001" +
                    "\u0000\u0000\u0000\u0ee0\u0edf\u0001\u0000\u0000\u0000\u0ee1\u0173\u0001" +
                    "\u0000\u0000\u0000\u0ee2\u0ee6\u0003\u0176\u00bb\u0000\u0ee3\u0ee4\u0004" +
                    "\u00ba\u0012\u0000\u0ee4\u0ee6\u0003\u0188\u00c4\u0000\u0ee5\u0ee2\u0001" +
                    "\u0000\u0000\u0000\u0ee5\u0ee3\u0001\u0000\u0000\u0000\u0ee6\u0175\u0001" +
                    "\u0000\u0000\u0000\u0ee7\u0eee\u0005\u0186\u0000\u0000\u0ee8\u0eee\u0003" +
                    "\u0178\u00bc\u0000\u0ee9\u0eea\u0004\u00bb\u0013\u0000\u0eea\u0eee\u0003" +
                    "\u0186\u00c3\u0000\u0eeb\u0eec\u0004\u00bb\u0014\u0000\u0eec\u0eee\u0003" +
                    "\u018a\u00c5\u0000\u0eed\u0ee7\u0001\u0000\u0000\u0000\u0eed\u0ee8\u0001" +
                    "\u0000\u0000\u0000\u0eed\u0ee9\u0001\u0000\u0000\u0000\u0eed\u0eeb\u0001" +
                    "\u0000\u0000\u0000\u0eee\u0177\u0001\u0000\u0000\u0000\u0eef\u0ef3\u0005" +
                    "\u0187\u0000\u0000\u0ef0\u0ef1\u0004\u00bc\u0015\u0000\u0ef1\u0ef3\u0005" +
                    "\u017b\u0000\u0000\u0ef2\u0eef\u0001\u0000\u0000\u0000\u0ef2\u0ef0\u0001" +
                    "\u0000\u0000\u0000\u0ef3\u0179\u0001\u0000\u0000\u0000\u0ef4\u0ef5\u0005" +
                    "\u0187\u0000\u0000\u0ef5\u017b\u0001\u0000\u0000\u0000\u0ef6\u0ef8\u0004" +
                    "\u00be\u0016\u0000\u0ef7\u0ef9\u0005\u016a\u0000\u0000\u0ef8\u0ef7\u0001" +
                    "\u0000\u0000\u0000\u0ef8\u0ef9\u0001\u0000\u0000\u0000\u0ef9\u0efa\u0001" +
                    "\u0000\u0000\u0000\u0efa\u0f22\u0005\u0181\u0000\u0000\u0efb\u0efd\u0004" +
                    "\u00be\u0017\u0000\u0efc\u0efe\u0005\u016a\u0000\u0000\u0efd\u0efc\u0001" +
                    "\u0000\u0000\u0000\u0efd\u0efe\u0001\u0000\u0000\u0000\u0efe\u0eff\u0001" +
                    "\u0000\u0000\u0000\u0eff\u0f22\u0005\u0182\u0000\u0000\u0f00\u0f02\u0004" +
                    "\u00be\u0018\u0000\u0f01\u0f03\u0005\u016a\u0000\u0000\u0f02\u0f01\u0001" +
                    "\u0000\u0000\u0000\u0f02\u0f03\u0001\u0000\u0000\u0000\u0f03\u0f04\u0001" +
                    "\u0000\u0000\u0000\u0f04\u0f22\u00078\u0000\u0000\u0f05\u0f07\u0005\u016a" +
                    "\u0000\u0000\u0f06\u0f05\u0001\u0000\u0000\u0000\u0f06\u0f07\u0001\u0000" +
                    "\u0000\u0000\u0f07\u0f08\u0001\u0000\u0000\u0000\u0f08\u0f22\u0005\u017f" +
                    "\u0000\u0000\u0f09\u0f0b\u0005\u016a\u0000\u0000\u0f0a\u0f09\u0001\u0000" +
                    "\u0000\u0000\u0f0a\u0f0b\u0001\u0000\u0000\u0000\u0f0b\u0f0c\u0001\u0000" +
                    "\u0000\u0000\u0f0c\u0f22\u0005\u017c\u0000\u0000\u0f0d\u0f0f\u0005\u016a" +
                    "\u0000\u0000\u0f0e\u0f0d\u0001\u0000\u0000\u0000\u0f0e\u0f0f\u0001\u0000" +
                    "\u0000\u0000\u0f0f\u0f10\u0001\u0000\u0000\u0000\u0f10\u0f22\u0005\u017d" +
                    "\u0000\u0000\u0f11\u0f13\u0005\u016a\u0000\u0000\u0f12\u0f11\u0001\u0000" +
                    "\u0000\u0000\u0f12\u0f13\u0001\u0000\u0000\u0000\u0f13\u0f14\u0001\u0000" +
                    "\u0000\u0000\u0f14\u0f22\u0005\u017e\u0000\u0000\u0f15\u0f17\u0005\u016a" +
                    "\u0000\u0000\u0f16\u0f15\u0001\u0000\u0000\u0000\u0f16\u0f17\u0001\u0000" +
                    "\u0000\u0000\u0f17\u0f18\u0001\u0000\u0000\u0000\u0f18\u0f22\u0005\u0184" +
                    "\u0000\u0000\u0f19\u0f1b\u0005\u016a\u0000\u0000\u0f1a\u0f19\u0001\u0000" +
                    "\u0000\u0000\u0f1a\u0f1b\u0001\u0000\u0000\u0000\u0f1b\u0f1c\u0001\u0000" +
                    "\u0000\u0000\u0f1c\u0f22\u0005\u0183\u0000\u0000\u0f1d\u0f1f\u0005\u016a" +
                    "\u0000\u0000\u0f1e\u0f1d\u0001\u0000\u0000\u0000\u0f1e\u0f1f\u0001\u0000" +
                    "\u0000\u0000\u0f1f\u0f20\u0001\u0000\u0000\u0000\u0f20\u0f22\u0005\u0185" +
                    "\u0000\u0000\u0f21\u0ef6\u0001\u0000\u0000\u0000\u0f21\u0efb\u0001\u0000" +
                    "\u0000\u0000\u0f21\u0f00\u0001\u0000\u0000\u0000\u0f21\u0f06\u0001\u0000" +
                    "\u0000\u0000\u0f21\u0f0a\u0001\u0000\u0000\u0000\u0f21\u0f0e\u0001\u0000" +
                    "\u0000\u0000\u0f21\u0f12\u0001\u0000\u0000\u0000\u0f21\u0f16\u0001\u0000" +
                    "\u0000\u0000\u0f21\u0f1a\u0001\u0000\u0000\u0000\u0f21\u0f1e\u0001\u0000" +
                    "\u0000\u0000\u0f22\u017d\u0001\u0000\u0000\u0000\u0f23\u0f24\u0005\u013b" +
                    "\u0000\u0000\u0f24\u0f2f\u0003\u0142\u00a1\u0000\u0f25\u0f2f\u0003.\u0017" +
                    "\u0000\u0f26\u0f2f\u0003\u013c\u009e\u0000\u0f27\u0f28\u00079\u0000\u0000" +
                    "\u0f28\u0f29\u0005\u00c4\u0000\u0000\u0f29\u0f2f\u0005\u00c5\u0000\u0000" +
                    "\u0f2a\u0f2b\u0005\u0109\u0000\u0000\u0f2b\u0f2f\u0003\u014a\u00a5\u0000" +
                    "\u0f2c\u0f2d\u0005a\u0000\u0000\u0f2d\u0f2f\u0005T\u0000\u0000\u0f2e\u0f23" +
                    "\u0001\u0000\u0000\u0000\u0f2e\u0f25\u0001\u0000\u0000\u0000\u0f2e\u0f26" +
                    "\u0001\u0000\u0000\u0000\u0f2e\u0f27\u0001\u0000\u0000\u0000\u0f2e\u0f2a" +
                    "\u0001\u0000\u0000\u0000\u0f2e\u0f2c\u0001\u0000\u0000\u0000\u0f2f\u017f" +
                    "\u0001\u0000\u0000\u0000\u0f30\u0f34\u0005\u017a\u0000\u0000\u0f31\u0f32" +
                    "\u0004\u00c0\u0019\u0000\u0f32\u0f34\u0005\u017b\u0000\u0000\u0f33\u0f30" +
                    "\u0001\u0000\u0000\u0000\u0f33\u0f31\u0001\u0000\u0000\u0000\u0f34\u0181" +
                    "\u0001\u0000\u0000\u0000\u0f35\u0f38\u0003\u0180\u00c0\u0000\u0f36\u0f38" +
                    "\u0005\u00c5\u0000\u0000\u0f37\u0f35\u0001\u0000\u0000\u0000\u0f37\u0f36" +
                    "\u0001\u0000\u0000\u0000\u0f38\u0183\u0001\u0000\u0000\u0000\u0f39\u0f3c" +
                    "\u0005\u017f\u0000\u0000\u0f3a\u0f3c\u0003\u0180\u00c0\u0000\u0f3b\u0f39" +
                    "\u0001\u0000\u0000\u0000\u0f3b\u0f3a\u0001\u0000\u0000\u0000\u0f3c\u0185" +
                    "\u0001\u0000\u0000\u0000\u0f3d\u0f3e\u0007:\u0000\u0000\u0f3e\u0187\u0001" +
                    "\u0000\u0000\u0000\u0f3f\u0f40\u0007;\u0000\u0000\u0f40\u0189\u0001\u0000" +
                    "\u0000\u0000\u0f41\u0f42\u0007<\u0000\u0000\u0f42\u018b\u0001\u0000\u0000" +
                    "\u0000\u01f7\u0190\u01aa\u01b7\u01be\u01c6\u01c8\u01dc\u01e0\u01e6\u01e9" +
                    "\u01ec\u01f3\u01f6\u01fa\u01fd\u0204\u020f\u0211\u0219\u021c\u0220\u0223" +
                    "\u0229\u0234\u023a\u023f\u0261\u026e\u0287\u0290\u0294\u029a\u029e\u02a3" +
                    "\u02a9\u02b5\u02bd\u02c3\u02d0\u02d5\u02e5\u02ec\u02f0\u02f6\u0305\u0309" +
                    "\u030f\u0315\u0318\u031b\u0321\u0325\u032d\u032f\u0338\u033b\u0344\u0349" +
                    "\u034f\u0356\u0359\u035f\u036a\u036d\u0371\u0376\u037c\u037f\u0383\u0386" +
                    "\u038d\u0392\u0399\u039c\u039f\u03a6\u03ab\u03b4\u03bc\u03c2\u03c5\u03c8" +
                    "\u03ce\u03d2\u03d7\u03da\u03de\u03e0\u03e8\u03f0\u03f3\u03f8\u03fe\u0404" +
                    "\u0407\u040b\u040e\u0412\u042e\u0431\u0435\u043b\u043e\u0441\u0447\u044f" +
                    "\u0454\u045a\u0460\u0463\u046a\u0471\u047c\u048d\u04a8\u04ab\u04b1\u04ba" +
                    "\u04c3\u04cb\u04d0\u04d5\u04dc\u04e2\u04e7\u04ef\u04f2\u04f9\u04fc\u0505" +
                    "\u0509\u050d\u0511\u0518\u051d\u0529\u052d\u0534\u05a8\u05b0\u05b8\u05c1" +
                    "\u05cb\u05cf\u05d2\u05d8\u05de\u05f0\u05fc\u0601\u060a\u0612\u0619\u061b" +
                    "\u0620\u0625\u0629\u062e\u0633\u0638\u0641\u0646\u0649\u064e\u0652\u0657" +
                    "\u0659\u065d\u0666\u066e\u0674\u0680\u0687\u0690\u0695\u0698\u06af\u06b1" +
                    "\u06ba\u06c1\u06c4\u06cb\u06cf\u06d5\u06dd\u06e4\u06e7\u06ef\u06fa\u0705" +
                    "\u070d\u0713\u071f\u0726\u072f\u0731\u0737\u0742\u074a\u0750\u0756\u0759" +
                    "\u0761\u076e\u0771\u077a\u077d\u0786\u0789\u0792\u0795\u0798\u079e\u07a0" +
                    "\u07a4\u07b0\u07b7\u07be\u07c1\u07c3\u07cf\u07d3\u07d7\u07dd\u07e1\u07e9" +
                    "\u07ed\u07f0\u07f3\u07f6\u07fa\u07fe\u0803\u0807\u080a\u080d\u0810\u0814" +
                    "\u0819\u081d\u0820\u0823\u0826\u0828\u082e\u0835\u083a\u083d\u0840\u0844" +
                    "\u084e\u0852\u0854\u0857\u085b\u0861\u0865\u0870\u087a\u087e\u088a\u0896" +
                    "\u08a5\u08aa\u08b0\u08bc\u08cc\u08d1\u08de\u08e3\u08eb\u08f1\u08f5\u08f8" +
                    "\u08fb\u0902\u0908\u0911\u091b\u092a\u092f\u0931\u0935\u093e\u094b\u0950" +
                    "\u0954\u095c\u095f\u0963\u0971\u097e\u0983\u0987\u098a\u098e\u0994\u0997" +
                    "\u099e\u09aa\u09b5\u09c2\u09cd\u09d2\u09da\u09df\u09e6\u09ef\u09f2\u09f7" +
                    "\u09fe\u0a01\u0a06\u0a0c\u0a12\u0a17\u0a1b\u0a21\u0a25\u0a28\u0a2d\u0a30" +
                    "\u0a35\u0a39\u0a3c\u0a3f\u0a45\u0a4a\u0a51\u0a54\u0a66\u0a68\u0a6b\u0a76" +
                    "\u0a7f\u0a86\u0a8e\u0a95\u0a99\u0a9c\u0aa4\u0aac\u0ab2\u0aba\u0ac2\u0ac9" +
                    "\u0ad0\u0ad2\u0adf\u0ae5\u0ae7\u0af1\u0af7\u0af9\u0b01\u0b05\u0b0e\u0b11" +
                    "\u0b17\u0b1b\u0b1d\u0b26\u0b32\u0b34\u0b3b\u0b42\u0b48\u0b4e\u0b50\u0b57" +
                    "\u0b5f\u0b67\u0b6d\u0b72\u0b79\u0b7f\u0b83\u0b85\u0b8c\u0b95\u0b9c\u0ba6" +
                    "\u0bab\u0baf\u0bb9\u0bc0\u0bcd\u0bcf\u0bd7\u0bd9\u0bdf\u0be7\u0bf0\u0bf6" +
                    "\u0bfe\u0c03\u0c0f\u0c14\u0c17\u0c1d\u0c21\u0c26\u0c2b\u0c30\u0c36\u0c4b" +
                    "\u0c4d\u0c58\u0c64\u0c70\u0c74\u0c7d\u0c81\u0c93\u0c96\u0c9e\u0ca7\u0cb0" +
                    "\u0cbe\u0cc4\u0ccc\u0cd7\u0cde\u0ce1\u0cee\u0cf3\u0cfb\u0cff\u0d03\u0d0f" +
                    "\u0d28\u0d2f\u0d32\u0d41\u0d45\u0d54\u0d56\u0d60\u0d6f\u0d71\u0d7e\u0d82" +
                    "\u0d89\u0d8e\u0d96\u0d9b\u0da4\u0dbb\u0dcb\u0ddc\u0de0\u0de6\u0dec\u0df5" +
                    "\u0df9\u0dfb\u0e02\u0e0a\u0e12\u0e1f\u0e26\u0e29\u0e30\u0e38\u0e40\u0e4e" +
                    "\u0e53\u0e58\u0e5b\u0e68\u0e7c\u0e86\u0e89\u0e92\u0e95\u0e97\u0e9a\u0e9d" +
                    "\u0eaf\u0eb8\u0ebf\u0ecc\u0ed3\u0edd\u0ee0\u0ee5\u0eed\u0ef2\u0ef8\u0efd" +
                    "\u0f02\u0f06\u0f0a\u0f0e\u0f12\u0f16\u0f1a\u0f1e\u0f21\u0f2e\u0f33\u0f37" +
                    "\u0f3b";
    public static final String _serializedATN = Utils.join(
            new String[]{
                    _serializedATNSegment0,
                    _serializedATNSegment1
            },
            ""
    );
    public static final ATN _ATN =
            new ATNDeserializer().deserialize(_serializedATN.toCharArray());

    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}